// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package milvus.proto.tokenizer

import milvus.proto.tokenizer

object TokenizerGrpc {
  val METHOD_TOKENIZE: _root_.io.grpc.MethodDescriptor[TokenizationRequest, TokenizationResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.tokenizer.Tokenizer", "Tokenize"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[TokenizationRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[TokenizationResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(TokenizerProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("milvus.proto.tokenizer.Tokenizer")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(tokenizer.TokenizerProto.javaDescriptor))
      .addMethod(METHOD_TOKENIZE)
      .build()
  
  trait Tokenizer extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Tokenizer] = Tokenizer
    def tokenize(request: TokenizationRequest): scala.concurrent.Future[TokenizationResponse]
  }
  
  object Tokenizer extends _root_.scalapb.grpc.ServiceCompanion[Tokenizer] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Tokenizer] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = tokenizer.TokenizerProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = tokenizer.TokenizerProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Tokenizer, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_TOKENIZE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: TokenizationRequest, observer: _root_.io.grpc.stub.StreamObserver[TokenizationResponse]) => {
          serviceImpl.tokenize(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  trait TokenizerBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Tokenizer] = Tokenizer
    def tokenize(request: TokenizationRequest): TokenizationResponse
  }
  
  class TokenizerBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[TokenizerBlockingStub](channel, options) with TokenizerBlockingClient {
    override def tokenize(request: TokenizationRequest): TokenizationResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TOKENIZE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): TokenizerBlockingStub = new TokenizerBlockingStub(channel, options)
  }
  
  class TokenizerStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[TokenizerStub](channel, options) with Tokenizer {
    override def tokenize(request: TokenizationRequest): scala.concurrent.Future[TokenizationResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TOKENIZE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): TokenizerStub = new TokenizerStub(channel, options)
  }
  
  object TokenizerStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[TokenizerStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): TokenizerStub = new TokenizerStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[TokenizerStub] = this
  }
  
  def bindService(serviceImpl: Tokenizer, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Tokenizer.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): TokenizerBlockingStub = new TokenizerBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): TokenizerStub = new TokenizerStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = tokenizer.TokenizerProto.javaDescriptor.getServices().get(0)
  
}