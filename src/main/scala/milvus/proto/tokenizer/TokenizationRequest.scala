// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package milvus.proto.tokenizer

import milvus.proto.tokenizer

@SerialVersionUID(0L)
final case class TokenizationRequest(
                                      text: _root_.scala.Predef.String = "",
                                      parameters: _root_.scala.Seq[TokenizationRequest.Parameter] = _root_.scala.Seq.empty,
                                      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TokenizationRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = text
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      parameters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = text
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      parameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withText(__v: _root_.scala.Predef.String): TokenizationRequest = copy(text = __v)
    def clearParameters = copy(parameters = _root_.scala.Seq.empty)
    def addParameters(__vs: TokenizationRequest.Parameter *): TokenizationRequest = addAllParameters(__vs)
    def addAllParameters(__vs: Iterable[TokenizationRequest.Parameter]): TokenizationRequest = copy(parameters = parameters ++ __vs)
    def withParameters(__v: _root_.scala.Seq[TokenizationRequest.Parameter]): TokenizationRequest = copy(parameters = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = text
          if (__t != "") __t else null
        }
        case 2 => parameters
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(text)
        case 2 => _root_.scalapb.descriptors.PRepeated(parameters.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: TokenizationRequest.type = tokenizer.TokenizationRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.tokenizer.TokenizationRequest])
}

object TokenizationRequest extends scalapb.GeneratedMessageCompanion[TokenizationRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[TokenizationRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): TokenizationRequest = {
    var __text: _root_.scala.Predef.String = ""
    val __parameters: _root_.scala.collection.immutable.VectorBuilder[TokenizationRequest.Parameter] = new _root_.scala.collection.immutable.VectorBuilder[TokenizationRequest.Parameter]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __text = _input__.readStringRequireUtf8()
        case 18 =>
          __parameters += _root_.scalapb.LiteParser.readMessage[TokenizationRequest.Parameter](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    TokenizationRequest(
        text = __text,
        parameters = __parameters.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[TokenizationRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      TokenizationRequest(
        text = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        parameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[TokenizationRequest.Parameter]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TokenizerProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tokenizer.TokenizerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = tokenizer.TokenizationRequest.Parameter
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      tokenizer.TokenizationRequest.Parameter
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = TokenizationRequest(
    text = "",
    parameters = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class Parameter(
      key: _root_.scala.Predef.String = "",
      values: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Parameter] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        values.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        values.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): Parameter = copy(key = __v)
      def clearValues = copy(values = _root_.scala.Seq.empty)
      def addValues(__vs: _root_.scala.Predef.String *): Parameter = addAllValues(__vs)
      def addAllValues(__vs: Iterable[_root_.scala.Predef.String]): Parameter = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Parameter = copy(values = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PRepeated(values.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: TokenizationRequest.Parameter.type = tokenizer.TokenizationRequest.Parameter
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.tokenizer.TokenizationRequest.Parameter])
  }
  
  object Parameter extends scalapb.GeneratedMessageCompanion[TokenizationRequest.Parameter] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[TokenizationRequest.Parameter] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): TokenizationRequest.Parameter = {
      var __key: _root_.scala.Predef.String = ""
      val __values: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __values += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      tokenizer.TokenizationRequest.Parameter(
          key = __key,
          values = __values.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[TokenizationRequest.Parameter] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        tokenizer.TokenizationRequest.Parameter(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tokenizer.TokenizationRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tokenizer.TokenizationRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tokenizer.TokenizationRequest.Parameter(
      key = "",
      values = _root_.scala.Seq.empty
    )
    implicit class ParameterLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, TokenizationRequest.Parameter]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, TokenizationRequest.Parameter](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUES_FIELD_NUMBER = 2
    def of(
      key: _root_.scala.Predef.String,
      values: _root_.scala.Seq[_root_.scala.Predef.String]
    ): TokenizationRequest.Parameter = tokenizer.TokenizationRequest.Parameter(
      key,
      values
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.tokenizer.TokenizationRequest.Parameter])
  }
  
  implicit class TokenizationRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, TokenizationRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, TokenizationRequest](_l) {
    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.text)((c_, f_) => c_.copy(text = f_))
    def parameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[TokenizationRequest.Parameter]] = field(_.parameters)((c_, f_) => c_.copy(parameters = f_))
  }
  final val TEXT_FIELD_NUMBER = 1
  final val PARAMETERS_FIELD_NUMBER = 2
  def of(
    text: _root_.scala.Predef.String,
    parameters: _root_.scala.Seq[TokenizationRequest.Parameter]
  ): TokenizationRequest = TokenizationRequest(
    text,
    parameters
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.tokenizer.TokenizationRequest])
}
