// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package milvus.proto.msg

import milvus.proto.msg

/** @param rowData
  *   row_data was reserved for compatibility
  */
@SerialVersionUID(0L)
final case class InsertRequest(
                                base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None,
                                shardName: _root_.scala.Predef.String = "",
                                dbName: _root_.scala.Predef.String = "",
                                collectionName: _root_.scala.Predef.String = "",
                                partitionName: _root_.scala.Predef.String = "",
                                dbID: _root_.scala.Long = 0L,
                                collectionID: _root_.scala.Long = 0L,
                                partitionID: _root_.scala.Long = 0L,
                                segmentID: _root_.scala.Long = 0L,
                                timestamps: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
                                rowIDs: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
                                rowData: _root_.scala.Seq[io.milvus.grpc.common.Blob] = _root_.scala.Seq.empty,
                                fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData] = _root_.scala.Seq.empty,
                                numRows: _root_.scala.Long = 0L,
                                version: InsertDataVersion = msg.InsertDataVersion.RowBased,
                                unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InsertRequest] {
    private[this] def timestampsSerializedSize = {
      if (__timestampsSerializedSizeField == 0) __timestampsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        timestamps.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt64SizeNoTag(__i))
        __s
      }
      __timestampsSerializedSizeField
    }
    @transient private[this] var __timestampsSerializedSizeField: _root_.scala.Int = 0
    private[this] def rowIDsSerializedSize = {
      if (__rowIDsSerializedSizeField == 0) __rowIDsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        rowIDs.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __rowIDsSerializedSizeField
    }
    @transient private[this] var __rowIDsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (base.isDefined) {
        val __value = base.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = shardName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = partitionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = dbID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = collectionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      
      {
        val __value = partitionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
        }
      };
      
      {
        val __value = segmentID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      if (timestamps.nonEmpty) {
        val __localsize = timestampsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (rowIDs.nonEmpty) {
        val __localsize = rowIDsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      rowData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      fieldsData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = numRows
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(14, __value)
        }
      };
      
      {
        val __value = version.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(15, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      base.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = shardName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = partitionName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = dbID
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = collectionID
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      {
        val __v = partitionID
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = segmentID
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      if (timestamps.nonEmpty) {
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(timestampsSerializedSize)
        timestamps.foreach(_output__.writeUInt64NoTag)
      };
      if (rowIDs.nonEmpty) {
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(rowIDsSerializedSize)
        rowIDs.foreach(_output__.writeInt64NoTag)
      };
      rowData.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldsData.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = numRows
        if (__v != 0L) {
          _output__.writeUInt64(14, __v)
        }
      };
      {
        val __v = version.value
        if (__v != 0) {
          _output__.writeEnum(15, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBase: io.milvus.grpc.common.MsgBase = base.getOrElse(io.milvus.grpc.common.MsgBase.defaultInstance)
    def clearBase: InsertRequest = copy(base = _root_.scala.None)
    def withBase(__v: io.milvus.grpc.common.MsgBase): InsertRequest = copy(base = Option(__v))
    def withShardName(__v: _root_.scala.Predef.String): InsertRequest = copy(shardName = __v)
    def withDbName(__v: _root_.scala.Predef.String): InsertRequest = copy(dbName = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): InsertRequest = copy(collectionName = __v)
    def withPartitionName(__v: _root_.scala.Predef.String): InsertRequest = copy(partitionName = __v)
    def withDbID(__v: _root_.scala.Long): InsertRequest = copy(dbID = __v)
    def withCollectionID(__v: _root_.scala.Long): InsertRequest = copy(collectionID = __v)
    def withPartitionID(__v: _root_.scala.Long): InsertRequest = copy(partitionID = __v)
    def withSegmentID(__v: _root_.scala.Long): InsertRequest = copy(segmentID = __v)
    def clearTimestamps = copy(timestamps = _root_.scala.Seq.empty)
    def addTimestamps(__vs: _root_.scala.Long *): InsertRequest = addAllTimestamps(__vs)
    def addAllTimestamps(__vs: Iterable[_root_.scala.Long]): InsertRequest = copy(timestamps = timestamps ++ __vs)
    def withTimestamps(__v: _root_.scala.Seq[_root_.scala.Long]): InsertRequest = copy(timestamps = __v)
    def clearRowIDs = copy(rowIDs = _root_.scala.Seq.empty)
    def addRowIDs(__vs: _root_.scala.Long *): InsertRequest = addAllRowIDs(__vs)
    def addAllRowIDs(__vs: Iterable[_root_.scala.Long]): InsertRequest = copy(rowIDs = rowIDs ++ __vs)
    def withRowIDs(__v: _root_.scala.Seq[_root_.scala.Long]): InsertRequest = copy(rowIDs = __v)
    def clearRowData = copy(rowData = _root_.scala.Seq.empty)
    def addRowData(__vs: io.milvus.grpc.common.Blob *): InsertRequest = addAllRowData(__vs)
    def addAllRowData(__vs: Iterable[io.milvus.grpc.common.Blob]): InsertRequest = copy(rowData = rowData ++ __vs)
    def withRowData(__v: _root_.scala.Seq[io.milvus.grpc.common.Blob]): InsertRequest = copy(rowData = __v)
    def clearFieldsData = copy(fieldsData = _root_.scala.Seq.empty)
    def addFieldsData(__vs: io.milvus.grpc.schema.FieldData *): InsertRequest = addAllFieldsData(__vs)
    def addAllFieldsData(__vs: Iterable[io.milvus.grpc.schema.FieldData]): InsertRequest = copy(fieldsData = fieldsData ++ __vs)
    def withFieldsData(__v: _root_.scala.Seq[io.milvus.grpc.schema.FieldData]): InsertRequest = copy(fieldsData = __v)
    def withNumRows(__v: _root_.scala.Long): InsertRequest = copy(numRows = __v)
    def withVersion(__v: InsertDataVersion): InsertRequest = copy(version = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => base.orNull
        case 2 => {
          val __t = shardName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = partitionName
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = dbID
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = collectionID
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = partitionID
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = segmentID
          if (__t != 0L) __t else null
        }
        case 10 => timestamps
        case 11 => rowIDs
        case 12 => rowData
        case 13 => fieldsData
        case 14 => {
          val __t = numRows
          if (__t != 0L) __t else null
        }
        case 15 => {
          val __t = version.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => base.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(shardName)
        case 3 => _root_.scalapb.descriptors.PString(dbName)
        case 4 => _root_.scalapb.descriptors.PString(collectionName)
        case 5 => _root_.scalapb.descriptors.PString(partitionName)
        case 6 => _root_.scalapb.descriptors.PLong(dbID)
        case 7 => _root_.scalapb.descriptors.PLong(collectionID)
        case 8 => _root_.scalapb.descriptors.PLong(partitionID)
        case 9 => _root_.scalapb.descriptors.PLong(segmentID)
        case 10 => _root_.scalapb.descriptors.PRepeated(timestamps.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(rowIDs.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 12 => _root_.scalapb.descriptors.PRepeated(rowData.iterator.map(_.toPMessage).toVector)
        case 13 => _root_.scalapb.descriptors.PRepeated(fieldsData.iterator.map(_.toPMessage).toVector)
        case 14 => _root_.scalapb.descriptors.PLong(numRows)
        case 15 => _root_.scalapb.descriptors.PEnum(version.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: InsertRequest.type = msg.InsertRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.msg.InsertRequest])
}

object InsertRequest extends scalapb.GeneratedMessageCompanion[InsertRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[InsertRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): InsertRequest = {
    var __base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None
    var __shardName: _root_.scala.Predef.String = ""
    var __dbName: _root_.scala.Predef.String = ""
    var __collectionName: _root_.scala.Predef.String = ""
    var __partitionName: _root_.scala.Predef.String = ""
    var __dbID: _root_.scala.Long = 0L
    var __collectionID: _root_.scala.Long = 0L
    var __partitionID: _root_.scala.Long = 0L
    var __segmentID: _root_.scala.Long = 0L
    val __timestamps: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __rowIDs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __rowData: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.Blob] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.Blob]
    val __fieldsData: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData]
    var __numRows: _root_.scala.Long = 0L
    var __version: InsertDataVersion = msg.InsertDataVersion.RowBased
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __base = _root_.scala.Option(__base.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __shardName = _input__.readStringRequireUtf8()
        case 26 =>
          __dbName = _input__.readStringRequireUtf8()
        case 34 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 42 =>
          __partitionName = _input__.readStringRequireUtf8()
        case 48 =>
          __dbID = _input__.readInt64()
        case 56 =>
          __collectionID = _input__.readInt64()
        case 64 =>
          __partitionID = _input__.readInt64()
        case 72 =>
          __segmentID = _input__.readInt64()
        case 80 =>
          __timestamps += _input__.readUInt64()
        case 82 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __timestamps += _input__.readUInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 88 =>
          __rowIDs += _input__.readInt64()
        case 90 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __rowIDs += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 98 =>
          __rowData += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Blob](_input__)
        case 106 =>
          __fieldsData += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldData](_input__)
        case 112 =>
          __numRows = _input__.readUInt64()
        case 120 =>
          __version = msg.InsertDataVersion.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    InsertRequest(
        base = __base,
        shardName = __shardName,
        dbName = __dbName,
        collectionName = __collectionName,
        partitionName = __partitionName,
        dbID = __dbID,
        collectionID = __collectionID,
        partitionID = __partitionID,
        segmentID = __segmentID,
        timestamps = __timestamps.result(),
        rowIDs = __rowIDs.result(),
        rowData = __rowData.result(),
        fieldsData = __fieldsData.result(),
        numRows = __numRows,
        version = __version,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[InsertRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      InsertRequest(
        base = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.MsgBase]]),
        shardName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        partitionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dbID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        partitionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        segmentID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        rowIDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        rowData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.Blob]]).getOrElse(_root_.scala.Seq.empty),
        fieldsData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FieldData]]).getOrElse(_root_.scala.Seq.empty),
        numRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        version = msg.InsertDataVersion.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(msg.InsertDataVersion.RowBased.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MsgProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = msg.MsgProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.MsgBase
      case 12 => __out = io.milvus.grpc.common.Blob
      case 13 => __out = io.milvus.grpc.schema.FieldData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 15 => msg.InsertDataVersion
    }
  }
  lazy val defaultInstance = InsertRequest(
    base = _root_.scala.None,
    shardName = "",
    dbName = "",
    collectionName = "",
    partitionName = "",
    dbID = 0L,
    collectionID = 0L,
    partitionID = 0L,
    segmentID = 0L,
    timestamps = _root_.scala.Seq.empty,
    rowIDs = _root_.scala.Seq.empty,
    rowData = _root_.scala.Seq.empty,
    fieldsData = _root_.scala.Seq.empty,
    numRows = 0L,
    version = msg.InsertDataVersion.RowBased
  )
  implicit class InsertRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, InsertRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, InsertRequest](_l) {
    def base: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase] = field(_.getBase)((c_, f_) => c_.copy(base = _root_.scala.Option(f_)))
    def optionalBase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.MsgBase]] = field(_.base)((c_, f_) => c_.copy(base = f_))
    def shardName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shardName)((c_, f_) => c_.copy(shardName = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def partitionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.partitionName)((c_, f_) => c_.copy(partitionName = f_))
    def dbID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dbID)((c_, f_) => c_.copy(dbID = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
    def partitionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.partitionID)((c_, f_) => c_.copy(partitionID = f_))
    def segmentID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.segmentID)((c_, f_) => c_.copy(segmentID = f_))
    def timestamps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.timestamps)((c_, f_) => c_.copy(timestamps = f_))
    def rowIDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.rowIDs)((c_, f_) => c_.copy(rowIDs = f_))
    def rowData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.Blob]] = field(_.rowData)((c_, f_) => c_.copy(rowData = f_))
    def fieldsData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FieldData]] = field(_.fieldsData)((c_, f_) => c_.copy(fieldsData = f_))
    def numRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.numRows)((c_, f_) => c_.copy(numRows = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, InsertDataVersion] = field(_.version)((c_, f_) => c_.copy(version = f_))
  }
  final val BASE_FIELD_NUMBER = 1
  final val SHARDNAME_FIELD_NUMBER = 2
  final val DB_NAME_FIELD_NUMBER = 3
  final val COLLECTION_NAME_FIELD_NUMBER = 4
  final val PARTITION_NAME_FIELD_NUMBER = 5
  final val DBID_FIELD_NUMBER = 6
  final val COLLECTIONID_FIELD_NUMBER = 7
  final val PARTITIONID_FIELD_NUMBER = 8
  final val SEGMENTID_FIELD_NUMBER = 9
  final val TIMESTAMPS_FIELD_NUMBER = 10
  final val ROWIDS_FIELD_NUMBER = 11
  final val ROW_DATA_FIELD_NUMBER = 12
  final val FIELDS_DATA_FIELD_NUMBER = 13
  final val NUM_ROWS_FIELD_NUMBER = 14
  final val VERSION_FIELD_NUMBER = 15
  def of(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase],
    shardName: _root_.scala.Predef.String,
    dbName: _root_.scala.Predef.String,
    collectionName: _root_.scala.Predef.String,
    partitionName: _root_.scala.Predef.String,
    dbID: _root_.scala.Long,
    collectionID: _root_.scala.Long,
    partitionID: _root_.scala.Long,
    segmentID: _root_.scala.Long,
    timestamps: _root_.scala.Seq[_root_.scala.Long],
    rowIDs: _root_.scala.Seq[_root_.scala.Long],
    rowData: _root_.scala.Seq[io.milvus.grpc.common.Blob],
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData],
    numRows: _root_.scala.Long,
    version: InsertDataVersion
  ): InsertRequest = InsertRequest(
    base,
    shardName,
    dbName,
    collectionName,
    partitionName,
    dbID,
    collectionID,
    partitionID,
    segmentID,
    timestamps,
    rowIDs,
    rowData,
    fieldsData,
    numRows,
    version
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.msg.InsertRequest])
}
