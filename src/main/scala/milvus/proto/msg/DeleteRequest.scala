// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package milvus.proto.msg

import milvus.proto.msg

/** @param int64PrimaryKeys
  *   deprecated
  */
@SerialVersionUID(0L)
final case class DeleteRequest(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None,
    shardName: _root_.scala.Predef.String = "",
    dbName: _root_.scala.Predef.String = "",
    collectionName: _root_.scala.Predef.String = "",
    partitionName: _root_.scala.Predef.String = "",
    dbID: _root_.scala.Long = 0L,
    collectionID: _root_.scala.Long = 0L,
    partitionID: _root_.scala.Long = 0L,
    int64PrimaryKeys: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    timestamps: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    numRows: _root_.scala.Long = 0L,
    primaryKeys: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None,
    segmentId: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DeleteRequest] {
    private[this] def int64PrimaryKeysSerializedSize = {
      if (__int64PrimaryKeysSerializedSizeField == 0) __int64PrimaryKeysSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        int64PrimaryKeys.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __int64PrimaryKeysSerializedSizeField
    }
    @transient private[this] var __int64PrimaryKeysSerializedSizeField: _root_.scala.Int = 0
    private[this] def timestampsSerializedSize = {
      if (__timestampsSerializedSizeField == 0) __timestampsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        timestamps.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt64SizeNoTag(__i))
        __s
      }
      __timestampsSerializedSizeField
    }
    @transient private[this] var __timestampsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (base.isDefined) {
        val __value = base.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = shardName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = partitionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = dbID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = collectionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      
      {
        val __value = partitionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
        }
      };
      if (int64PrimaryKeys.nonEmpty) {
        val __localsize = int64PrimaryKeysSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (timestamps.nonEmpty) {
        val __localsize = timestampsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = numRows
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, __value)
        }
      };
      if (primaryKeys.isDefined) {
        val __value = primaryKeys.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = segmentId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      base.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = shardName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = partitionName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = dbID
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = collectionID
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      {
        val __v = partitionID
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      if (int64PrimaryKeys.nonEmpty) {
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(int64PrimaryKeysSerializedSize)
        int64PrimaryKeys.foreach(_output__.writeInt64NoTag)
      };
      if (timestamps.nonEmpty) {
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(timestampsSerializedSize)
        timestamps.foreach(_output__.writeUInt64NoTag)
      };
      {
        val __v = numRows
        if (__v != 0L) {
          _output__.writeInt64(11, __v)
        }
      };
      primaryKeys.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = segmentId
        if (__v != 0L) {
          _output__.writeInt64(13, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBase: io.milvus.grpc.common.MsgBase = base.getOrElse(io.milvus.grpc.common.MsgBase.defaultInstance)
    def clearBase: DeleteRequest = copy(base = _root_.scala.None)
    def withBase(__v: io.milvus.grpc.common.MsgBase): DeleteRequest = copy(base = Option(__v))
    def withShardName(__v: _root_.scala.Predef.String): DeleteRequest = copy(shardName = __v)
    def withDbName(__v: _root_.scala.Predef.String): DeleteRequest = copy(dbName = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): DeleteRequest = copy(collectionName = __v)
    def withPartitionName(__v: _root_.scala.Predef.String): DeleteRequest = copy(partitionName = __v)
    def withDbID(__v: _root_.scala.Long): DeleteRequest = copy(dbID = __v)
    def withCollectionID(__v: _root_.scala.Long): DeleteRequest = copy(collectionID = __v)
    def withPartitionID(__v: _root_.scala.Long): DeleteRequest = copy(partitionID = __v)
    def clearInt64PrimaryKeys = copy(int64PrimaryKeys = _root_.scala.Seq.empty)
    def addInt64PrimaryKeys(__vs: _root_.scala.Long *): DeleteRequest = addAllInt64PrimaryKeys(__vs)
    def addAllInt64PrimaryKeys(__vs: Iterable[_root_.scala.Long]): DeleteRequest = copy(int64PrimaryKeys = int64PrimaryKeys ++ __vs)
    def withInt64PrimaryKeys(__v: _root_.scala.Seq[_root_.scala.Long]): DeleteRequest = copy(int64PrimaryKeys = __v)
    def clearTimestamps = copy(timestamps = _root_.scala.Seq.empty)
    def addTimestamps(__vs: _root_.scala.Long *): DeleteRequest = addAllTimestamps(__vs)
    def addAllTimestamps(__vs: Iterable[_root_.scala.Long]): DeleteRequest = copy(timestamps = timestamps ++ __vs)
    def withTimestamps(__v: _root_.scala.Seq[_root_.scala.Long]): DeleteRequest = copy(timestamps = __v)
    def withNumRows(__v: _root_.scala.Long): DeleteRequest = copy(numRows = __v)
    def getPrimaryKeys: io.milvus.grpc.schema.IDs = primaryKeys.getOrElse(io.milvus.grpc.schema.IDs.defaultInstance)
    def clearPrimaryKeys: DeleteRequest = copy(primaryKeys = _root_.scala.None)
    def withPrimaryKeys(__v: io.milvus.grpc.schema.IDs): DeleteRequest = copy(primaryKeys = Option(__v))
    def withSegmentId(__v: _root_.scala.Long): DeleteRequest = copy(segmentId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => base.orNull
        case 2 => {
          val __t = shardName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = partitionName
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = dbID
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = collectionID
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = partitionID
          if (__t != 0L) __t else null
        }
        case 9 => int64PrimaryKeys
        case 10 => timestamps
        case 11 => {
          val __t = numRows
          if (__t != 0L) __t else null
        }
        case 12 => primaryKeys.orNull
        case 13 => {
          val __t = segmentId
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => base.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(shardName)
        case 3 => _root_.scalapb.descriptors.PString(dbName)
        case 4 => _root_.scalapb.descriptors.PString(collectionName)
        case 5 => _root_.scalapb.descriptors.PString(partitionName)
        case 6 => _root_.scalapb.descriptors.PLong(dbID)
        case 7 => _root_.scalapb.descriptors.PLong(collectionID)
        case 8 => _root_.scalapb.descriptors.PLong(partitionID)
        case 9 => _root_.scalapb.descriptors.PRepeated(int64PrimaryKeys.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(timestamps.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 11 => _root_.scalapb.descriptors.PLong(numRows)
        case 12 => primaryKeys.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => _root_.scalapb.descriptors.PLong(segmentId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: DeleteRequest.type = msg.DeleteRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.msg.DeleteRequest])
}

object DeleteRequest extends scalapb.GeneratedMessageCompanion[DeleteRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[DeleteRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): DeleteRequest = {
    var __base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None
    var __shardName: _root_.scala.Predef.String = ""
    var __dbName: _root_.scala.Predef.String = ""
    var __collectionName: _root_.scala.Predef.String = ""
    var __partitionName: _root_.scala.Predef.String = ""
    var __dbID: _root_.scala.Long = 0L
    var __collectionID: _root_.scala.Long = 0L
    var __partitionID: _root_.scala.Long = 0L
    val __int64PrimaryKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __timestamps: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var __numRows: _root_.scala.Long = 0L
    var __primaryKeys: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None
    var __segmentId: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __base = _root_.scala.Option(__base.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __shardName = _input__.readStringRequireUtf8()
        case 26 =>
          __dbName = _input__.readStringRequireUtf8()
        case 34 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 42 =>
          __partitionName = _input__.readStringRequireUtf8()
        case 48 =>
          __dbID = _input__.readInt64()
        case 56 =>
          __collectionID = _input__.readInt64()
        case 64 =>
          __partitionID = _input__.readInt64()
        case 72 =>
          __int64PrimaryKeys += _input__.readInt64()
        case 74 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __int64PrimaryKeys += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 80 =>
          __timestamps += _input__.readUInt64()
        case 82 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __timestamps += _input__.readUInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 88 =>
          __numRows = _input__.readInt64()
        case 98 =>
          __primaryKeys = _root_.scala.Option(__primaryKeys.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.IDs](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 104 =>
          __segmentId = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    DeleteRequest(
        base = __base,
        shardName = __shardName,
        dbName = __dbName,
        collectionName = __collectionName,
        partitionName = __partitionName,
        dbID = __dbID,
        collectionID = __collectionID,
        partitionID = __partitionID,
        int64PrimaryKeys = __int64PrimaryKeys.result(),
        timestamps = __timestamps.result(),
        numRows = __numRows,
        primaryKeys = __primaryKeys,
        segmentId = __segmentId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[DeleteRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      DeleteRequest(
        base = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.MsgBase]]),
        shardName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        partitionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dbID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        partitionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        int64PrimaryKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        timestamps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        numRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        primaryKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.IDs]]),
        segmentId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MsgProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = msg.MsgProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.MsgBase
      case 12 => __out = io.milvus.grpc.schema.IDs
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = DeleteRequest(
    base = _root_.scala.None,
    shardName = "",
    dbName = "",
    collectionName = "",
    partitionName = "",
    dbID = 0L,
    collectionID = 0L,
    partitionID = 0L,
    int64PrimaryKeys = _root_.scala.Seq.empty,
    timestamps = _root_.scala.Seq.empty,
    numRows = 0L,
    primaryKeys = _root_.scala.None,
    segmentId = 0L
  )
  implicit class DeleteRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, DeleteRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, DeleteRequest](_l) {
    def base: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase] = field(_.getBase)((c_, f_) => c_.copy(base = _root_.scala.Option(f_)))
    def optionalBase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.MsgBase]] = field(_.base)((c_, f_) => c_.copy(base = f_))
    def shardName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shardName)((c_, f_) => c_.copy(shardName = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def partitionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.partitionName)((c_, f_) => c_.copy(partitionName = f_))
    def dbID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dbID)((c_, f_) => c_.copy(dbID = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
    def partitionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.partitionID)((c_, f_) => c_.copy(partitionID = f_))
    def int64PrimaryKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.int64PrimaryKeys)((c_, f_) => c_.copy(int64PrimaryKeys = f_))
    def timestamps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.timestamps)((c_, f_) => c_.copy(timestamps = f_))
    def numRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.numRows)((c_, f_) => c_.copy(numRows = f_))
    def primaryKeys: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.IDs] = field(_.getPrimaryKeys)((c_, f_) => c_.copy(primaryKeys = _root_.scala.Option(f_)))
    def optionalPrimaryKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.IDs]] = field(_.primaryKeys)((c_, f_) => c_.copy(primaryKeys = f_))
    def segmentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.segmentId)((c_, f_) => c_.copy(segmentId = f_))
  }
  final val BASE_FIELD_NUMBER = 1
  final val SHARDNAME_FIELD_NUMBER = 2
  final val DB_NAME_FIELD_NUMBER = 3
  final val COLLECTION_NAME_FIELD_NUMBER = 4
  final val PARTITION_NAME_FIELD_NUMBER = 5
  final val DBID_FIELD_NUMBER = 6
  final val COLLECTIONID_FIELD_NUMBER = 7
  final val PARTITIONID_FIELD_NUMBER = 8
  final val INT64_PRIMARY_KEYS_FIELD_NUMBER = 9
  final val TIMESTAMPS_FIELD_NUMBER = 10
  final val NUM_ROWS_FIELD_NUMBER = 11
  final val PRIMARY_KEYS_FIELD_NUMBER = 12
  final val SEGMENT_ID_FIELD_NUMBER = 13
  def of(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase],
    shardName: _root_.scala.Predef.String,
    dbName: _root_.scala.Predef.String,
    collectionName: _root_.scala.Predef.String,
    partitionName: _root_.scala.Predef.String,
    dbID: _root_.scala.Long,
    collectionID: _root_.scala.Long,
    partitionID: _root_.scala.Long,
    int64PrimaryKeys: _root_.scala.Seq[_root_.scala.Long],
    timestamps: _root_.scala.Seq[_root_.scala.Long],
    numRows: _root_.scala.Long,
    primaryKeys: _root_.scala.Option[io.milvus.grpc.schema.IDs],
    segmentId: _root_.scala.Long
  ): DeleteRequest = DeleteRequest(
    base,
    shardName,
    dbName,
    collectionName,
    partitionName,
    dbID,
    collectionID,
    partitionID,
    int64PrimaryKeys,
    timestamps,
    numRows,
    primaryKeys,
    segmentId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.msg.DeleteRequest])
}
