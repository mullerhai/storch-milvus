// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package milvus.proto.msg

import milvus.proto.msg

@SerialVersionUID(0L)
final case class ImportMsg(
                            base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None,
                            dbName: _root_.scala.Predef.String = "",
                            collectionName: _root_.scala.Predef.String = "",
                            collectionID: _root_.scala.Long = 0L,
                            partitionIDs: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
                            options: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
                            files: _root_.scala.Seq[ImportFile] = _root_.scala.Seq.empty,
                            schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema] = _root_.scala.None,
                            jobID: _root_.scala.Long = 0L,
                            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ImportMsg] {
    private[this] def partitionIDsSerializedSize = {
      if (__partitionIDsSerializedSizeField == 0) __partitionIDsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        partitionIDs.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __partitionIDsSerializedSizeField
    }
    @transient private[this] var __partitionIDsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (base.isDefined) {
        val __value = base.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = collectionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      if (partitionIDs.nonEmpty) {
        val __localsize = partitionIDsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      options.foreach { __item =>
        val __value = msg.ImportMsg._typemapper_options.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      files.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (schema.isDefined) {
        val __value = schema.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = jobID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      base.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = collectionID
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      if (partitionIDs.nonEmpty) {
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(partitionIDsSerializedSize)
        partitionIDs.foreach(_output__.writeInt64NoTag)
      };
      options.foreach { __v =>
        val __m = msg.ImportMsg._typemapper_options.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      files.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      schema.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = jobID
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBase: io.milvus.grpc.common.MsgBase = base.getOrElse(io.milvus.grpc.common.MsgBase.defaultInstance)
    def clearBase: ImportMsg = copy(base = _root_.scala.None)
    def withBase(__v: io.milvus.grpc.common.MsgBase): ImportMsg = copy(base = Option(__v))
    def withDbName(__v: _root_.scala.Predef.String): ImportMsg = copy(dbName = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): ImportMsg = copy(collectionName = __v)
    def withCollectionID(__v: _root_.scala.Long): ImportMsg = copy(collectionID = __v)
    def clearPartitionIDs = copy(partitionIDs = _root_.scala.Seq.empty)
    def addPartitionIDs(__vs: _root_.scala.Long *): ImportMsg = addAllPartitionIDs(__vs)
    def addAllPartitionIDs(__vs: Iterable[_root_.scala.Long]): ImportMsg = copy(partitionIDs = partitionIDs ++ __vs)
    def withPartitionIDs(__v: _root_.scala.Seq[_root_.scala.Long]): ImportMsg = copy(partitionIDs = __v)
    def clearOptions = copy(options = _root_.scala.collection.immutable.Map.empty)
    def addOptions(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): ImportMsg = addAllOptions(__vs)
    def addAllOptions(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): ImportMsg = copy(options = options ++ __vs)
    def withOptions(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): ImportMsg = copy(options = __v)
    def clearFiles = copy(files = _root_.scala.Seq.empty)
    def addFiles(__vs: ImportFile *): ImportMsg = addAllFiles(__vs)
    def addAllFiles(__vs: Iterable[ImportFile]): ImportMsg = copy(files = files ++ __vs)
    def withFiles(__v: _root_.scala.Seq[ImportFile]): ImportMsg = copy(files = __v)
    def getSchema: io.milvus.grpc.schema.CollectionSchema = schema.getOrElse(io.milvus.grpc.schema.CollectionSchema.defaultInstance)
    def clearSchema: ImportMsg = copy(schema = _root_.scala.None)
    def withSchema(__v: io.milvus.grpc.schema.CollectionSchema): ImportMsg = copy(schema = Option(__v))
    def withJobID(__v: _root_.scala.Long): ImportMsg = copy(jobID = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => base.orNull
        case 2 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = collectionID
          if (__t != 0L) __t else null
        }
        case 5 => partitionIDs
        case 6 => options.iterator.map(msg.ImportMsg._typemapper_options.toBase(_)).toSeq
        case 7 => files
        case 8 => schema.orNull
        case 9 => {
          val __t = jobID
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => base.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(dbName)
        case 3 => _root_.scalapb.descriptors.PString(collectionName)
        case 4 => _root_.scalapb.descriptors.PLong(collectionID)
        case 5 => _root_.scalapb.descriptors.PRepeated(partitionIDs.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(options.iterator.map(msg.ImportMsg._typemapper_options.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(files.iterator.map(_.toPMessage).toVector)
        case 8 => schema.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PLong(jobID)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ImportMsg.type = msg.ImportMsg
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.msg.ImportMsg])
}

object ImportMsg extends scalapb.GeneratedMessageCompanion[ImportMsg] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ImportMsg] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ImportMsg = {
    var __base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None
    var __dbName: _root_.scala.Predef.String = ""
    var __collectionName: _root_.scala.Predef.String = ""
    var __collectionID: _root_.scala.Long = 0L
    val __partitionIDs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __options: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    val __files: _root_.scala.collection.immutable.VectorBuilder[ImportFile] = new _root_.scala.collection.immutable.VectorBuilder[ImportFile]
    var __schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema] = _root_.scala.None
    var __jobID: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __base = _root_.scala.Option(__base.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __dbName = _input__.readStringRequireUtf8()
        case 26 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 32 =>
          __collectionID = _input__.readInt64()
        case 40 =>
          __partitionIDs += _input__.readInt64()
        case 42 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __partitionIDs += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 50 =>
          __options += msg.ImportMsg._typemapper_options.toCustom(_root_.scalapb.LiteParser.readMessage[ImportMsg.OptionsEntry](_input__))
        case 58 =>
          __files += _root_.scalapb.LiteParser.readMessage[ImportFile](_input__)
        case 66 =>
          __schema = _root_.scala.Option(__schema.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.CollectionSchema](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 72 =>
          __jobID = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ImportMsg(
        base = __base,
        dbName = __dbName,
        collectionName = __collectionName,
        collectionID = __collectionID,
        partitionIDs = __partitionIDs.result(),
        options = __options.result(),
        files = __files.result(),
        schema = __schema,
        jobID = __jobID,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ImportMsg] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ImportMsg(
        base = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.MsgBase]]),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        partitionIDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[ImportMsg.OptionsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(msg.ImportMsg._typemapper_options.toCustom(_)).toMap,
        files = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[ImportFile]]).getOrElse(_root_.scala.Seq.empty),
        schema = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.CollectionSchema]]),
        jobID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MsgProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = msg.MsgProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.MsgBase
      case 6 => __out = msg.ImportMsg.OptionsEntry
      case 7 => __out = msg.ImportFile
      case 8 => __out = io.milvus.grpc.schema.CollectionSchema
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      msg.ImportMsg.OptionsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ImportMsg(
    base = _root_.scala.None,
    dbName = "",
    collectionName = "",
    collectionID = 0L,
    partitionIDs = _root_.scala.Seq.empty,
    options = _root_.scala.collection.immutable.Map.empty,
    files = _root_.scala.Seq.empty,
    schema = _root_.scala.None,
    jobID = 0L
  )
  @SerialVersionUID(0L)
  final case class OptionsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OptionsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): OptionsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): OptionsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: ImportMsg.OptionsEntry.type = msg.ImportMsg.OptionsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.msg.ImportMsg.OptionsEntry])
  }
  
  object OptionsEntry extends scalapb.GeneratedMessageCompanion[ImportMsg.OptionsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ImportMsg.OptionsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ImportMsg.OptionsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      msg.ImportMsg.OptionsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[ImportMsg.OptionsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        msg.ImportMsg.OptionsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = msg.ImportMsg.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = msg.ImportMsg.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = msg.ImportMsg.OptionsEntry(
      key = "",
      value = ""
    )
    implicit class OptionsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ImportMsg.OptionsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ImportMsg.OptionsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[ImportMsg.OptionsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[ImportMsg.OptionsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => msg.ImportMsg.OptionsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): ImportMsg.OptionsEntry = msg.ImportMsg.OptionsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.msg.ImportMsg.OptionsEntry])
  }
  
  implicit class ImportMsgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ImportMsg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ImportMsg](_l) {
    def base: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase] = field(_.getBase)((c_, f_) => c_.copy(base = _root_.scala.Option(f_)))
    def optionalBase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.MsgBase]] = field(_.base)((c_, f_) => c_.copy(base = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
    def partitionIDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.partitionIDs)((c_, f_) => c_.copy(partitionIDs = f_))
    def options: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    def files: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ImportFile]] = field(_.files)((c_, f_) => c_.copy(files = f_))
    def schema: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.CollectionSchema] = field(_.getSchema)((c_, f_) => c_.copy(schema = _root_.scala.Option(f_)))
    def optionalSchema: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema]] = field(_.schema)((c_, f_) => c_.copy(schema = f_))
    def jobID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.jobID)((c_, f_) => c_.copy(jobID = f_))
  }
  final val BASE_FIELD_NUMBER = 1
  final val DB_NAME_FIELD_NUMBER = 2
  final val COLLECTION_NAME_FIELD_NUMBER = 3
  final val COLLECTIONID_FIELD_NUMBER = 4
  final val PARTITIONIDS_FIELD_NUMBER = 5
  final val OPTIONS_FIELD_NUMBER = 6
  final val FILES_FIELD_NUMBER = 7
  final val SCHEMA_FIELD_NUMBER = 8
  final val JOBID_FIELD_NUMBER = 9
  @transient
  private[msg] val _typemapper_options: _root_.scalapb.TypeMapper[ImportMsg.OptionsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[ImportMsg.OptionsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
          base: _root_.scala.Option[io.milvus.grpc.common.MsgBase],
          dbName: _root_.scala.Predef.String,
          collectionName: _root_.scala.Predef.String,
          collectionID: _root_.scala.Long,
          partitionIDs: _root_.scala.Seq[_root_.scala.Long],
          options: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
          files: _root_.scala.Seq[ImportFile],
          schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema],
          jobID: _root_.scala.Long
  ): ImportMsg = ImportMsg(
    base,
    dbName,
    collectionName,
    collectionID,
    partitionIDs,
    options,
    files,
    schema,
    jobID
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.msg.ImportMsg])
}
