// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

/** *
  * &#64;brief Collection schema
  *
  * @param autoID
  *   deprecated later, keep compatible with c++ part now
  * @param enableDynamicField
  *   mark whether this table has the dynamic field function enabled.
  */
@SerialVersionUID(0L)
final case class CollectionSchema(
    name: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    @scala.deprecated(message="Marked as deprecated in proto file", "") autoID: _root_.scala.Boolean = false,
    fields: _root_.scala.Seq[io.milvus.grpc.schema.FieldSchema] = _root_.scala.Seq.empty,
    enableDynamicField: _root_.scala.Boolean = false,
    properties: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair] = _root_.scala.Seq.empty,
    functions: _root_.scala.Seq[io.milvus.grpc.schema.FunctionSchema] = _root_.scala.Seq.empty,
    dbName: _root_.scala.Predef.String = "",
    structArrayFields: _root_.scala.Seq[io.milvus.grpc.schema.StructArrayFieldSchema] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CollectionSchema] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = autoID
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      fields.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = enableDynamicField
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      properties.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      functions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      structArrayFields.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = autoID
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      fields.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = enableDynamicField
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      properties.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      functions.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      structArrayFields.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): CollectionSchema = copy(name = __v)
    def withDescription(__v: _root_.scala.Predef.String): CollectionSchema = copy(description = __v)
    def withAutoID(__v: _root_.scala.Boolean): CollectionSchema = copy(autoID = __v)
    def clearFields = copy(fields = _root_.scala.Seq.empty)
    def addFields(__vs: io.milvus.grpc.schema.FieldSchema *): CollectionSchema = addAllFields(__vs)
    def addAllFields(__vs: Iterable[io.milvus.grpc.schema.FieldSchema]): CollectionSchema = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.Seq[io.milvus.grpc.schema.FieldSchema]): CollectionSchema = copy(fields = __v)
    def withEnableDynamicField(__v: _root_.scala.Boolean): CollectionSchema = copy(enableDynamicField = __v)
    def clearProperties = copy(properties = _root_.scala.Seq.empty)
    def addProperties(__vs: io.milvus.grpc.common.KeyValuePair *): CollectionSchema = addAllProperties(__vs)
    def addAllProperties(__vs: Iterable[io.milvus.grpc.common.KeyValuePair]): CollectionSchema = copy(properties = properties ++ __vs)
    def withProperties(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]): CollectionSchema = copy(properties = __v)
    def clearFunctions = copy(functions = _root_.scala.Seq.empty)
    def addFunctions(__vs: io.milvus.grpc.schema.FunctionSchema *): CollectionSchema = addAllFunctions(__vs)
    def addAllFunctions(__vs: Iterable[io.milvus.grpc.schema.FunctionSchema]): CollectionSchema = copy(functions = functions ++ __vs)
    def withFunctions(__v: _root_.scala.Seq[io.milvus.grpc.schema.FunctionSchema]): CollectionSchema = copy(functions = __v)
    def withDbName(__v: _root_.scala.Predef.String): CollectionSchema = copy(dbName = __v)
    def clearStructArrayFields = copy(structArrayFields = _root_.scala.Seq.empty)
    def addStructArrayFields(__vs: io.milvus.grpc.schema.StructArrayFieldSchema *): CollectionSchema = addAllStructArrayFields(__vs)
    def addAllStructArrayFields(__vs: Iterable[io.milvus.grpc.schema.StructArrayFieldSchema]): CollectionSchema = copy(structArrayFields = structArrayFields ++ __vs)
    def withStructArrayFields(__v: _root_.scala.Seq[io.milvus.grpc.schema.StructArrayFieldSchema]): CollectionSchema = copy(structArrayFields = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = autoID
          if (__t != false) __t else null
        }
        case 4 => fields
        case 5 => {
          val __t = enableDynamicField
          if (__t != false) __t else null
        }
        case 6 => properties
        case 7 => functions
        case 8 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 9 => structArrayFields
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(description)
        case 3 => _root_.scalapb.descriptors.PBoolean(autoID)
        case 4 => _root_.scalapb.descriptors.PRepeated(fields.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PBoolean(enableDynamicField)
        case 6 => _root_.scalapb.descriptors.PRepeated(properties.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(functions.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PString(dbName)
        case 9 => _root_.scalapb.descriptors.PRepeated(structArrayFields.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.CollectionSchema.type = io.milvus.grpc.schema.CollectionSchema
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.CollectionSchema])
}

object CollectionSchema extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.CollectionSchema] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.CollectionSchema] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.CollectionSchema = {
    var __name: _root_.scala.Predef.String = ""
    var __description: _root_.scala.Predef.String = ""
    var __autoID: _root_.scala.Boolean = false
    val __fields: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldSchema] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldSchema]
    var __enableDynamicField: _root_.scala.Boolean = false
    val __properties: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair]
    val __functions: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FunctionSchema] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FunctionSchema]
    var __dbName: _root_.scala.Predef.String = ""
    val __structArrayFields: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.StructArrayFieldSchema] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.StructArrayFieldSchema]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __description = _input__.readStringRequireUtf8()
        case 24 =>
          __autoID = _input__.readBool()
        case 34 =>
          __fields += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldSchema](_input__)
        case 40 =>
          __enableDynamicField = _input__.readBool()
        case 50 =>
          __properties += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyValuePair](_input__)
        case 58 =>
          __functions += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FunctionSchema](_input__)
        case 66 =>
          __dbName = _input__.readStringRequireUtf8()
        case 74 =>
          __structArrayFields += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.StructArrayFieldSchema](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.CollectionSchema(
        name = __name,
        description = __description,
        autoID = __autoID,
        fields = __fields.result(),
        enableDynamicField = __enableDynamicField,
        properties = __properties.result(),
        functions = __functions.result(),
        dbName = __dbName,
        structArrayFields = __structArrayFields.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.CollectionSchema] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.CollectionSchema(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        autoID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        fields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FieldSchema]]).getOrElse(_root_.scala.Seq.empty),
        enableDynamicField = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        properties = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]]).getOrElse(_root_.scala.Seq.empty),
        functions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FunctionSchema]]).getOrElse(_root_.scala.Seq.empty),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        structArrayFields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.StructArrayFieldSchema]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.milvus.grpc.schema.FieldSchema
      case 6 => __out = io.milvus.grpc.common.KeyValuePair
      case 7 => __out = io.milvus.grpc.schema.FunctionSchema
      case 9 => __out = io.milvus.grpc.schema.StructArrayFieldSchema
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.CollectionSchema(
    name = "",
    description = "",
    autoID = false,
    fields = _root_.scala.Seq.empty,
    enableDynamicField = false,
    properties = _root_.scala.Seq.empty,
    functions = _root_.scala.Seq.empty,
    dbName = "",
    structArrayFields = _root_.scala.Seq.empty
  )
  implicit class CollectionSchemaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.CollectionSchema]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.CollectionSchema](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def autoID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.autoID)((c_, f_) => c_.copy(autoID = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FieldSchema]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def enableDynamicField: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.enableDynamicField)((c_, f_) => c_.copy(enableDynamicField = f_))
    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
    def functions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FunctionSchema]] = field(_.functions)((c_, f_) => c_.copy(functions = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def structArrayFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.StructArrayFieldSchema]] = field(_.structArrayFields)((c_, f_) => c_.copy(structArrayFields = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val DESCRIPTION_FIELD_NUMBER = 2
  final val AUTOID_FIELD_NUMBER = 3
  final val FIELDS_FIELD_NUMBER = 4
  final val ENABLE_DYNAMIC_FIELD_FIELD_NUMBER = 5
  final val PROPERTIES_FIELD_NUMBER = 6
  final val FUNCTIONS_FIELD_NUMBER = 7
  final val DBNAME_FIELD_NUMBER = 8
  final val STRUCT_ARRAY_FIELDS_FIELD_NUMBER = 9
  def of(
    name: _root_.scala.Predef.String,
    description: _root_.scala.Predef.String,
    autoID: _root_.scala.Boolean,
    fields: _root_.scala.Seq[io.milvus.grpc.schema.FieldSchema],
    enableDynamicField: _root_.scala.Boolean,
    properties: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair],
    functions: _root_.scala.Seq[io.milvus.grpc.schema.FunctionSchema],
    dbName: _root_.scala.Predef.String,
    structArrayFields: _root_.scala.Seq[io.milvus.grpc.schema.StructArrayFieldSchema]
  ): _root_.io.milvus.grpc.schema.CollectionSchema = _root_.io.milvus.grpc.schema.CollectionSchema(
    name,
    description,
    autoID,
    fields,
    enableDynamicField,
    properties,
    functions,
    dbName,
    structArrayFields
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.CollectionSchema])
}
