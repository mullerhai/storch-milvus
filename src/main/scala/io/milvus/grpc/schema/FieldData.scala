// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class FieldData(
    `type`: io.milvus.grpc.schema.DataType = io.milvus.grpc.schema.DataType.None,
    fieldName: _root_.scala.Predef.String = "",
    field: io.milvus.grpc.schema.FieldData.Field = io.milvus.grpc.schema.FieldData.Field.Empty,
    fieldId: _root_.scala.Long = 0L,
    isDynamic: _root_.scala.Boolean = false,
    validData: _root_.scala.Seq[_root_.scala.Boolean] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FieldData] {
    private[this] def validDataSerializedSize = {
      1 * validData.size
    }
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = fieldName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (field.scalars.isDefined) {
        val __value = field.scalars.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (field.vectors.isDefined) {
        val __value = field.vectors.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (field.structArrays.isDefined) {
        val __value = field.structArrays.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = fieldId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = isDynamic
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      if (validData.nonEmpty) {
        val __localsize = validDataSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = `type`.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = fieldName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      field.scalars.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      field.vectors.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = fieldId
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = isDynamic
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      if (validData.nonEmpty) {
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(validDataSerializedSize)
        validData.foreach(_output__.writeBoolNoTag)
      };
      field.structArrays.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withType(__v: io.milvus.grpc.schema.DataType): FieldData = copy(`type` = __v)
    def withFieldName(__v: _root_.scala.Predef.String): FieldData = copy(fieldName = __v)
    def getScalars: io.milvus.grpc.schema.ScalarField = field.scalars.getOrElse(io.milvus.grpc.schema.ScalarField.defaultInstance)
    def withScalars(__v: io.milvus.grpc.schema.ScalarField): FieldData = copy(field = io.milvus.grpc.schema.FieldData.Field.Scalars(__v))
    def getVectors: io.milvus.grpc.schema.VectorField = field.vectors.getOrElse(io.milvus.grpc.schema.VectorField.defaultInstance)
    def withVectors(__v: io.milvus.grpc.schema.VectorField): FieldData = copy(field = io.milvus.grpc.schema.FieldData.Field.Vectors(__v))
    def getStructArrays: io.milvus.grpc.schema.StructArrayField = field.structArrays.getOrElse(io.milvus.grpc.schema.StructArrayField.defaultInstance)
    def withStructArrays(__v: io.milvus.grpc.schema.StructArrayField): FieldData = copy(field = io.milvus.grpc.schema.FieldData.Field.StructArrays(__v))
    def withFieldId(__v: _root_.scala.Long): FieldData = copy(fieldId = __v)
    def withIsDynamic(__v: _root_.scala.Boolean): FieldData = copy(isDynamic = __v)
    def clearValidData = copy(validData = _root_.scala.Seq.empty)
    def addValidData(__vs: _root_.scala.Boolean *): FieldData = addAllValidData(__vs)
    def addAllValidData(__vs: Iterable[_root_.scala.Boolean]): FieldData = copy(validData = validData ++ __vs)
    def withValidData(__v: _root_.scala.Seq[_root_.scala.Boolean]): FieldData = copy(validData = __v)
    def clearField: FieldData = copy(field = io.milvus.grpc.schema.FieldData.Field.Empty)
    def withField(__v: io.milvus.grpc.schema.FieldData.Field): FieldData = copy(field = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = fieldName
          if (__t != "") __t else null
        }
        case 3 => field.scalars.orNull
        case 4 => field.vectors.orNull
        case 8 => field.structArrays.orNull
        case 5 => {
          val __t = fieldId
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = isDynamic
          if (__t != false) __t else null
        }
        case 7 => validData
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(fieldName)
        case 3 => field.scalars.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => field.vectors.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => field.structArrays.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PLong(fieldId)
        case 6 => _root_.scalapb.descriptors.PBoolean(isDynamic)
        case 7 => _root_.scalapb.descriptors.PRepeated(validData.iterator.map(_root_.scalapb.descriptors.PBoolean(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.FieldData.type = io.milvus.grpc.schema.FieldData
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.FieldData])
}

object FieldData extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.FieldData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.FieldData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.FieldData = {
    var __type: io.milvus.grpc.schema.DataType = io.milvus.grpc.schema.DataType.None
    var __fieldName: _root_.scala.Predef.String = ""
    var __fieldId: _root_.scala.Long = 0L
    var __isDynamic: _root_.scala.Boolean = false
    val __validData: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean]
    var __field: io.milvus.grpc.schema.FieldData.Field = io.milvus.grpc.schema.FieldData.Field.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __type = io.milvus.grpc.schema.DataType.fromValue(_input__.readEnum())
        case 18 =>
          __fieldName = _input__.readStringRequireUtf8()
        case 26 =>
          __field = io.milvus.grpc.schema.FieldData.Field.Scalars(__field.scalars.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.ScalarField](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __field = io.milvus.grpc.schema.FieldData.Field.Vectors(__field.vectors.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.VectorField](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __field = io.milvus.grpc.schema.FieldData.Field.StructArrays(__field.structArrays.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.StructArrayField](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 40 =>
          __fieldId = _input__.readInt64()
        case 48 =>
          __isDynamic = _input__.readBool()
        case 56 =>
          __validData += _input__.readBool()
        case 58 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __validData += _input__.readBool()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.FieldData(
        `type` = __type,
        fieldName = __fieldName,
        fieldId = __fieldId,
        isDynamic = __isDynamic,
        validData = __validData.result(),
        field = __field,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.FieldData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.FieldData(
        `type` = io.milvus.grpc.schema.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.schema.DataType.None.scalaValueDescriptor).number),
        fieldName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fieldId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        isDynamic = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        validData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Boolean]]).getOrElse(_root_.scala.Seq.empty),
        field = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.ScalarField]]).map(io.milvus.grpc.schema.FieldData.Field.Scalars(_))
            .orElse[io.milvus.grpc.schema.FieldData.Field](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.VectorField]]).map(io.milvus.grpc.schema.FieldData.Field.Vectors(_)))
            .orElse[io.milvus.grpc.schema.FieldData.Field](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.StructArrayField]]).map(io.milvus.grpc.schema.FieldData.Field.StructArrays(_)))
            .getOrElse(io.milvus.grpc.schema.FieldData.Field.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.milvus.grpc.schema.ScalarField
      case 4 => __out = io.milvus.grpc.schema.VectorField
      case 8 => __out = io.milvus.grpc.schema.StructArrayField
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => io.milvus.grpc.schema.DataType
    }
  }
  lazy val defaultInstance = io.milvus.grpc.schema.FieldData(
    `type` = io.milvus.grpc.schema.DataType.None,
    fieldName = "",
    fieldId = 0L,
    isDynamic = false,
    validData = _root_.scala.Seq.empty,
    field = io.milvus.grpc.schema.FieldData.Field.Empty
  )
  sealed abstract class Field extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isScalars: _root_.scala.Boolean = false
    def isVectors: _root_.scala.Boolean = false
    def isStructArrays: _root_.scala.Boolean = false
    def scalars: _root_.scala.Option[io.milvus.grpc.schema.ScalarField] = _root_.scala.None
    def vectors: _root_.scala.Option[io.milvus.grpc.schema.VectorField] = _root_.scala.None
    def structArrays: _root_.scala.Option[io.milvus.grpc.schema.StructArrayField] = _root_.scala.None
  }
  object Field {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.schema.FieldData.Field {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Scalars(value: io.milvus.grpc.schema.ScalarField) extends io.milvus.grpc.schema.FieldData.Field {
      type ValueType = io.milvus.grpc.schema.ScalarField
      override def isScalars: _root_.scala.Boolean = true
      override def scalars: _root_.scala.Option[io.milvus.grpc.schema.ScalarField] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Vectors(value: io.milvus.grpc.schema.VectorField) extends io.milvus.grpc.schema.FieldData.Field {
      type ValueType = io.milvus.grpc.schema.VectorField
      override def isVectors: _root_.scala.Boolean = true
      override def vectors: _root_.scala.Option[io.milvus.grpc.schema.VectorField] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class StructArrays(value: io.milvus.grpc.schema.StructArrayField) extends io.milvus.grpc.schema.FieldData.Field {
      type ValueType = io.milvus.grpc.schema.StructArrayField
      override def isStructArrays: _root_.scala.Boolean = true
      override def structArrays: _root_.scala.Option[io.milvus.grpc.schema.StructArrayField] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class FieldDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FieldData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.FieldData](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.DataType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def fieldName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fieldName)((c_, f_) => c_.copy(fieldName = f_))
    def scalars: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.ScalarField] = field(_.getScalars)((c_, f_) => c_.copy(field = io.milvus.grpc.schema.FieldData.Field.Scalars(f_)))
    def vectors: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.VectorField] = field(_.getVectors)((c_, f_) => c_.copy(field = io.milvus.grpc.schema.FieldData.Field.Vectors(f_)))
    def structArrays: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.StructArrayField] = field(_.getStructArrays)((c_, f_) => c_.copy(field = io.milvus.grpc.schema.FieldData.Field.StructArrays(f_)))
    def fieldId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.fieldId)((c_, f_) => c_.copy(fieldId = f_))
    def isDynamic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isDynamic)((c_, f_) => c_.copy(isDynamic = f_))
    def validData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Boolean]] = field(_.validData)((c_, f_) => c_.copy(validData = f_))
    def field: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FieldData.Field] = field(_.field)((c_, f_) => c_.copy(field = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val FIELD_NAME_FIELD_NUMBER = 2
  final val SCALARS_FIELD_NUMBER = 3
  final val VECTORS_FIELD_NUMBER = 4
  final val STRUCT_ARRAYS_FIELD_NUMBER = 8
  final val FIELD_ID_FIELD_NUMBER = 5
  final val IS_DYNAMIC_FIELD_NUMBER = 6
  final val VALID_DATA_FIELD_NUMBER = 7
  def of(
    `type`: io.milvus.grpc.schema.DataType,
    fieldName: _root_.scala.Predef.String,
    field: io.milvus.grpc.schema.FieldData.Field,
    fieldId: _root_.scala.Long,
    isDynamic: _root_.scala.Boolean,
    validData: _root_.scala.Seq[_root_.scala.Boolean]
  ): _root_.io.milvus.grpc.schema.FieldData = _root_.io.milvus.grpc.schema.FieldData(
    `type`,
    fieldName,
    field,
    fieldId,
    isDynamic,
    validData
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.FieldData])
}
