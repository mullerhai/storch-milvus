// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class FunctionSchema(
    name: _root_.scala.Predef.String = "",
    id: _root_.scala.Long = 0L,
    description: _root_.scala.Predef.String = "",
    `type`: io.milvus.grpc.schema.FunctionType = io.milvus.grpc.schema.FunctionType.Unknown,
    inputFieldNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    inputFieldIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    outputFieldNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    outputFieldIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    params: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FunctionSchema] {
    private[this] def inputFieldIdsSerializedSize = {
      if (__inputFieldIdsSerializedSizeField == 0) __inputFieldIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        inputFieldIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __inputFieldIdsSerializedSizeField
    }
    @transient private[this] var __inputFieldIdsSerializedSizeField: _root_.scala.Int = 0
    private[this] def outputFieldIdsSerializedSize = {
      if (__outputFieldIdsSerializedSizeField == 0) __outputFieldIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        outputFieldIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __outputFieldIdsSerializedSizeField
    }
    @transient private[this] var __outputFieldIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = id
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = `type`.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      inputFieldNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      if (inputFieldIds.nonEmpty) {
        val __localsize = inputFieldIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      outputFieldNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      if (outputFieldIds.nonEmpty) {
        val __localsize = outputFieldIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      params.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = `type`.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      inputFieldNames.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      if (inputFieldIds.nonEmpty) {
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(inputFieldIdsSerializedSize)
        inputFieldIds.foreach(_output__.writeInt64NoTag)
      };
      outputFieldNames.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      if (outputFieldIds.nonEmpty) {
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(outputFieldIdsSerializedSize)
        outputFieldIds.foreach(_output__.writeInt64NoTag)
      };
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): FunctionSchema = copy(name = __v)
    def withId(__v: _root_.scala.Long): FunctionSchema = copy(id = __v)
    def withDescription(__v: _root_.scala.Predef.String): FunctionSchema = copy(description = __v)
    def withType(__v: io.milvus.grpc.schema.FunctionType): FunctionSchema = copy(`type` = __v)
    def clearInputFieldNames = copy(inputFieldNames = _root_.scala.Seq.empty)
    def addInputFieldNames(__vs: _root_.scala.Predef.String *): FunctionSchema = addAllInputFieldNames(__vs)
    def addAllInputFieldNames(__vs: Iterable[_root_.scala.Predef.String]): FunctionSchema = copy(inputFieldNames = inputFieldNames ++ __vs)
    def withInputFieldNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): FunctionSchema = copy(inputFieldNames = __v)
    def clearInputFieldIds = copy(inputFieldIds = _root_.scala.Seq.empty)
    def addInputFieldIds(__vs: _root_.scala.Long *): FunctionSchema = addAllInputFieldIds(__vs)
    def addAllInputFieldIds(__vs: Iterable[_root_.scala.Long]): FunctionSchema = copy(inputFieldIds = inputFieldIds ++ __vs)
    def withInputFieldIds(__v: _root_.scala.Seq[_root_.scala.Long]): FunctionSchema = copy(inputFieldIds = __v)
    def clearOutputFieldNames = copy(outputFieldNames = _root_.scala.Seq.empty)
    def addOutputFieldNames(__vs: _root_.scala.Predef.String *): FunctionSchema = addAllOutputFieldNames(__vs)
    def addAllOutputFieldNames(__vs: Iterable[_root_.scala.Predef.String]): FunctionSchema = copy(outputFieldNames = outputFieldNames ++ __vs)
    def withOutputFieldNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): FunctionSchema = copy(outputFieldNames = __v)
    def clearOutputFieldIds = copy(outputFieldIds = _root_.scala.Seq.empty)
    def addOutputFieldIds(__vs: _root_.scala.Long *): FunctionSchema = addAllOutputFieldIds(__vs)
    def addAllOutputFieldIds(__vs: Iterable[_root_.scala.Long]): FunctionSchema = copy(outputFieldIds = outputFieldIds ++ __vs)
    def withOutputFieldIds(__v: _root_.scala.Seq[_root_.scala.Long]): FunctionSchema = copy(outputFieldIds = __v)
    def clearParams = copy(params = _root_.scala.Seq.empty)
    def addParams(__vs: io.milvus.grpc.common.KeyValuePair *): FunctionSchema = addAllParams(__vs)
    def addAllParams(__vs: Iterable[io.milvus.grpc.common.KeyValuePair]): FunctionSchema = copy(params = params ++ __vs)
    def withParams(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]): FunctionSchema = copy(params = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => inputFieldNames
        case 6 => inputFieldIds
        case 7 => outputFieldNames
        case 8 => outputFieldIds
        case 9 => params
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PLong(id)
        case 3 => _root_.scalapb.descriptors.PString(description)
        case 4 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 5 => _root_.scalapb.descriptors.PRepeated(inputFieldNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(inputFieldIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(outputFieldNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(outputFieldIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(params.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.FunctionSchema.type = io.milvus.grpc.schema.FunctionSchema
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.FunctionSchema])
}

object FunctionSchema extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.FunctionSchema] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.FunctionSchema] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.FunctionSchema = {
    var __name: _root_.scala.Predef.String = ""
    var __id: _root_.scala.Long = 0L
    var __description: _root_.scala.Predef.String = ""
    var __type: io.milvus.grpc.schema.FunctionType = io.milvus.grpc.schema.FunctionType.Unknown
    val __inputFieldNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __inputFieldIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __outputFieldNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __outputFieldIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __params: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 16 =>
          __id = _input__.readInt64()
        case 26 =>
          __description = _input__.readStringRequireUtf8()
        case 32 =>
          __type = io.milvus.grpc.schema.FunctionType.fromValue(_input__.readEnum())
        case 42 =>
          __inputFieldNames += _input__.readStringRequireUtf8()
        case 48 =>
          __inputFieldIds += _input__.readInt64()
        case 50 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __inputFieldIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 58 =>
          __outputFieldNames += _input__.readStringRequireUtf8()
        case 64 =>
          __outputFieldIds += _input__.readInt64()
        case 66 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __outputFieldIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 74 =>
          __params += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyValuePair](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.FunctionSchema(
        name = __name,
        id = __id,
        description = __description,
        `type` = __type,
        inputFieldNames = __inputFieldNames.result(),
        inputFieldIds = __inputFieldIds.result(),
        outputFieldNames = __outputFieldNames.result(),
        outputFieldIds = __outputFieldIds.result(),
        params = __params.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.FunctionSchema] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.FunctionSchema(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        `type` = io.milvus.grpc.schema.FunctionType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.schema.FunctionType.Unknown.scalaValueDescriptor).number),
        inputFieldNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        inputFieldIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        outputFieldNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        outputFieldIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = io.milvus.grpc.common.KeyValuePair
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => io.milvus.grpc.schema.FunctionType
    }
  }
  lazy val defaultInstance = io.milvus.grpc.schema.FunctionSchema(
    name = "",
    id = 0L,
    description = "",
    `type` = io.milvus.grpc.schema.FunctionType.Unknown,
    inputFieldNames = _root_.scala.Seq.empty,
    inputFieldIds = _root_.scala.Seq.empty,
    outputFieldNames = _root_.scala.Seq.empty,
    outputFieldIds = _root_.scala.Seq.empty,
    params = _root_.scala.Seq.empty
  )
  implicit class FunctionSchemaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FunctionSchema]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.FunctionSchema](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FunctionType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def inputFieldNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.inputFieldNames)((c_, f_) => c_.copy(inputFieldNames = f_))
    def inputFieldIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.inputFieldIds)((c_, f_) => c_.copy(inputFieldIds = f_))
    def outputFieldNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.outputFieldNames)((c_, f_) => c_.copy(outputFieldNames = f_))
    def outputFieldIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.outputFieldIds)((c_, f_) => c_.copy(outputFieldIds = f_))
    def params: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]] = field(_.params)((c_, f_) => c_.copy(params = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val DESCRIPTION_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val INPUT_FIELD_NAMES_FIELD_NUMBER = 5
  final val INPUT_FIELD_IDS_FIELD_NUMBER = 6
  final val OUTPUT_FIELD_NAMES_FIELD_NUMBER = 7
  final val OUTPUT_FIELD_IDS_FIELD_NUMBER = 8
  final val PARAMS_FIELD_NUMBER = 9
  def of(
    name: _root_.scala.Predef.String,
    id: _root_.scala.Long,
    description: _root_.scala.Predef.String,
    `type`: io.milvus.grpc.schema.FunctionType,
    inputFieldNames: _root_.scala.Seq[_root_.scala.Predef.String],
    inputFieldIds: _root_.scala.Seq[_root_.scala.Long],
    outputFieldNames: _root_.scala.Seq[_root_.scala.Predef.String],
    outputFieldIds: _root_.scala.Seq[_root_.scala.Long],
    params: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]
  ): _root_.io.milvus.grpc.schema.FunctionSchema = _root_.io.milvus.grpc.schema.FunctionSchema(
    name,
    id,
    description,
    `type`,
    inputFieldNames,
    inputFieldIds,
    outputFieldNames,
    outputFieldIds,
    params
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.FunctionSchema])
}
