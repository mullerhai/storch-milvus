// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

/** *
  * &#64;brief Field data type
  */
sealed abstract class DataType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = io.milvus.grpc.schema.DataType
  type RecognizedType = io.milvus.grpc.schema.DataType.Recognized
  def isNone: _root_.scala.Boolean = false
  def isBool: _root_.scala.Boolean = false
  def isInt8: _root_.scala.Boolean = false
  def isInt16: _root_.scala.Boolean = false
  def isInt32: _root_.scala.Boolean = false
  def isInt64: _root_.scala.Boolean = false
  def isFloat: _root_.scala.Boolean = false
  def isDouble: _root_.scala.Boolean = false
  def isString: _root_.scala.Boolean = false
  def isVarChar: _root_.scala.Boolean = false
  def isArray: _root_.scala.Boolean = false
  def isJson: _root_.scala.Boolean = false
  def isGeometry: _root_.scala.Boolean = false
  def isText: _root_.scala.Boolean = false
  def isBinaryVector: _root_.scala.Boolean = false
  def isFloatVector: _root_.scala.Boolean = false
  def isFloat16Vector: _root_.scala.Boolean = false
  def isBfloat16Vector: _root_.scala.Boolean = false
  def isSparseFloatVector: _root_.scala.Boolean = false
  def isInt8Vector: _root_.scala.Boolean = false
  def isArrayOfVector: _root_.scala.Boolean = false
  def isArrayOfStruct: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[DataType] = io.milvus.grpc.schema.DataType
  final def asRecognized: _root_.scala.Option[io.milvus.grpc.schema.DataType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.milvus.grpc.schema.DataType.Recognized])
}

object DataType extends _root_.scalapb.GeneratedEnumCompanion[DataType] {
  sealed trait Recognized extends DataType
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DataType] = this
  
  @SerialVersionUID(0L)
  case object None extends DataType(0) with DataType.Recognized {
    val index = 0
    val name = "None"
    override def isNone: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Bool extends DataType(1) with DataType.Recognized {
    val index = 1
    val name = "Bool"
    override def isBool: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Int8 extends DataType(2) with DataType.Recognized {
    val index = 2
    val name = "Int8"
    override def isInt8: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Int16 extends DataType(3) with DataType.Recognized {
    val index = 3
    val name = "Int16"
    override def isInt16: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Int32 extends DataType(4) with DataType.Recognized {
    val index = 4
    val name = "Int32"
    override def isInt32: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Int64 extends DataType(5) with DataType.Recognized {
    val index = 5
    val name = "Int64"
    override def isInt64: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Float extends DataType(10) with DataType.Recognized {
    val index = 6
    val name = "Float"
    override def isFloat: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Double extends DataType(11) with DataType.Recognized {
    val index = 7
    val name = "Double"
    override def isDouble: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object String extends DataType(20) with DataType.Recognized {
    val index = 8
    val name = "String"
    override def isString: _root_.scala.Boolean = true
  }
  
  /** variable-length strings with a specified maximum length
    */
  @SerialVersionUID(0L)
  case object VarChar extends DataType(21) with DataType.Recognized {
    val index = 9
    val name = "VarChar"
    override def isVarChar: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Array extends DataType(22) with DataType.Recognized {
    val index = 10
    val name = "Array"
    override def isArray: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object JSON extends DataType(23) with DataType.Recognized {
    val index = 11
    val name = "JSON"
    override def isJson: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Geometry extends DataType(24) with DataType.Recognized {
    val index = 12
    val name = "Geometry"
    override def isGeometry: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Text extends DataType(25) with DataType.Recognized {
    val index = 13
    val name = "Text"
    override def isText: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BinaryVector extends DataType(100) with DataType.Recognized {
    val index = 14
    val name = "BinaryVector"
    override def isBinaryVector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FloatVector extends DataType(101) with DataType.Recognized {
    val index = 15
    val name = "FloatVector"
    override def isFloatVector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Float16Vector extends DataType(102) with DataType.Recognized {
    val index = 16
    val name = "Float16Vector"
    override def isFloat16Vector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BFloat16Vector extends DataType(103) with DataType.Recognized {
    val index = 17
    val name = "BFloat16Vector"
    override def isBfloat16Vector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SparseFloatVector extends DataType(104) with DataType.Recognized {
    val index = 18
    val name = "SparseFloatVector"
    override def isSparseFloatVector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Int8Vector extends DataType(105) with DataType.Recognized {
    val index = 19
    val name = "Int8Vector"
    override def isInt8Vector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ArrayOfVector extends DataType(106) with DataType.Recognized {
    val index = 20
    val name = "ArrayOfVector"
    override def isArrayOfVector: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ArrayOfStruct extends DataType(200) with DataType.Recognized {
    val index = 21
    val name = "ArrayOfStruct"
    override def isArrayOfStruct: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DataType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(None, Bool, Int8, Int16, Int32, Int64, Float, Double, String, VarChar, Array, JSON, Geometry, Text, BinaryVector, FloatVector, Float16Vector, BFloat16Vector, SparseFloatVector, Int8Vector, ArrayOfVector, ArrayOfStruct)
  def fromValue(__value: _root_.scala.Int): DataType = __value match {
    case 0 => None
    case 1 => Bool
    case 2 => Int8
    case 3 => Int16
    case 4 => Int32
    case 5 => Int64
    case 10 => Float
    case 11 => Double
    case 20 => String
    case 21 => VarChar
    case 22 => Array
    case 23 => JSON
    case 24 => Geometry
    case 25 => Text
    case 100 => BinaryVector
    case 101 => FloatVector
    case 102 => Float16Vector
    case 103 => BFloat16Vector
    case 104 => SparseFloatVector
    case 105 => Int8Vector
    case 106 => ArrayOfVector
    case 200 => ArrayOfStruct
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.enums(0)
}