// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

object SchemaProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    io.milvus.grpc.common.CommonProto,
    com.google.protobuf.descriptor.DescriptorProtoCompanion
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      io.milvus.grpc.schema.FieldSchema,
      io.milvus.grpc.schema.FunctionSchema,
      io.milvus.grpc.schema.FunctionScore,
      io.milvus.grpc.schema.CollectionSchema,
      io.milvus.grpc.schema.StructArrayFieldSchema,
      io.milvus.grpc.schema.BoolArray,
      io.milvus.grpc.schema.IntArray,
      io.milvus.grpc.schema.LongArray,
      io.milvus.grpc.schema.FloatArray,
      io.milvus.grpc.schema.DoubleArray,
      io.milvus.grpc.schema.BytesArray,
      io.milvus.grpc.schema.StringArray,
      io.milvus.grpc.schema.ArrayArray,
      io.milvus.grpc.schema.JSONArray,
      io.milvus.grpc.schema.GeometryArray,
      io.milvus.grpc.schema.ValueField,
      io.milvus.grpc.schema.ScalarField,
      io.milvus.grpc.schema.SparseFloatArray,
      io.milvus.grpc.schema.VectorField,
      io.milvus.grpc.schema.VectorArray,
      io.milvus.grpc.schema.StructArrayField,
      io.milvus.grpc.schema.FieldData,
      io.milvus.grpc.schema.IDs,
      io.milvus.grpc.schema.SearchIteratorV2Results,
      io.milvus.grpc.schema.SearchResultData,
      io.milvus.grpc.schema.VectorClusteringInfo,
      io.milvus.grpc.schema.ScalarClusteringInfo,
      io.milvus.grpc.schema.ClusteringInfo,
      io.milvus.grpc.schema.TemplateValue,
      io.milvus.grpc.schema.TemplateArrayValue,
      io.milvus.grpc.schema.TemplateArrayValueArray
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChNtaWx2dXMvc2NoZW1hLnByb3RvEhNtaWx2dXMucHJvdG8uc2NoZW1hGhNtaWx2dXMvY29tbW9uLnByb3RvGiBnb29nbGUvc
  HJvdG9idWYvZGVzY3JpcHRvci5wcm90byLuBwoLRmllbGRTY2hlbWESJgoHZmllbGRJRBgBIAEoA0IM4j8JEgdmaWVsZElEUgdma
  WVsZElEEh0KBG5hbWUYAiABKAlCCeI/BhIEbmFtZVIEbmFtZRI3Cg5pc19wcmltYXJ5X2tleRgDIAEoCEIR4j8OEgxpc1ByaW1hc
  nlLZXlSDGlzUHJpbWFyeUtleRIyCgtkZXNjcmlwdGlvbhgEIAEoCUIQ4j8NEgtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24SSQoJZ
  GF0YV90eXBlGAUgASgOMh0ubWlsdnVzLnByb3RvLnNjaGVtYS5EYXRhVHlwZUIN4j8KEghkYXRhVHlwZVIIZGF0YVR5cGUSUwoLd
  HlwZV9wYXJhbXMYBiADKAsyIS5taWx2dXMucHJvdG8uY29tbW9uLktleVZhbHVlUGFpckIP4j8MEgp0eXBlUGFyYW1zUgp0eXBlU
  GFyYW1zElYKDGluZGV4X3BhcmFtcxgHIAMoCzIhLm1pbHZ1cy5wcm90by5jb21tb24uS2V5VmFsdWVQYWlyQhDiPw0SC2luZGV4U
  GFyYW1zUgtpbmRleFBhcmFtcxIjCgZhdXRvSUQYCCABKAhCC+I/CBIGYXV0b0lEUgZhdXRvSUQSQQoFc3RhdGUYCSABKA4yHy5ta
  Wx2dXMucHJvdG8uc2NoZW1hLkZpZWxkU3RhdGVCCuI/BxIFc3RhdGVSBXN0YXRlElIKDGVsZW1lbnRfdHlwZRgKIAEoDjIdLm1pb
  HZ1cy5wcm90by5zY2hlbWEuRGF0YVR5cGVCEOI/DRILZWxlbWVudFR5cGVSC2VsZW1lbnRUeXBlElcKDWRlZmF1bHRfdmFsdWUYC
  yABKAsyHy5taWx2dXMucHJvdG8uc2NoZW1hLlZhbHVlRmllbGRCEeI/DhIMZGVmYXVsdFZhbHVlUgxkZWZhdWx0VmFsdWUSLQoKa
  XNfZHluYW1pYxgMIAEoCEIO4j8LEglpc0R5bmFtaWNSCWlzRHluYW1pYxI9ChBpc19wYXJ0aXRpb25fa2V5GA0gASgIQhPiPxASD
  mlzUGFydGl0aW9uS2V5Ug5pc1BhcnRpdGlvbktleRJAChFpc19jbHVzdGVyaW5nX2tleRgOIAEoCEIU4j8REg9pc0NsdXN0ZXJpb
  mdLZXlSD2lzQ2x1c3RlcmluZ0tleRIpCghudWxsYWJsZRgPIAEoCEIN4j8KEghudWxsYWJsZVIIbnVsbGFibGUSQwoSaXNfZnVuY
  3Rpb25fb3V0cHV0GBAgASgIQhXiPxISEGlzRnVuY3Rpb25PdXRwdXRSEGlzRnVuY3Rpb25PdXRwdXQiiAQKDkZ1bmN0aW9uU2NoZ
  W1hEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIXCgJpZBgCIAEoA0IH4j8EEgJpZFICaWQSMgoLZGVzY3JpcHRpb24YA
  yABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2NyaXB0aW9uEkAKBHR5cGUYBCABKA4yIS5taWx2dXMucHJvdG8uc2NoZW1hLkZ1b
  mN0aW9uVHlwZUIJ4j8GEgR0eXBlUgR0eXBlEkAKEWlucHV0X2ZpZWxkX25hbWVzGAUgAygJQhTiPxESD2lucHV0RmllbGROYW1lc
  1IPaW5wdXRGaWVsZE5hbWVzEjoKD2lucHV0X2ZpZWxkX2lkcxgGIAMoA0IS4j8PEg1pbnB1dEZpZWxkSWRzUg1pbnB1dEZpZWxkS
  WRzEkMKEm91dHB1dF9maWVsZF9uYW1lcxgHIAMoCUIV4j8SEhBvdXRwdXRGaWVsZE5hbWVzUhBvdXRwdXRGaWVsZE5hbWVzEj0KE
  G91dHB1dF9maWVsZF9pZHMYCCADKANCE+I/EBIOb3V0cHV0RmllbGRJZHNSDm91dHB1dEZpZWxkSWRzEkYKBnBhcmFtcxgJIAMoC
  zIhLm1pbHZ1cy5wcm90by5jb21tb24uS2V5VmFsdWVQYWlyQgviPwgSBnBhcmFtc1IGcGFyYW1zIqoBCg1GdW5jdGlvblNjb3JlE
  lEKCWZ1bmN0aW9ucxgBIAMoCzIjLm1pbHZ1cy5wcm90by5zY2hlbWEuRnVuY3Rpb25TY2hlbWFCDuI/CxIJZnVuY3Rpb25zUglmd
  W5jdGlvbnMSRgoGcGFyYW1zGAIgAygLMiEubWlsdnVzLnByb3RvLmNvbW1vbi5LZXlWYWx1ZVBhaXJCC+I/CBIGcGFyYW1zUgZwY
  XJhbXMi3wQKEENvbGxlY3Rpb25TY2hlbWESHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEjIKC2Rlc2NyaXB0aW9uGAIgA
  SgJQhDiPw0SC2Rlc2NyaXB0aW9uUgtkZXNjcmlwdGlvbhIlCgZhdXRvSUQYAyABKAhCDRgB4j8IEgZhdXRvSURSBmF1dG9JRBJFC
  gZmaWVsZHMYBCADKAsyIC5taWx2dXMucHJvdG8uc2NoZW1hLkZpZWxkU2NoZW1hQgviPwgSBmZpZWxkc1IGZmllbGRzEkkKFGVuY
  WJsZV9keW5hbWljX2ZpZWxkGAUgASgIQhfiPxQSEmVuYWJsZUR5bmFtaWNGaWVsZFISZW5hYmxlRHluYW1pY0ZpZWxkElIKCnByb
  3BlcnRpZXMYBiADKAsyIS5taWx2dXMucHJvdG8uY29tbW9uLktleVZhbHVlUGFpckIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0a
  WVzElEKCWZ1bmN0aW9ucxgHIAMoCzIjLm1pbHZ1cy5wcm90by5zY2hlbWEuRnVuY3Rpb25TY2hlbWFCDuI/CxIJZnVuY3Rpb25zU
  glmdW5jdGlvbnMSIwoGZGJOYW1lGAggASgJQgviPwgSBmRiTmFtZVIGZGJOYW1lEnMKE3N0cnVjdF9hcnJheV9maWVsZHMYCSADK
  AsyKy5taWx2dXMucHJvdG8uc2NoZW1hLlN0cnVjdEFycmF5RmllbGRTY2hlbWFCFuI/ExIRc3RydWN0QXJyYXlGaWVsZHNSEXN0c
  nVjdEFycmF5RmllbGRzItoBChZTdHJ1Y3RBcnJheUZpZWxkU2NoZW1hEiYKB2ZpZWxkSUQYASABKANCDOI/CRIHZmllbGRJRFIHZ
  mllbGRJRBIdCgRuYW1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSMgoLZGVzY3JpcHRpb24YAyABKAlCEOI/DRILZGVzY3JpcHRpb
  25SC2Rlc2NyaXB0aW9uEkUKBmZpZWxkcxgEIAMoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuRmllbGRTY2hlbWFCC+I/CBIGZmllb
  GRzUgZmaWVsZHMiKgoJQm9vbEFycmF5Eh0KBGRhdGEYASADKAhCCeI/BhIEZGF0YVIEZGF0YSIpCghJbnRBcnJheRIdCgRkYXRhG
  AEgAygFQgniPwYSBGRhdGFSBGRhdGEiKgoJTG9uZ0FycmF5Eh0KBGRhdGEYASADKANCCeI/BhIEZGF0YVIEZGF0YSIrCgpGbG9hd
  EFycmF5Eh0KBGRhdGEYASADKAJCCeI/BhIEZGF0YVIEZGF0YSIsCgtEb3VibGVBcnJheRIdCgRkYXRhGAEgAygBQgniPwYSBGRhd
  GFSBGRhdGEiKwoKQnl0ZXNBcnJheRIdCgRkYXRhGAEgAygMQgniPwYSBGRhdGFSBGRhdGEiLAoLU3RyaW5nQXJyYXkSHQoEZGF0Y
  RgBIAMoCUIJ4j8GEgRkYXRhUgRkYXRhIqEBCgpBcnJheUFycmF5Ej8KBGRhdGEYASADKAsyIC5taWx2dXMucHJvdG8uc2NoZW1hL
  lNjYWxhckZpZWxkQgniPwYSBGRhdGFSBGRhdGESUgoMZWxlbWVudF90eXBlGAIgASgOMh0ubWlsdnVzLnByb3RvLnNjaGVtYS5EY
  XRhVHlwZUIQ4j8NEgtlbGVtZW50VHlwZVILZWxlbWVudFR5cGUiKgoJSlNPTkFycmF5Eh0KBGRhdGEYASADKAxCCeI/BhIEZGF0Y
  VIEZGF0YSIuCg1HZW9tZXRyeUFycmF5Eh0KBGRhdGEYASADKAxCCeI/BhIEZGF0YVIEZGF0YSLlAgoKVmFsdWVGaWVsZBIsCglib
  29sX2RhdGEYASABKAhCDeI/ChIIYm9vbERhdGFIAFIIYm9vbERhdGESKQoIaW50X2RhdGEYAiABKAVCDOI/CRIHaW50RGF0YUgAU
  gdpbnREYXRhEiwKCWxvbmdfZGF0YRgDIAEoA0IN4j8KEghsb25nRGF0YUgAUghsb25nRGF0YRIvCgpmbG9hdF9kYXRhGAQgASgCQ
  g7iPwsSCWZsb2F0RGF0YUgAUglmbG9hdERhdGESMgoLZG91YmxlX2RhdGEYBSABKAFCD+I/DBIKZG91YmxlRGF0YUgAUgpkb3Vib
  GVEYXRhEjIKC3N0cmluZ19kYXRhGAYgASgJQg/iPwwSCnN0cmluZ0RhdGFIAFIKc3RyaW5nRGF0YRIvCgpieXRlc19kYXRhGAcgA
  SgMQg7iPwsSCWJ5dGVzRGF0YUgAUglieXRlc0RhdGFCBgoEZGF0YSLJBgoLU2NhbGFyRmllbGQSTAoJYm9vbF9kYXRhGAEgASgLM
  h4ubWlsdnVzLnByb3RvLnNjaGVtYS5Cb29sQXJyYXlCDeI/ChIIYm9vbERhdGFIAFIIYm9vbERhdGESSAoIaW50X2RhdGEYAiABK
  AsyHS5taWx2dXMucHJvdG8uc2NoZW1hLkludEFycmF5QgziPwkSB2ludERhdGFIAFIHaW50RGF0YRJMCglsb25nX2RhdGEYAyABK
  AsyHi5taWx2dXMucHJvdG8uc2NoZW1hLkxvbmdBcnJheUIN4j8KEghsb25nRGF0YUgAUghsb25nRGF0YRJQCgpmbG9hdF9kYXRhG
  AQgASgLMh8ubWlsdnVzLnByb3RvLnNjaGVtYS5GbG9hdEFycmF5Qg7iPwsSCWZsb2F0RGF0YUgAUglmbG9hdERhdGESVAoLZG91Y
  mxlX2RhdGEYBSABKAsyIC5taWx2dXMucHJvdG8uc2NoZW1hLkRvdWJsZUFycmF5Qg/iPwwSCmRvdWJsZURhdGFIAFIKZG91YmxlR
  GF0YRJUCgtzdHJpbmdfZGF0YRgGIAEoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuU3RyaW5nQXJyYXlCD+I/DBIKc3RyaW5nRGF0Y
  UgAUgpzdHJpbmdEYXRhElAKCmJ5dGVzX2RhdGEYByABKAsyHy5taWx2dXMucHJvdG8uc2NoZW1hLkJ5dGVzQXJyYXlCDuI/CxIJY
  nl0ZXNEYXRhSABSCWJ5dGVzRGF0YRJQCgphcnJheV9kYXRhGAggASgLMh8ubWlsdnVzLnByb3RvLnNjaGVtYS5BcnJheUFycmF5Q
  g7iPwsSCWFycmF5RGF0YUgAUglhcnJheURhdGESTAoJanNvbl9kYXRhGAkgASgLMh4ubWlsdnVzLnByb3RvLnNjaGVtYS5KU09OQ
  XJyYXlCDeI/ChIIanNvbkRhdGFIAFIIanNvbkRhdGESXAoNZ2VvbWV0cnlfZGF0YRgKIAEoCzIiLm1pbHZ1cy5wcm90by5zY2hlb
  WEuR2VvbWV0cnlBcnJheUIR4j8OEgxnZW9tZXRyeURhdGFIAFIMZ2VvbWV0cnlEYXRhQgYKBGRhdGEiWQoQU3BhcnNlRmxvYXRBc
  nJheRIpCghjb250ZW50cxgBIAMoDEIN4j8KEghjb250ZW50c1IIY29udGVudHMSGgoDZGltGAIgASgDQgjiPwUSA2RpbVIDZGltI
  r4ECgtWZWN0b3JGaWVsZBIaCgNkaW0YASABKANCCOI/BRIDZGltUgNkaW0SVgoMZmxvYXRfdmVjdG9yGAIgASgLMh8ubWlsdnVzL
  nByb3RvLnNjaGVtYS5GbG9hdEFycmF5QhDiPw0SC2Zsb2F0VmVjdG9ySABSC2Zsb2F0VmVjdG9yEjgKDWJpbmFyeV92ZWN0b3IYA
  yABKAxCEeI/DhIMYmluYXJ5VmVjdG9ySABSDGJpbmFyeVZlY3RvchI7Cg5mbG9hdDE2X3ZlY3RvchgEIAEoDEIS4j8PEg1mbG9hd
  DE2VmVjdG9ySABSDWZsb2F0MTZWZWN0b3ISPgoPYmZsb2F0MTZfdmVjdG9yGAUgASgMQhPiPxASDmJmbG9hdDE2VmVjdG9ySABSD
  mJmbG9hdDE2VmVjdG9yEm8KE3NwYXJzZV9mbG9hdF92ZWN0b3IYBiABKAsyJS5taWx2dXMucHJvdG8uc2NoZW1hLlNwYXJzZUZsb
  2F0QXJyYXlCFuI/ExIRc3BhcnNlRmxvYXRWZWN0b3JIAFIRc3BhcnNlRmxvYXRWZWN0b3ISMgoLaW50OF92ZWN0b3IYByABKAxCD
  +I/DBIKaW50OFZlY3RvckgAUgppbnQ4VmVjdG9yElcKDHZlY3Rvcl9hcnJheRgIIAEoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuV
  mVjdG9yQXJyYXlCEOI/DRILdmVjdG9yQXJyYXlIAFILdmVjdG9yQXJyYXlCBgoEZGF0YSK+AQoLVmVjdG9yQXJyYXkSGgoDZGltG
  AEgASgDQgjiPwUSA2RpbVIDZGltEj8KBGRhdGEYAiADKAsyIC5taWx2dXMucHJvdG8uc2NoZW1hLlZlY3RvckZpZWxkQgniPwYSB
  GRhdGFSBGRhdGESUgoMZWxlbWVudF90eXBlGAMgASgOMh0ubWlsdnVzLnByb3RvLnNjaGVtYS5EYXRhVHlwZUIQ4j8NEgtlbGVtZ
  W50VHlwZVILZWxlbWVudFR5cGUiVwoQU3RydWN0QXJyYXlGaWVsZBJDCgZmaWVsZHMYASADKAsyHi5taWx2dXMucHJvdG8uc2NoZ
  W1hLkZpZWxkRGF0YUIL4j8IEgZmaWVsZHNSBmZpZWxkcyKBBAoJRmllbGREYXRhEjwKBHR5cGUYASABKA4yHS5taWx2dXMucHJvd
  G8uc2NoZW1hLkRhdGFUeXBlQgniPwYSBHR5cGVSBHR5cGUSLQoKZmllbGRfbmFtZRgCIAEoCUIO4j8LEglmaWVsZE5hbWVSCWZpZ
  WxkTmFtZRJKCgdzY2FsYXJzGAMgASgLMiAubWlsdnVzLnByb3RvLnNjaGVtYS5TY2FsYXJGaWVsZEIM4j8JEgdzY2FsYXJzSABSB
  3NjYWxhcnMSSgoHdmVjdG9ycxgEIAEoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuVmVjdG9yRmllbGRCDOI/CRIHdmVjdG9yc0gAU
  gd2ZWN0b3JzEl8KDXN0cnVjdF9hcnJheXMYCCABKAsyJS5taWx2dXMucHJvdG8uc2NoZW1hLlN0cnVjdEFycmF5RmllbGRCEeI/D
  hIMc3RydWN0QXJyYXlzSABSDHN0cnVjdEFycmF5cxInCghmaWVsZF9pZBgFIAEoA0IM4j8JEgdmaWVsZElkUgdmaWVsZElkEi0KC
  mlzX2R5bmFtaWMYBiABKAhCDuI/CxIJaXNEeW5hbWljUglpc0R5bmFtaWMSLQoKdmFsaWRfZGF0YRgHIAMoCEIO4j8LEgl2YWxpZ
  ERhdGFSCXZhbGlkRGF0YUIHCgVmaWVsZCKdAQoDSURzEkMKBmludF9pZBgBIAEoCzIeLm1pbHZ1cy5wcm90by5zY2hlbWEuTG9uZ
  0FycmF5QgriPwcSBWludElkSABSBWludElkEkUKBnN0cl9pZBgCIAEoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuU3RyaW5nQXJyY
  XlCCuI/BxIFc3RySWRIAFIFc3RySWRCCgoIaWRfZmllbGQiagoXU2VhcmNoSXRlcmF0b3JWMlJlc3VsdHMSIAoFdG9rZW4YASABK
  AlCCuI/BxIFdG9rZW5SBXRva2VuEi0KCmxhc3RfYm91bmQYAiABKAJCDuI/CxIJbGFzdEJvdW5kUglsYXN0Qm91bmQi3AYKEFNlY
  XJjaFJlc3VsdERhdGESMAoLbnVtX3F1ZXJpZXMYASABKANCD+I/DBIKbnVtUXVlcmllc1IKbnVtUXVlcmllcxIeCgV0b3BfaxgCI
  AEoA0IJ4j8GEgR0b3BLUgR0b3BLElAKC2ZpZWxkc19kYXRhGAMgAygLMh4ubWlsdnVzLnByb3RvLnNjaGVtYS5GaWVsZERhdGFCD
  +I/DBIKZmllbGRzRGF0YVIKZmllbGRzRGF0YRIjCgZzY29yZXMYBCADKAJCC+I/CBIGc2NvcmVzUgZzY29yZXMSNAoDaWRzGAUgA
  SgLMhgubWlsdnVzLnByb3RvLnNjaGVtYS5JRHNCCOI/BRIDaWRzUgNpZHMSIAoFdG9wa3MYBiADKANCCuI/BxIFdG9wa3NSBXRvc
  GtzEjYKDW91dHB1dF9maWVsZHMYByADKAlCEeI/DhIMb3V0cHV0RmllbGRzUgxvdXRwdXRGaWVsZHMSZwoUZ3JvdXBfYnlfZmllb
  GRfdmFsdWUYCCABKAsyHi5taWx2dXMucHJvdG8uc2NoZW1hLkZpZWxkRGF0YUIW4j8TEhFncm91cEJ5RmllbGRWYWx1ZVIRZ3Jvd
  XBCeUZpZWxkVmFsdWUSPQoQYWxsX3NlYXJjaF9jb3VudBgJIAEoA0IT4j8QEg5hbGxTZWFyY2hDb3VudFIOYWxsU2VhcmNoQ291b
  nQSLAoJZGlzdGFuY2VzGAogAygCQg7iPwsSCWRpc3RhbmNlc1IJZGlzdGFuY2VzEowBChpzZWFyY2hfaXRlcmF0b3JfdjJfcmVzd
  Wx0cxgLIAEoCzIsLm1pbHZ1cy5wcm90by5zY2hlbWEuU2VhcmNoSXRlcmF0b3JWMlJlc3VsdHNCHOI/GRIXc2VhcmNoSXRlcmF0b
  3JWMlJlc3VsdHNIAFIXc2VhcmNoSXRlcmF0b3JWMlJlc3VsdHOIAQESJgoHcmVjYWxscxgMIAMoAkIM4j8JEgdyZWNhbGxzUgdyZ
  WNhbGxzEkMKEnByaW1hcnlfZmllbGRfbmFtZRgNIAEoCUIV4j8SEhBwcmltYXJ5RmllbGROYW1lUhBwcmltYXJ5RmllbGROYW1lQ
  h0KG19zZWFyY2hfaXRlcmF0b3JfdjJfcmVzdWx0cyKFAQoUVmVjdG9yQ2x1c3RlcmluZ0luZm8SIAoFZmllbGQYASABKAlCCuI/B
  xIFZmllbGRSBWZpZWxkEksKCGNlbnRyb2lkGAIgASgLMiAubWlsdnVzLnByb3RvLnNjaGVtYS5WZWN0b3JGaWVsZEIN4j8KEghjZ
  W50cm9pZFIIY2VudHJvaWQiOAoUU2NhbGFyQ2x1c3RlcmluZ0luZm8SIAoFZmllbGQYASABKAlCCuI/BxIFZmllbGRSBWZpZWxkI
  o4CCg5DbHVzdGVyaW5nSW5mbxJ9Chd2ZWN0b3JfY2x1c3RlcmluZ19pbmZvcxgBIAMoCzIpLm1pbHZ1cy5wcm90by5zY2hlbWEuV
  mVjdG9yQ2x1c3RlcmluZ0luZm9CGuI/FxIVdmVjdG9yQ2x1c3RlcmluZ0luZm9zUhV2ZWN0b3JDbHVzdGVyaW5nSW5mb3MSfQoXc
  2NhbGFyX2NsdXN0ZXJpbmdfaW5mb3MYAiADKAsyKS5taWx2dXMucHJvdG8uc2NoZW1hLlNjYWxhckNsdXN0ZXJpbmdJbmZvQhriP
  xcSFXNjYWxhckNsdXN0ZXJpbmdJbmZvc1IVc2NhbGFyQ2x1c3RlcmluZ0luZm9zIqUCCg1UZW1wbGF0ZVZhbHVlEikKCGJvb2xfd
  mFsGAEgASgIQgziPwkSB2Jvb2xWYWxIAFIHYm9vbFZhbBIsCglpbnQ2NF92YWwYAiABKANCDeI/ChIIaW50NjRWYWxIAFIIaW50N
  jRWYWwSLAoJZmxvYXRfdmFsGAMgASgBQg3iPwoSCGZsb2F0VmFsSABSCGZsb2F0VmFsEi8KCnN0cmluZ192YWwYBCABKAlCDuI/C
  xIJc3RyaW5nVmFsSABSCXN0cmluZ1ZhbBJVCglhcnJheV92YWwYBSABKAsyJy5taWx2dXMucHJvdG8uc2NoZW1hLlRlbXBsYXRlQ
  XJyYXlWYWx1ZUIN4j8KEghhcnJheVZhbEgAUghhcnJheVZhbEIFCgN2YWwikQQKElRlbXBsYXRlQXJyYXlWYWx1ZRJMCglib29sX
  2RhdGEYASABKAsyHi5taWx2dXMucHJvdG8uc2NoZW1hLkJvb2xBcnJheUIN4j8KEghib29sRGF0YUgAUghib29sRGF0YRJMCglsb
  25nX2RhdGEYAiABKAsyHi5taWx2dXMucHJvdG8uc2NoZW1hLkxvbmdBcnJheUIN4j8KEghsb25nRGF0YUgAUghsb25nRGF0YRJUC
  gtkb3VibGVfZGF0YRgDIAEoCzIgLm1pbHZ1cy5wcm90by5zY2hlbWEuRG91YmxlQXJyYXlCD+I/DBIKZG91YmxlRGF0YUgAUgpkb
  3VibGVEYXRhElQKC3N0cmluZ19kYXRhGAQgASgLMiAubWlsdnVzLnByb3RvLnNjaGVtYS5TdHJpbmdBcnJheUIP4j8MEgpzdHJpb
  mdEYXRhSABSCnN0cmluZ0RhdGESXQoKYXJyYXlfZGF0YRgFIAEoCzIsLm1pbHZ1cy5wcm90by5zY2hlbWEuVGVtcGxhdGVBcnJhe
  VZhbHVlQXJyYXlCDuI/CxIJYXJyYXlEYXRhSABSCWFycmF5RGF0YRJMCglqc29uX2RhdGEYBiABKAsyHi5taWx2dXMucHJvdG8uc
  2NoZW1hLkpTT05BcnJheUIN4j8KEghqc29uRGF0YUgAUghqc29uRGF0YUIGCgRkYXRhImEKF1RlbXBsYXRlQXJyYXlWYWx1ZUFyc
  mF5EkYKBGRhdGEYASADKAsyJy5taWx2dXMucHJvdG8uc2NoZW1hLlRlbXBsYXRlQXJyYXlWYWx1ZUIJ4j8GEgRkYXRhUgRkYXRhK
  ocFCghEYXRhVHlwZRITCgROb25lEAAaCeI/BhIETm9uZRITCgRCb29sEAEaCeI/BhIEQm9vbBITCgRJbnQ4EAIaCeI/BhIESW50O
  BIVCgVJbnQxNhADGgriPwcSBUludDE2EhUKBUludDMyEAQaCuI/BxIFSW50MzISFQoFSW50NjQQBRoK4j8HEgVJbnQ2NBIVCgVGb
  G9hdBAKGgriPwcSBUZsb2F0EhcKBkRvdWJsZRALGgviPwgSBkRvdWJsZRIXCgZTdHJpbmcQFBoL4j8IEgZTdHJpbmcSGQoHVmFyQ
  2hhchAVGgziPwkSB1ZhckNoYXISFQoFQXJyYXkQFhoK4j8HEgVBcnJheRITCgRKU09OEBcaCeI/BhIESlNPThIbCghHZW9tZXRye
  RAYGg3iPwoSCEdlb21ldHJ5EhMKBFRleHQQGRoJ4j8GEgRUZXh0EiMKDEJpbmFyeVZlY3RvchBkGhHiPw4SDEJpbmFyeVZlY3Rvc
  hIhCgtGbG9hdFZlY3RvchBlGhDiPw0SC0Zsb2F0VmVjdG9yEiUKDUZsb2F0MTZWZWN0b3IQZhoS4j8PEg1GbG9hdDE2VmVjdG9yE
  icKDkJGbG9hdDE2VmVjdG9yEGcaE+I/EBIOQkZsb2F0MTZWZWN0b3ISLQoRU3BhcnNlRmxvYXRWZWN0b3IQaBoW4j8TEhFTcGFyc
  2VGbG9hdFZlY3RvchIfCgpJbnQ4VmVjdG9yEGkaD+I/DBIKSW50OFZlY3RvchIlCg1BcnJheU9mVmVjdG9yEGoaEuI/DxINQXJyY
  XlPZlZlY3RvchImCg1BcnJheU9mU3RydWN0EMgBGhLiPw8SDUFycmF5T2ZTdHJ1Y3QqfgoMRnVuY3Rpb25UeXBlEhkKB1Vua25vd
  24QABoM4j8JEgdVbmtub3duEhMKBEJNMjUQARoJ4j8GEgRCTTI1EiUKDVRleHRFbWJlZGRpbmcQAhoS4j8PEg1UZXh0RW1iZWRka
  W5nEhcKBlJlcmFuaxADGgviPwgSBlJlcmFuayqkAQoKRmllbGRTdGF0ZRIjCgxGaWVsZENyZWF0ZWQQABoR4j8OEgxGaWVsZENyZ
  WF0ZWQSJQoNRmllbGRDcmVhdGluZxABGhLiPw8SDUZpZWxkQ3JlYXRpbmcSJQoNRmllbGREcm9wcGluZxACGhLiPw8SDUZpZWxkR
  HJvcHBpbmcSIwoMRmllbGREcm9wcGVkEAMaEeI/DhIMRmllbGREcm9wcGVkQm0KDmlvLm1pbHZ1cy5ncnBjQgtTY2hlbWFQcm90b
  1ABWjRnaXRodWIuY29tL21pbHZ1cy1pby9taWx2dXMtcHJvdG8vZ28tYXBpL3YyL3NjaGVtYXBioAEBqgISTWlsdnVzLkNsaWVud
  C5HcnBjYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      io.milvus.grpc.common.CommonProto.javaDescriptor,
      com.google.protobuf.descriptor.DescriptorProtoCompanion.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}