// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class TemplateArrayValue(
    data: io.milvus.grpc.schema.TemplateArrayValue.Data = io.milvus.grpc.schema.TemplateArrayValue.Data.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TemplateArrayValue] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (data.boolData.isDefined) {
        val __value = data.boolData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.longData.isDefined) {
        val __value = data.longData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.doubleData.isDefined) {
        val __value = data.doubleData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.stringData.isDefined) {
        val __value = data.stringData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.arrayData.isDefined) {
        val __value = data.arrayData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.jsonData.isDefined) {
        val __value = data.jsonData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.boolData.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.longData.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.doubleData.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.stringData.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.arrayData.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.jsonData.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBoolData: io.milvus.grpc.schema.BoolArray = data.boolData.getOrElse(io.milvus.grpc.schema.BoolArray.defaultInstance)
    def withBoolData(__v: io.milvus.grpc.schema.BoolArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.BoolData(__v))
    def getLongData: io.milvus.grpc.schema.LongArray = data.longData.getOrElse(io.milvus.grpc.schema.LongArray.defaultInstance)
    def withLongData(__v: io.milvus.grpc.schema.LongArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.LongData(__v))
    def getDoubleData: io.milvus.grpc.schema.DoubleArray = data.doubleData.getOrElse(io.milvus.grpc.schema.DoubleArray.defaultInstance)
    def withDoubleData(__v: io.milvus.grpc.schema.DoubleArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.DoubleData(__v))
    def getStringData: io.milvus.grpc.schema.StringArray = data.stringData.getOrElse(io.milvus.grpc.schema.StringArray.defaultInstance)
    def withStringData(__v: io.milvus.grpc.schema.StringArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.StringData(__v))
    def getArrayData: io.milvus.grpc.schema.TemplateArrayValueArray = data.arrayData.getOrElse(io.milvus.grpc.schema.TemplateArrayValueArray.defaultInstance)
    def withArrayData(__v: io.milvus.grpc.schema.TemplateArrayValueArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.ArrayData(__v))
    def getJsonData: io.milvus.grpc.schema.JSONArray = data.jsonData.getOrElse(io.milvus.grpc.schema.JSONArray.defaultInstance)
    def withJsonData(__v: io.milvus.grpc.schema.JSONArray): TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.JsonData(__v))
    def clearData: TemplateArrayValue = copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.Empty)
    def withData(__v: io.milvus.grpc.schema.TemplateArrayValue.Data): TemplateArrayValue = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data.boolData.orNull
        case 2 => data.longData.orNull
        case 3 => data.doubleData.orNull
        case 4 => data.stringData.orNull
        case 5 => data.arrayData.orNull
        case 6 => data.jsonData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => data.boolData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.longData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.doubleData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.stringData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.arrayData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => data.jsonData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.TemplateArrayValue.type = io.milvus.grpc.schema.TemplateArrayValue
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.TemplateArrayValue])
}

object TemplateArrayValue extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.TemplateArrayValue] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.TemplateArrayValue] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.TemplateArrayValue = {
    var __data: io.milvus.grpc.schema.TemplateArrayValue.Data = io.milvus.grpc.schema.TemplateArrayValue.Data.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.BoolData(__data.boolData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.BoolArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.LongData(__data.longData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.LongArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.DoubleData(__data.doubleData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.DoubleArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.StringData(__data.stringData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.StringArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.ArrayData(__data.arrayData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.TemplateArrayValueArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __data = io.milvus.grpc.schema.TemplateArrayValue.Data.JsonData(__data.jsonData.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.JSONArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.TemplateArrayValue(
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.TemplateArrayValue] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.TemplateArrayValue(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.BoolArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.BoolData(_))
            .orElse[io.milvus.grpc.schema.TemplateArrayValue.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.LongArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.LongData(_)))
            .orElse[io.milvus.grpc.schema.TemplateArrayValue.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.DoubleArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.DoubleData(_)))
            .orElse[io.milvus.grpc.schema.TemplateArrayValue.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.StringArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.StringData(_)))
            .orElse[io.milvus.grpc.schema.TemplateArrayValue.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValueArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.ArrayData(_)))
            .orElse[io.milvus.grpc.schema.TemplateArrayValue.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.JSONArray]]).map(io.milvus.grpc.schema.TemplateArrayValue.Data.JsonData(_)))
            .getOrElse(io.milvus.grpc.schema.TemplateArrayValue.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.schema.BoolArray
      case 2 => __out = io.milvus.grpc.schema.LongArray
      case 3 => __out = io.milvus.grpc.schema.DoubleArray
      case 4 => __out = io.milvus.grpc.schema.StringArray
      case 5 => __out = io.milvus.grpc.schema.TemplateArrayValueArray
      case 6 => __out = io.milvus.grpc.schema.JSONArray
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.TemplateArrayValue(
    data = io.milvus.grpc.schema.TemplateArrayValue.Data.Empty
  )
  sealed abstract class Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBoolData: _root_.scala.Boolean = false
    def isLongData: _root_.scala.Boolean = false
    def isDoubleData: _root_.scala.Boolean = false
    def isStringData: _root_.scala.Boolean = false
    def isArrayData: _root_.scala.Boolean = false
    def isJsonData: _root_.scala.Boolean = false
    def boolData: _root_.scala.Option[io.milvus.grpc.schema.BoolArray] = _root_.scala.None
    def longData: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = _root_.scala.None
    def doubleData: _root_.scala.Option[io.milvus.grpc.schema.DoubleArray] = _root_.scala.None
    def stringData: _root_.scala.Option[io.milvus.grpc.schema.StringArray] = _root_.scala.None
    def arrayData: _root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValueArray] = _root_.scala.None
    def jsonData: _root_.scala.Option[io.milvus.grpc.schema.JSONArray] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BoolData(value: io.milvus.grpc.schema.BoolArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.BoolArray
      override def isBoolData: _root_.scala.Boolean = true
      override def boolData: _root_.scala.Option[io.milvus.grpc.schema.BoolArray] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class LongData(value: io.milvus.grpc.schema.LongArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.LongArray
      override def isLongData: _root_.scala.Boolean = true
      override def longData: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class DoubleData(value: io.milvus.grpc.schema.DoubleArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.DoubleArray
      override def isDoubleData: _root_.scala.Boolean = true
      override def doubleData: _root_.scala.Option[io.milvus.grpc.schema.DoubleArray] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class StringData(value: io.milvus.grpc.schema.StringArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.StringArray
      override def isStringData: _root_.scala.Boolean = true
      override def stringData: _root_.scala.Option[io.milvus.grpc.schema.StringArray] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class ArrayData(value: io.milvus.grpc.schema.TemplateArrayValueArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.TemplateArrayValueArray
      override def isArrayData: _root_.scala.Boolean = true
      override def arrayData: _root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValueArray] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class JsonData(value: io.milvus.grpc.schema.JSONArray) extends io.milvus.grpc.schema.TemplateArrayValue.Data {
      type ValueType = io.milvus.grpc.schema.JSONArray
      override def isJsonData: _root_.scala.Boolean = true
      override def jsonData: _root_.scala.Option[io.milvus.grpc.schema.JSONArray] = Some(value)
      override def number: _root_.scala.Int = 6
    }
  }
  implicit class TemplateArrayValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateArrayValue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.TemplateArrayValue](_l) {
    def boolData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.BoolArray] = field(_.getBoolData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.BoolData(f_)))
    def longData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.LongArray] = field(_.getLongData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.LongData(f_)))
    def doubleData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.DoubleArray] = field(_.getDoubleData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.DoubleData(f_)))
    def stringData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.StringArray] = field(_.getStringData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.StringData(f_)))
    def arrayData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateArrayValueArray] = field(_.getArrayData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.ArrayData(f_)))
    def jsonData: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.JSONArray] = field(_.getJsonData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.TemplateArrayValue.Data.JsonData(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateArrayValue.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val BOOL_DATA_FIELD_NUMBER = 1
  final val LONG_DATA_FIELD_NUMBER = 2
  final val DOUBLE_DATA_FIELD_NUMBER = 3
  final val STRING_DATA_FIELD_NUMBER = 4
  final val ARRAY_DATA_FIELD_NUMBER = 5
  final val JSON_DATA_FIELD_NUMBER = 6
  def of(
    data: io.milvus.grpc.schema.TemplateArrayValue.Data
  ): _root_.io.milvus.grpc.schema.TemplateArrayValue = _root_.io.milvus.grpc.schema.TemplateArrayValue(
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.TemplateArrayValue])
}
