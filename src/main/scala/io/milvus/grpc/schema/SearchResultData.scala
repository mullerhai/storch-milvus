// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class SearchResultData(
    numQueries: _root_.scala.Long = 0L,
    topK: _root_.scala.Long = 0L,
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData] = _root_.scala.Seq.empty,
    scores: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    ids: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None,
    topks: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    outputFields: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    groupByFieldValue: _root_.scala.Option[io.milvus.grpc.schema.FieldData] = _root_.scala.None,
    allSearchCount: _root_.scala.Long = 0L,
    distances: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    searchIteratorV2Results: _root_.scala.Option[io.milvus.grpc.schema.SearchIteratorV2Results] = _root_.scala.None,
    recalls: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    primaryFieldName: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SearchResultData] {
    private[this] def scoresSerializedSize = {
      4 * scores.size
    }
    private[this] def topksSerializedSize = {
      if (__topksSerializedSizeField == 0) __topksSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        topks.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __topksSerializedSizeField
    }
    @transient private[this] var __topksSerializedSizeField: _root_.scala.Int = 0
    private[this] def distancesSerializedSize = {
      4 * distances.size
    }
    private[this] def recallsSerializedSize = {
      4 * recalls.size
    }
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = numQueries
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = topK
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      fieldsData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (scores.nonEmpty) {
        val __localsize = scoresSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (ids.isDefined) {
        val __value = ids.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (topks.nonEmpty) {
        val __localsize = topksSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      outputFields.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      if (groupByFieldValue.isDefined) {
        val __value = groupByFieldValue.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = allSearchCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      if (distances.nonEmpty) {
        val __localsize = distancesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (searchIteratorV2Results.isDefined) {
        val __value = searchIteratorV2Results.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (recalls.nonEmpty) {
        val __localsize = recallsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = primaryFieldName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = numQueries
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = topK
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      fieldsData.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (scores.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(scoresSerializedSize)
        scores.foreach(_output__.writeFloatNoTag)
      };
      ids.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (topks.nonEmpty) {
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(topksSerializedSize)
        topks.foreach(_output__.writeInt64NoTag)
      };
      outputFields.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      groupByFieldValue.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = allSearchCount
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      if (distances.nonEmpty) {
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(distancesSerializedSize)
        distances.foreach(_output__.writeFloatNoTag)
      };
      searchIteratorV2Results.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (recalls.nonEmpty) {
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(recallsSerializedSize)
        recalls.foreach(_output__.writeFloatNoTag)
      };
      {
        val __v = primaryFieldName
        if (!__v.isEmpty) {
          _output__.writeString(13, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withNumQueries(__v: _root_.scala.Long): SearchResultData = copy(numQueries = __v)
    def withTopK(__v: _root_.scala.Long): SearchResultData = copy(topK = __v)
    def clearFieldsData = copy(fieldsData = _root_.scala.Seq.empty)
    def addFieldsData(__vs: io.milvus.grpc.schema.FieldData *): SearchResultData = addAllFieldsData(__vs)
    def addAllFieldsData(__vs: Iterable[io.milvus.grpc.schema.FieldData]): SearchResultData = copy(fieldsData = fieldsData ++ __vs)
    def withFieldsData(__v: _root_.scala.Seq[io.milvus.grpc.schema.FieldData]): SearchResultData = copy(fieldsData = __v)
    def clearScores = copy(scores = _root_.scala.Seq.empty)
    def addScores(__vs: _root_.scala.Float *): SearchResultData = addAllScores(__vs)
    def addAllScores(__vs: Iterable[_root_.scala.Float]): SearchResultData = copy(scores = scores ++ __vs)
    def withScores(__v: _root_.scala.Seq[_root_.scala.Float]): SearchResultData = copy(scores = __v)
    def getIds: io.milvus.grpc.schema.IDs = ids.getOrElse(io.milvus.grpc.schema.IDs.defaultInstance)
    def clearIds: SearchResultData = copy(ids = _root_.scala.None)
    def withIds(__v: io.milvus.grpc.schema.IDs): SearchResultData = copy(ids = Option(__v))
    def clearTopks = copy(topks = _root_.scala.Seq.empty)
    def addTopks(__vs: _root_.scala.Long *): SearchResultData = addAllTopks(__vs)
    def addAllTopks(__vs: Iterable[_root_.scala.Long]): SearchResultData = copy(topks = topks ++ __vs)
    def withTopks(__v: _root_.scala.Seq[_root_.scala.Long]): SearchResultData = copy(topks = __v)
    def clearOutputFields = copy(outputFields = _root_.scala.Seq.empty)
    def addOutputFields(__vs: _root_.scala.Predef.String *): SearchResultData = addAllOutputFields(__vs)
    def addAllOutputFields(__vs: Iterable[_root_.scala.Predef.String]): SearchResultData = copy(outputFields = outputFields ++ __vs)
    def withOutputFields(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SearchResultData = copy(outputFields = __v)
    def getGroupByFieldValue: io.milvus.grpc.schema.FieldData = groupByFieldValue.getOrElse(io.milvus.grpc.schema.FieldData.defaultInstance)
    def clearGroupByFieldValue: SearchResultData = copy(groupByFieldValue = _root_.scala.None)
    def withGroupByFieldValue(__v: io.milvus.grpc.schema.FieldData): SearchResultData = copy(groupByFieldValue = Option(__v))
    def withAllSearchCount(__v: _root_.scala.Long): SearchResultData = copy(allSearchCount = __v)
    def clearDistances = copy(distances = _root_.scala.Seq.empty)
    def addDistances(__vs: _root_.scala.Float *): SearchResultData = addAllDistances(__vs)
    def addAllDistances(__vs: Iterable[_root_.scala.Float]): SearchResultData = copy(distances = distances ++ __vs)
    def withDistances(__v: _root_.scala.Seq[_root_.scala.Float]): SearchResultData = copy(distances = __v)
    def getSearchIteratorV2Results: io.milvus.grpc.schema.SearchIteratorV2Results = searchIteratorV2Results.getOrElse(io.milvus.grpc.schema.SearchIteratorV2Results.defaultInstance)
    def clearSearchIteratorV2Results: SearchResultData = copy(searchIteratorV2Results = _root_.scala.None)
    def withSearchIteratorV2Results(__v: io.milvus.grpc.schema.SearchIteratorV2Results): SearchResultData = copy(searchIteratorV2Results = Option(__v))
    def clearRecalls = copy(recalls = _root_.scala.Seq.empty)
    def addRecalls(__vs: _root_.scala.Float *): SearchResultData = addAllRecalls(__vs)
    def addAllRecalls(__vs: Iterable[_root_.scala.Float]): SearchResultData = copy(recalls = recalls ++ __vs)
    def withRecalls(__v: _root_.scala.Seq[_root_.scala.Float]): SearchResultData = copy(recalls = __v)
    def withPrimaryFieldName(__v: _root_.scala.Predef.String): SearchResultData = copy(primaryFieldName = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = numQueries
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = topK
          if (__t != 0L) __t else null
        }
        case 3 => fieldsData
        case 4 => scores
        case 5 => ids.orNull
        case 6 => topks
        case 7 => outputFields
        case 8 => groupByFieldValue.orNull
        case 9 => {
          val __t = allSearchCount
          if (__t != 0L) __t else null
        }
        case 10 => distances
        case 11 => searchIteratorV2Results.orNull
        case 12 => recalls
        case 13 => {
          val __t = primaryFieldName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(numQueries)
        case 2 => _root_.scalapb.descriptors.PLong(topK)
        case 3 => _root_.scalapb.descriptors.PRepeated(fieldsData.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(scores.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 5 => ids.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(topks.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(outputFields.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => groupByFieldValue.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PLong(allSearchCount)
        case 10 => _root_.scalapb.descriptors.PRepeated(distances.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 11 => searchIteratorV2Results.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PRepeated(recalls.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 13 => _root_.scalapb.descriptors.PString(primaryFieldName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.SearchResultData.type = io.milvus.grpc.schema.SearchResultData
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.SearchResultData])
}

object SearchResultData extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.SearchResultData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.SearchResultData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.SearchResultData = {
    var __numQueries: _root_.scala.Long = 0L
    var __topK: _root_.scala.Long = 0L
    val __fieldsData: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData]
    val __scores: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    var __ids: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None
    val __topks: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __outputFields: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __groupByFieldValue: _root_.scala.Option[io.milvus.grpc.schema.FieldData] = _root_.scala.None
    var __allSearchCount: _root_.scala.Long = 0L
    val __distances: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    var __searchIteratorV2Results: _root_.scala.Option[io.milvus.grpc.schema.SearchIteratorV2Results] = _root_.scala.None
    val __recalls: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    var __primaryFieldName: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __numQueries = _input__.readInt64()
        case 16 =>
          __topK = _input__.readInt64()
        case 26 =>
          __fieldsData += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldData](_input__)
        case 37 =>
          __scores += _input__.readFloat()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __scores += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case 42 =>
          __ids = _root_.scala.Option(__ids.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.IDs](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 48 =>
          __topks += _input__.readInt64()
        case 50 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __topks += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 58 =>
          __outputFields += _input__.readStringRequireUtf8()
        case 66 =>
          __groupByFieldValue = _root_.scala.Option(__groupByFieldValue.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 72 =>
          __allSearchCount = _input__.readInt64()
        case 85 =>
          __distances += _input__.readFloat()
        case 82 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __distances += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case 90 =>
          __searchIteratorV2Results = _root_.scala.Option(__searchIteratorV2Results.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.SearchIteratorV2Results](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 101 =>
          __recalls += _input__.readFloat()
        case 98 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __recalls += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case 106 =>
          __primaryFieldName = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.SearchResultData(
        numQueries = __numQueries,
        topK = __topK,
        fieldsData = __fieldsData.result(),
        scores = __scores.result(),
        ids = __ids,
        topks = __topks.result(),
        outputFields = __outputFields.result(),
        groupByFieldValue = __groupByFieldValue,
        allSearchCount = __allSearchCount,
        distances = __distances.result(),
        searchIteratorV2Results = __searchIteratorV2Results,
        recalls = __recalls.result(),
        primaryFieldName = __primaryFieldName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.SearchResultData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.SearchResultData(
        numQueries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        topK = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        fieldsData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FieldData]]).getOrElse(_root_.scala.Seq.empty),
        scores = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        ids = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.IDs]]),
        topks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        outputFields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        groupByFieldValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.FieldData]]),
        allSearchCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        distances = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        searchIteratorV2Results = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.SearchIteratorV2Results]]),
        recalls = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        primaryFieldName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.milvus.grpc.schema.FieldData
      case 5 => __out = io.milvus.grpc.schema.IDs
      case 8 => __out = io.milvus.grpc.schema.FieldData
      case 11 => __out = io.milvus.grpc.schema.SearchIteratorV2Results
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.SearchResultData(
    numQueries = 0L,
    topK = 0L,
    fieldsData = _root_.scala.Seq.empty,
    scores = _root_.scala.Seq.empty,
    ids = _root_.scala.None,
    topks = _root_.scala.Seq.empty,
    outputFields = _root_.scala.Seq.empty,
    groupByFieldValue = _root_.scala.None,
    allSearchCount = 0L,
    distances = _root_.scala.Seq.empty,
    searchIteratorV2Results = _root_.scala.None,
    recalls = _root_.scala.Seq.empty,
    primaryFieldName = ""
  )
  implicit class SearchResultDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.SearchResultData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.SearchResultData](_l) {
    def numQueries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.numQueries)((c_, f_) => c_.copy(numQueries = f_))
    def topK: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.topK)((c_, f_) => c_.copy(topK = f_))
    def fieldsData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FieldData]] = field(_.fieldsData)((c_, f_) => c_.copy(fieldsData = f_))
    def scores: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.scores)((c_, f_) => c_.copy(scores = f_))
    def ids: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.IDs] = field(_.getIds)((c_, f_) => c_.copy(ids = _root_.scala.Option(f_)))
    def optionalIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.IDs]] = field(_.ids)((c_, f_) => c_.copy(ids = f_))
    def topks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.topks)((c_, f_) => c_.copy(topks = f_))
    def outputFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.outputFields)((c_, f_) => c_.copy(outputFields = f_))
    def groupByFieldValue: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FieldData] = field(_.getGroupByFieldValue)((c_, f_) => c_.copy(groupByFieldValue = _root_.scala.Option(f_)))
    def optionalGroupByFieldValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.FieldData]] = field(_.groupByFieldValue)((c_, f_) => c_.copy(groupByFieldValue = f_))
    def allSearchCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.allSearchCount)((c_, f_) => c_.copy(allSearchCount = f_))
    def distances: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.distances)((c_, f_) => c_.copy(distances = f_))
    def searchIteratorV2Results: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.SearchIteratorV2Results] = field(_.getSearchIteratorV2Results)((c_, f_) => c_.copy(searchIteratorV2Results = _root_.scala.Option(f_)))
    def optionalSearchIteratorV2Results: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.SearchIteratorV2Results]] = field(_.searchIteratorV2Results)((c_, f_) => c_.copy(searchIteratorV2Results = f_))
    def recalls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.recalls)((c_, f_) => c_.copy(recalls = f_))
    def primaryFieldName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.primaryFieldName)((c_, f_) => c_.copy(primaryFieldName = f_))
  }
  final val NUM_QUERIES_FIELD_NUMBER = 1
  final val TOP_K_FIELD_NUMBER = 2
  final val FIELDS_DATA_FIELD_NUMBER = 3
  final val SCORES_FIELD_NUMBER = 4
  final val IDS_FIELD_NUMBER = 5
  final val TOPKS_FIELD_NUMBER = 6
  final val OUTPUT_FIELDS_FIELD_NUMBER = 7
  final val GROUP_BY_FIELD_VALUE_FIELD_NUMBER = 8
  final val ALL_SEARCH_COUNT_FIELD_NUMBER = 9
  final val DISTANCES_FIELD_NUMBER = 10
  final val SEARCH_ITERATOR_V2_RESULTS_FIELD_NUMBER = 11
  final val RECALLS_FIELD_NUMBER = 12
  final val PRIMARY_FIELD_NAME_FIELD_NUMBER = 13
  def of(
    numQueries: _root_.scala.Long,
    topK: _root_.scala.Long,
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData],
    scores: _root_.scala.Seq[_root_.scala.Float],
    ids: _root_.scala.Option[io.milvus.grpc.schema.IDs],
    topks: _root_.scala.Seq[_root_.scala.Long],
    outputFields: _root_.scala.Seq[_root_.scala.Predef.String],
    groupByFieldValue: _root_.scala.Option[io.milvus.grpc.schema.FieldData],
    allSearchCount: _root_.scala.Long,
    distances: _root_.scala.Seq[_root_.scala.Float],
    searchIteratorV2Results: _root_.scala.Option[io.milvus.grpc.schema.SearchIteratorV2Results],
    recalls: _root_.scala.Seq[_root_.scala.Float],
    primaryFieldName: _root_.scala.Predef.String
  ): _root_.io.milvus.grpc.schema.SearchResultData = _root_.io.milvus.grpc.schema.SearchResultData(
    numQueries,
    topK,
    fieldsData,
    scores,
    ids,
    topks,
    outputFields,
    groupByFieldValue,
    allSearchCount,
    distances,
    searchIteratorV2Results,
    recalls,
    primaryFieldName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.SearchResultData])
}
