// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

/** @param dim
  *   For sparse vector, dim is the max dimension of the current batch of vectors
  */
@SerialVersionUID(0L)
final case class VectorField(
    dim: _root_.scala.Long = 0L,
    data: io.milvus.grpc.schema.VectorField.Data = io.milvus.grpc.schema.VectorField.Data.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[VectorField] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = dim
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      if (data.floatVector.isDefined) {
        val __value = data.floatVector.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.binaryVector.isDefined) {
        val __value = data.binaryVector.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
      };
      if (data.float16Vector.isDefined) {
        val __value = data.float16Vector.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
      };
      if (data.bfloat16Vector.isDefined) {
        val __value = data.bfloat16Vector.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, __value)
      };
      if (data.sparseFloatVector.isDefined) {
        val __value = data.sparseFloatVector.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.int8Vector.isDefined) {
        val __value = data.int8Vector.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(7, __value)
      };
      if (data.vectorArray.isDefined) {
        val __value = data.vectorArray.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = dim
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      data.floatVector.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.binaryVector.foreach { __v =>
        val __m = __v
        _output__.writeBytes(3, __m)
      };
      data.float16Vector.foreach { __v =>
        val __m = __v
        _output__.writeBytes(4, __m)
      };
      data.bfloat16Vector.foreach { __v =>
        val __m = __v
        _output__.writeBytes(5, __m)
      };
      data.sparseFloatVector.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.int8Vector.foreach { __v =>
        val __m = __v
        _output__.writeBytes(7, __m)
      };
      data.vectorArray.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDim(__v: _root_.scala.Long): VectorField = copy(dim = __v)
    def getFloatVector: io.milvus.grpc.schema.FloatArray = data.floatVector.getOrElse(io.milvus.grpc.schema.FloatArray.defaultInstance)
    def withFloatVector(__v: io.milvus.grpc.schema.FloatArray): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.FloatVector(__v))
    def getBinaryVector: _root_.com.google.protobuf.ByteString = data.binaryVector.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withBinaryVector(__v: _root_.com.google.protobuf.ByteString): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.BinaryVector(__v))
    def getFloat16Vector: _root_.com.google.protobuf.ByteString = data.float16Vector.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withFloat16Vector(__v: _root_.com.google.protobuf.ByteString): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.Float16Vector(__v))
    def getBfloat16Vector: _root_.com.google.protobuf.ByteString = data.bfloat16Vector.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withBfloat16Vector(__v: _root_.com.google.protobuf.ByteString): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.Bfloat16Vector(__v))
    def getSparseFloatVector: io.milvus.grpc.schema.SparseFloatArray = data.sparseFloatVector.getOrElse(io.milvus.grpc.schema.SparseFloatArray.defaultInstance)
    def withSparseFloatVector(__v: io.milvus.grpc.schema.SparseFloatArray): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.SparseFloatVector(__v))
    def getInt8Vector: _root_.com.google.protobuf.ByteString = data.int8Vector.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withInt8Vector(__v: _root_.com.google.protobuf.ByteString): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.Int8Vector(__v))
    def getVectorArray: io.milvus.grpc.schema.VectorArray = data.vectorArray.getOrElse(io.milvus.grpc.schema.VectorArray.defaultInstance)
    def withVectorArray(__v: io.milvus.grpc.schema.VectorArray): VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.VectorArray(__v))
    def clearData: VectorField = copy(data = io.milvus.grpc.schema.VectorField.Data.Empty)
    def withData(__v: io.milvus.grpc.schema.VectorField.Data): VectorField = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = dim
          if (__t != 0L) __t else null
        }
        case 2 => data.floatVector.orNull
        case 3 => data.binaryVector.orNull
        case 4 => data.float16Vector.orNull
        case 5 => data.bfloat16Vector.orNull
        case 6 => data.sparseFloatVector.orNull
        case 7 => data.int8Vector.orNull
        case 8 => data.vectorArray.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(dim)
        case 2 => data.floatVector.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.binaryVector.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.float16Vector.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.bfloat16Vector.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => data.sparseFloatVector.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => data.int8Vector.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => data.vectorArray.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.VectorField.type = io.milvus.grpc.schema.VectorField
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.VectorField])
}

object VectorField extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.VectorField] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.VectorField] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.VectorField = {
    var __dim: _root_.scala.Long = 0L
    var __data: io.milvus.grpc.schema.VectorField.Data = io.milvus.grpc.schema.VectorField.Data.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __dim = _input__.readInt64()
        case 18 =>
          __data = io.milvus.grpc.schema.VectorField.Data.FloatVector(__data.floatVector.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FloatArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __data = io.milvus.grpc.schema.VectorField.Data.BinaryVector(_input__.readBytes())
        case 34 =>
          __data = io.milvus.grpc.schema.VectorField.Data.Float16Vector(_input__.readBytes())
        case 42 =>
          __data = io.milvus.grpc.schema.VectorField.Data.Bfloat16Vector(_input__.readBytes())
        case 50 =>
          __data = io.milvus.grpc.schema.VectorField.Data.SparseFloatVector(__data.sparseFloatVector.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.SparseFloatArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __data = io.milvus.grpc.schema.VectorField.Data.Int8Vector(_input__.readBytes())
        case 66 =>
          __data = io.milvus.grpc.schema.VectorField.Data.VectorArray(__data.vectorArray.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.VectorArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.VectorField(
        dim = __dim,
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.VectorField] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.VectorField(
        dim = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.FloatArray]]).map(io.milvus.grpc.schema.VectorField.Data.FloatVector(_))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.milvus.grpc.schema.VectorField.Data.BinaryVector(_)))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.milvus.grpc.schema.VectorField.Data.Float16Vector(_)))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.milvus.grpc.schema.VectorField.Data.Bfloat16Vector(_)))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.SparseFloatArray]]).map(io.milvus.grpc.schema.VectorField.Data.SparseFloatVector(_)))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.milvus.grpc.schema.VectorField.Data.Int8Vector(_)))
            .orElse[io.milvus.grpc.schema.VectorField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.VectorArray]]).map(io.milvus.grpc.schema.VectorField.Data.VectorArray(_)))
            .getOrElse(io.milvus.grpc.schema.VectorField.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = io.milvus.grpc.schema.FloatArray
      case 6 => __out = io.milvus.grpc.schema.SparseFloatArray
      case 8 => __out = io.milvus.grpc.schema.VectorArray
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.VectorField(
    dim = 0L,
    data = io.milvus.grpc.schema.VectorField.Data.Empty
  )
  sealed abstract class Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isFloatVector: _root_.scala.Boolean = false
    def isBinaryVector: _root_.scala.Boolean = false
    def isFloat16Vector: _root_.scala.Boolean = false
    def isBfloat16Vector: _root_.scala.Boolean = false
    def isSparseFloatVector: _root_.scala.Boolean = false
    def isInt8Vector: _root_.scala.Boolean = false
    def isVectorArray: _root_.scala.Boolean = false
    def floatVector: _root_.scala.Option[io.milvus.grpc.schema.FloatArray] = _root_.scala.None
    def binaryVector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def float16Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def bfloat16Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def sparseFloatVector: _root_.scala.Option[io.milvus.grpc.schema.SparseFloatArray] = _root_.scala.None
    def int8Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def vectorArray: _root_.scala.Option[io.milvus.grpc.schema.VectorArray] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class FloatVector(value: io.milvus.grpc.schema.FloatArray) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = io.milvus.grpc.schema.FloatArray
      override def isFloatVector: _root_.scala.Boolean = true
      override def floatVector: _root_.scala.Option[io.milvus.grpc.schema.FloatArray] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class BinaryVector(value: _root_.com.google.protobuf.ByteString) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isBinaryVector: _root_.scala.Boolean = true
      override def binaryVector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Float16Vector(value: _root_.com.google.protobuf.ByteString) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isFloat16Vector: _root_.scala.Boolean = true
      override def float16Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Bfloat16Vector(value: _root_.com.google.protobuf.ByteString) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isBfloat16Vector: _root_.scala.Boolean = true
      override def bfloat16Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class SparseFloatVector(value: io.milvus.grpc.schema.SparseFloatArray) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = io.milvus.grpc.schema.SparseFloatArray
      override def isSparseFloatVector: _root_.scala.Boolean = true
      override def sparseFloatVector: _root_.scala.Option[io.milvus.grpc.schema.SparseFloatArray] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Int8Vector(value: _root_.com.google.protobuf.ByteString) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isInt8Vector: _root_.scala.Boolean = true
      override def int8Vector: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class VectorArray(value: io.milvus.grpc.schema.VectorArray) extends io.milvus.grpc.schema.VectorField.Data {
      type ValueType = io.milvus.grpc.schema.VectorArray
      override def isVectorArray: _root_.scala.Boolean = true
      override def vectorArray: _root_.scala.Option[io.milvus.grpc.schema.VectorArray] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class VectorFieldLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.VectorField]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.VectorField](_l) {
    def dim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dim)((c_, f_) => c_.copy(dim = f_))
    def floatVector: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.FloatArray] = field(_.getFloatVector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.FloatVector(f_)))
    def binaryVector: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getBinaryVector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.BinaryVector(f_)))
    def float16Vector: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getFloat16Vector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.Float16Vector(f_)))
    def bfloat16Vector: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getBfloat16Vector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.Bfloat16Vector(f_)))
    def sparseFloatVector: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.SparseFloatArray] = field(_.getSparseFloatVector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.SparseFloatVector(f_)))
    def int8Vector: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getInt8Vector)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.Int8Vector(f_)))
    def vectorArray: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.VectorArray] = field(_.getVectorArray)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.VectorField.Data.VectorArray(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.VectorField.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val DIM_FIELD_NUMBER = 1
  final val FLOAT_VECTOR_FIELD_NUMBER = 2
  final val BINARY_VECTOR_FIELD_NUMBER = 3
  final val FLOAT16_VECTOR_FIELD_NUMBER = 4
  final val BFLOAT16_VECTOR_FIELD_NUMBER = 5
  final val SPARSE_FLOAT_VECTOR_FIELD_NUMBER = 6
  final val INT8_VECTOR_FIELD_NUMBER = 7
  final val VECTOR_ARRAY_FIELD_NUMBER = 8
  def of(
    dim: _root_.scala.Long,
    data: io.milvus.grpc.schema.VectorField.Data
  ): _root_.io.milvus.grpc.schema.VectorField = _root_.io.milvus.grpc.schema.VectorField(
    dim,
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.VectorField])
}
