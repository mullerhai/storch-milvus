// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class ArrayArray(
    data: _root_.scala.Seq[io.milvus.grpc.schema.ScalarField] = _root_.scala.Seq.empty,
    elementType: io.milvus.grpc.schema.DataType = io.milvus.grpc.schema.DataType.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ArrayArray] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      data.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = elementType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = elementType.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearData = copy(data = _root_.scala.Seq.empty)
    def addData(__vs: io.milvus.grpc.schema.ScalarField *): ArrayArray = addAllData(__vs)
    def addAllData(__vs: Iterable[io.milvus.grpc.schema.ScalarField]): ArrayArray = copy(data = data ++ __vs)
    def withData(__v: _root_.scala.Seq[io.milvus.grpc.schema.ScalarField]): ArrayArray = copy(data = __v)
    def withElementType(__v: io.milvus.grpc.schema.DataType): ArrayArray = copy(elementType = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data
        case 2 => {
          val __t = elementType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(data.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PEnum(elementType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.ArrayArray.type = io.milvus.grpc.schema.ArrayArray
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.ArrayArray])
}

object ArrayArray extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.ArrayArray] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.ArrayArray] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.ArrayArray = {
    val __data: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.ScalarField] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.ScalarField]
    var __elementType: io.milvus.grpc.schema.DataType = io.milvus.grpc.schema.DataType.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __data += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.ScalarField](_input__)
        case 16 =>
          __elementType = io.milvus.grpc.schema.DataType.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.ArrayArray(
        data = __data.result(),
        elementType = __elementType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.ArrayArray] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.ArrayArray(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.ScalarField]]).getOrElse(_root_.scala.Seq.empty),
        elementType = io.milvus.grpc.schema.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.schema.DataType.None.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.schema.ScalarField
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.milvus.grpc.schema.DataType
    }
  }
  lazy val defaultInstance = io.milvus.grpc.schema.ArrayArray(
    data = _root_.scala.Seq.empty,
    elementType = io.milvus.grpc.schema.DataType.None
  )
  implicit class ArrayArrayLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.ArrayArray]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.ArrayArray](_l) {
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.ScalarField]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def elementType: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.DataType] = field(_.elementType)((c_, f_) => c_.copy(elementType = f_))
  }
  final val DATA_FIELD_NUMBER = 1
  final val ELEMENT_TYPE_FIELD_NUMBER = 2
  def of(
    data: _root_.scala.Seq[io.milvus.grpc.schema.ScalarField],
    elementType: io.milvus.grpc.schema.DataType
  ): _root_.io.milvus.grpc.schema.ArrayArray = _root_.io.milvus.grpc.schema.ArrayArray(
    data,
    elementType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.ArrayArray])
}
