// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class TemplateValue(
    `val`: io.milvus.grpc.schema.TemplateValue.Val = io.milvus.grpc.schema.TemplateValue.Val.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TemplateValue] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (`val`.boolVal.isDefined) {
        val __value = `val`.boolVal.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
      };
      if (`val`.int64Val.isDefined) {
        val __value = `val`.int64Val.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (`val`.floatVal.isDefined) {
        val __value = `val`.floatVal.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
      };
      if (`val`.stringVal.isDefined) {
        val __value = `val`.stringVal.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      if (`val`.arrayVal.isDefined) {
        val __value = `val`.arrayVal.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `val`.boolVal.foreach { __v =>
        val __m = __v
        _output__.writeBool(1, __m)
      };
      `val`.int64Val.foreach { __v =>
        val __m = __v
        _output__.writeInt64(2, __m)
      };
      `val`.floatVal.foreach { __v =>
        val __m = __v
        _output__.writeDouble(3, __m)
      };
      `val`.stringVal.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      `val`.arrayVal.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBoolVal: _root_.scala.Boolean = `val`.boolVal.getOrElse(false)
    def withBoolVal(__v: _root_.scala.Boolean): TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.BoolVal(__v))
    def getInt64Val: _root_.scala.Long = `val`.int64Val.getOrElse(0L)
    def withInt64Val(__v: _root_.scala.Long): TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.Int64Val(__v))
    def getFloatVal: _root_.scala.Double = `val`.floatVal.getOrElse(0.0)
    def withFloatVal(__v: _root_.scala.Double): TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.FloatVal(__v))
    def getStringVal: _root_.scala.Predef.String = `val`.stringVal.getOrElse("")
    def withStringVal(__v: _root_.scala.Predef.String): TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.StringVal(__v))
    def getArrayVal: io.milvus.grpc.schema.TemplateArrayValue = `val`.arrayVal.getOrElse(io.milvus.grpc.schema.TemplateArrayValue.defaultInstance)
    def withArrayVal(__v: io.milvus.grpc.schema.TemplateArrayValue): TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.ArrayVal(__v))
    def clearVal: TemplateValue = copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.Empty)
    def withVal(__v: io.milvus.grpc.schema.TemplateValue.Val): TemplateValue = copy(`val` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `val`.boolVal.orNull
        case 2 => `val`.int64Val.orNull
        case 3 => `val`.floatVal.orNull
        case 4 => `val`.stringVal.orNull
        case 5 => `val`.arrayVal.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `val`.boolVal.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `val`.int64Val.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => `val`.floatVal.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => `val`.stringVal.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `val`.arrayVal.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.TemplateValue.type = io.milvus.grpc.schema.TemplateValue
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.TemplateValue])
}

object TemplateValue extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.TemplateValue] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.TemplateValue] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.TemplateValue = {
    var __val: io.milvus.grpc.schema.TemplateValue.Val = io.milvus.grpc.schema.TemplateValue.Val.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __val = io.milvus.grpc.schema.TemplateValue.Val.BoolVal(_input__.readBool())
        case 16 =>
          __val = io.milvus.grpc.schema.TemplateValue.Val.Int64Val(_input__.readInt64())
        case 25 =>
          __val = io.milvus.grpc.schema.TemplateValue.Val.FloatVal(_input__.readDouble())
        case 34 =>
          __val = io.milvus.grpc.schema.TemplateValue.Val.StringVal(_input__.readStringRequireUtf8())
        case 42 =>
          __val = io.milvus.grpc.schema.TemplateValue.Val.ArrayVal(__val.arrayVal.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.TemplateArrayValue](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.TemplateValue(
        `val` = __val,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.TemplateValue] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.TemplateValue(
        `val` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]).map(io.milvus.grpc.schema.TemplateValue.Val.BoolVal(_))
            .orElse[io.milvus.grpc.schema.TemplateValue.Val](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.milvus.grpc.schema.TemplateValue.Val.Int64Val(_)))
            .orElse[io.milvus.grpc.schema.TemplateValue.Val](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(io.milvus.grpc.schema.TemplateValue.Val.FloatVal(_)))
            .orElse[io.milvus.grpc.schema.TemplateValue.Val](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.milvus.grpc.schema.TemplateValue.Val.StringVal(_)))
            .orElse[io.milvus.grpc.schema.TemplateValue.Val](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValue]]).map(io.milvus.grpc.schema.TemplateValue.Val.ArrayVal(_)))
            .getOrElse(io.milvus.grpc.schema.TemplateValue.Val.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(28)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(28)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = io.milvus.grpc.schema.TemplateArrayValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.TemplateValue(
    `val` = io.milvus.grpc.schema.TemplateValue.Val.Empty
  )
  sealed abstract class Val extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBoolVal: _root_.scala.Boolean = false
    def isInt64Val: _root_.scala.Boolean = false
    def isFloatVal: _root_.scala.Boolean = false
    def isStringVal: _root_.scala.Boolean = false
    def isArrayVal: _root_.scala.Boolean = false
    def boolVal: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    def int64Val: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    def floatVal: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
    def stringVal: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def arrayVal: _root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValue] = _root_.scala.None
  }
  object Val {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BoolVal(value: _root_.scala.Boolean) extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = _root_.scala.Boolean
      override def isBoolVal: _root_.scala.Boolean = true
      override def boolVal: _root_.scala.Option[_root_.scala.Boolean] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Int64Val(value: _root_.scala.Long) extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = _root_.scala.Long
      override def isInt64Val: _root_.scala.Boolean = true
      override def int64Val: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class FloatVal(value: _root_.scala.Double) extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = _root_.scala.Double
      override def isFloatVal: _root_.scala.Boolean = true
      override def floatVal: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class StringVal(value: _root_.scala.Predef.String) extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = _root_.scala.Predef.String
      override def isStringVal: _root_.scala.Boolean = true
      override def stringVal: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class ArrayVal(value: io.milvus.grpc.schema.TemplateArrayValue) extends io.milvus.grpc.schema.TemplateValue.Val {
      type ValueType = io.milvus.grpc.schema.TemplateArrayValue
      override def isArrayVal: _root_.scala.Boolean = true
      override def arrayVal: _root_.scala.Option[io.milvus.grpc.schema.TemplateArrayValue] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  implicit class TemplateValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateValue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.TemplateValue](_l) {
    def boolVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getBoolVal)((c_, f_) => c_.copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.BoolVal(f_)))
    def int64Val: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getInt64Val)((c_, f_) => c_.copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.Int64Val(f_)))
    def floatVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getFloatVal)((c_, f_) => c_.copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.FloatVal(f_)))
    def stringVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStringVal)((c_, f_) => c_.copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.StringVal(f_)))
    def arrayVal: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateArrayValue] = field(_.getArrayVal)((c_, f_) => c_.copy(`val` = io.milvus.grpc.schema.TemplateValue.Val.ArrayVal(f_)))
    def `val`: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.TemplateValue.Val] = field(_.`val`)((c_, f_) => c_.copy(`val` = f_))
  }
  final val BOOL_VAL_FIELD_NUMBER = 1
  final val INT64_VAL_FIELD_NUMBER = 2
  final val FLOAT_VAL_FIELD_NUMBER = 3
  final val STRING_VAL_FIELD_NUMBER = 4
  final val ARRAY_VAL_FIELD_NUMBER = 5
  def of(
    `val`: io.milvus.grpc.schema.TemplateValue.Val
  ): _root_.io.milvus.grpc.schema.TemplateValue = _root_.io.milvus.grpc.schema.TemplateValue(
    `val`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.TemplateValue])
}
