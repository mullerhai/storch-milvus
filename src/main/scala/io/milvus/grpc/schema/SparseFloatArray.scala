// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

/** beta, api may change
  *
  * @param dim
  *   dim is the max dimension of the current batch of vectors
  */
@SerialVersionUID(0L)
final case class SparseFloatArray(
    contents: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty,
    dim: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SparseFloatArray] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      contents.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
      }
      
      {
        val __value = dim
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      contents.foreach { __v =>
        val __m = __v
        _output__.writeBytes(1, __m)
      };
      {
        val __v = dim
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearContents = copy(contents = _root_.scala.Seq.empty)
    def addContents(__vs: _root_.com.google.protobuf.ByteString *): SparseFloatArray = addAllContents(__vs)
    def addAllContents(__vs: Iterable[_root_.com.google.protobuf.ByteString]): SparseFloatArray = copy(contents = contents ++ __vs)
    def withContents(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): SparseFloatArray = copy(contents = __v)
    def withDim(__v: _root_.scala.Long): SparseFloatArray = copy(dim = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => contents
        case 2 => {
          val __t = dim
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(contents.iterator.map(_root_.scalapb.descriptors.PByteString(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PLong(dim)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.SparseFloatArray.type = io.milvus.grpc.schema.SparseFloatArray
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.SparseFloatArray])
}

object SparseFloatArray extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.SparseFloatArray] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.SparseFloatArray] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.SparseFloatArray = {
    val __contents: _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString] = new _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString]
    var __dim: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __contents += _input__.readBytes()
        case 16 =>
          __dim = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.SparseFloatArray(
        contents = __contents.result(),
        dim = __dim,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.SparseFloatArray] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.SparseFloatArray(
        contents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty),
        dim = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.SparseFloatArray(
    contents = _root_.scala.Seq.empty,
    dim = 0L
  )
  implicit class SparseFloatArrayLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.SparseFloatArray]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.SparseFloatArray](_l) {
    def contents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.contents)((c_, f_) => c_.copy(contents = f_))
    def dim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dim)((c_, f_) => c_.copy(dim = f_))
  }
  final val CONTENTS_FIELD_NUMBER = 1
  final val DIM_FIELD_NUMBER = 2
  def of(
    contents: _root_.scala.Seq[_root_.com.google.protobuf.ByteString],
    dim: _root_.scala.Long
  ): _root_.io.milvus.grpc.schema.SparseFloatArray = _root_.io.milvus.grpc.schema.SparseFloatArray(
    contents,
    dim
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.SparseFloatArray])
}
