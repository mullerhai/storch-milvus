// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.schema

@SerialVersionUID(0L)
final case class ValueField(
    data: io.milvus.grpc.schema.ValueField.Data = io.milvus.grpc.schema.ValueField.Data.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ValueField] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (data.boolData.isDefined) {
        val __value = data.boolData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
      };
      if (data.intData.isDefined) {
        val __value = data.intData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (data.longData.isDefined) {
        val __value = data.longData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      if (data.floatData.isDefined) {
        val __value = data.floatData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
      };
      if (data.doubleData.isDefined) {
        val __value = data.doubleData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, __value)
      };
      if (data.stringData.isDefined) {
        val __value = data.stringData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      if (data.bytesData.isDefined) {
        val __value = data.bytesData.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(7, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.boolData.foreach { __v =>
        val __m = __v
        _output__.writeBool(1, __m)
      };
      data.intData.foreach { __v =>
        val __m = __v
        _output__.writeInt32(2, __m)
      };
      data.longData.foreach { __v =>
        val __m = __v
        _output__.writeInt64(3, __m)
      };
      data.floatData.foreach { __v =>
        val __m = __v
        _output__.writeFloat(4, __m)
      };
      data.doubleData.foreach { __v =>
        val __m = __v
        _output__.writeDouble(5, __m)
      };
      data.stringData.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      data.bytesData.foreach { __v =>
        val __m = __v
        _output__.writeBytes(7, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getBoolData: _root_.scala.Boolean = data.boolData.getOrElse(false)
    def withBoolData(__v: _root_.scala.Boolean): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.BoolData(__v))
    def getIntData: _root_.scala.Int = data.intData.getOrElse(0)
    def withIntData(__v: _root_.scala.Int): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.IntData(__v))
    def getLongData: _root_.scala.Long = data.longData.getOrElse(0L)
    def withLongData(__v: _root_.scala.Long): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.LongData(__v))
    def getFloatData: _root_.scala.Float = data.floatData.getOrElse(0.0f)
    def withFloatData(__v: _root_.scala.Float): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.FloatData(__v))
    def getDoubleData: _root_.scala.Double = data.doubleData.getOrElse(0.0)
    def withDoubleData(__v: _root_.scala.Double): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.DoubleData(__v))
    def getStringData: _root_.scala.Predef.String = data.stringData.getOrElse("")
    def withStringData(__v: _root_.scala.Predef.String): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.StringData(__v))
    def getBytesData: _root_.com.google.protobuf.ByteString = data.bytesData.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withBytesData(__v: _root_.com.google.protobuf.ByteString): ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.BytesData(__v))
    def clearData: ValueField = copy(data = io.milvus.grpc.schema.ValueField.Data.Empty)
    def withData(__v: io.milvus.grpc.schema.ValueField.Data): ValueField = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data.boolData.orNull
        case 2 => data.intData.orNull
        case 3 => data.longData.orNull
        case 4 => data.floatData.orNull
        case 5 => data.doubleData.orNull
        case 6 => data.stringData.orNull
        case 7 => data.bytesData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => data.boolData.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.intData.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.longData.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.floatData.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.doubleData.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => data.stringData.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => data.bytesData.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.schema.ValueField.type = io.milvus.grpc.schema.ValueField
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.schema.ValueField])
}

object ValueField extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.ValueField] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.schema.ValueField] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.schema.ValueField = {
    var __data: io.milvus.grpc.schema.ValueField.Data = io.milvus.grpc.schema.ValueField.Data.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __data = io.milvus.grpc.schema.ValueField.Data.BoolData(_input__.readBool())
        case 16 =>
          __data = io.milvus.grpc.schema.ValueField.Data.IntData(_input__.readInt32())
        case 24 =>
          __data = io.milvus.grpc.schema.ValueField.Data.LongData(_input__.readInt64())
        case 37 =>
          __data = io.milvus.grpc.schema.ValueField.Data.FloatData(_input__.readFloat())
        case 41 =>
          __data = io.milvus.grpc.schema.ValueField.Data.DoubleData(_input__.readDouble())
        case 50 =>
          __data = io.milvus.grpc.schema.ValueField.Data.StringData(_input__.readStringRequireUtf8())
        case 58 =>
          __data = io.milvus.grpc.schema.ValueField.Data.BytesData(_input__.readBytes())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.schema.ValueField(
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.schema.ValueField] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.schema.ValueField(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]).map(io.milvus.grpc.schema.ValueField.Data.BoolData(_))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.milvus.grpc.schema.ValueField.Data.IntData(_)))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.milvus.grpc.schema.ValueField.Data.LongData(_)))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]).map(io.milvus.grpc.schema.ValueField.Data.FloatData(_)))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(io.milvus.grpc.schema.ValueField.Data.DoubleData(_)))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.milvus.grpc.schema.ValueField.Data.StringData(_)))
            .orElse[io.milvus.grpc.schema.ValueField.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.milvus.grpc.schema.ValueField.Data.BytesData(_)))
            .getOrElse(io.milvus.grpc.schema.ValueField.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.javaDescriptor.getMessageTypes().get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.schema.SchemaProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.schema.ValueField(
    data = io.milvus.grpc.schema.ValueField.Data.Empty
  )
  sealed abstract class Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBoolData: _root_.scala.Boolean = false
    def isIntData: _root_.scala.Boolean = false
    def isLongData: _root_.scala.Boolean = false
    def isFloatData: _root_.scala.Boolean = false
    def isDoubleData: _root_.scala.Boolean = false
    def isStringData: _root_.scala.Boolean = false
    def isBytesData: _root_.scala.Boolean = false
    def boolData: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    def intData: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    def longData: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    def floatData: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None
    def doubleData: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
    def stringData: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def bytesData: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BoolData(value: _root_.scala.Boolean) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Boolean
      override def isBoolData: _root_.scala.Boolean = true
      override def boolData: _root_.scala.Option[_root_.scala.Boolean] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class IntData(value: _root_.scala.Int) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Int
      override def isIntData: _root_.scala.Boolean = true
      override def intData: _root_.scala.Option[_root_.scala.Int] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class LongData(value: _root_.scala.Long) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Long
      override def isLongData: _root_.scala.Boolean = true
      override def longData: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class FloatData(value: _root_.scala.Float) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Float
      override def isFloatData: _root_.scala.Boolean = true
      override def floatData: _root_.scala.Option[_root_.scala.Float] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class DoubleData(value: _root_.scala.Double) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Double
      override def isDoubleData: _root_.scala.Boolean = true
      override def doubleData: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class StringData(value: _root_.scala.Predef.String) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.scala.Predef.String
      override def isStringData: _root_.scala.Boolean = true
      override def stringData: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class BytesData(value: _root_.com.google.protobuf.ByteString) extends io.milvus.grpc.schema.ValueField.Data {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isBytesData: _root_.scala.Boolean = true
      override def bytesData: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 7
    }
  }
  implicit class ValueFieldLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.ValueField]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.schema.ValueField](_l) {
    def boolData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getBoolData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.BoolData(f_)))
    def intData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getIntData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.IntData(f_)))
    def longData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLongData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.LongData(f_)))
    def floatData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getFloatData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.FloatData(f_)))
    def doubleData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getDoubleData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.DoubleData(f_)))
    def stringData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStringData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.StringData(f_)))
    def bytesData: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getBytesData)((c_, f_) => c_.copy(data = io.milvus.grpc.schema.ValueField.Data.BytesData(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.ValueField.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val BOOL_DATA_FIELD_NUMBER = 1
  final val INT_DATA_FIELD_NUMBER = 2
  final val LONG_DATA_FIELD_NUMBER = 3
  final val FLOAT_DATA_FIELD_NUMBER = 4
  final val DOUBLE_DATA_FIELD_NUMBER = 5
  final val STRING_DATA_FIELD_NUMBER = 6
  final val BYTES_DATA_FIELD_NUMBER = 7
  def of(
    data: io.milvus.grpc.schema.ValueField.Data
  ): _root_.io.milvus.grpc.schema.ValueField = _root_.io.milvus.grpc.schema.ValueField(
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.schema.ValueField])
}
