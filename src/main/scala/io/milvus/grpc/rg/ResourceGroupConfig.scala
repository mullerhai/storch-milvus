// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.rg

/** @param requests
  *   requests node num in resource group, if node num is less than requests.nodeNum, it will be transfer from other resource group.
  * @param limits
  *   limited node num in resource group, if node num is more than limits.nodeNum, it will be transfer to other resource group.
  * @param transferFrom
  *   missing node should be transfer from given resource group at high priority in repeated list.
  * @param transferTo
  *   redundant node should be transfer to given resource group at high priority in repeated list.
  * @param nodeFilter
  *   node in resource group must match node filters
  */
@SerialVersionUID(0L)
final case class ResourceGroupConfig(
    requests: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit] = _root_.scala.None,
    limits: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit] = _root_.scala.None,
    transferFrom: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer] = _root_.scala.Seq.empty,
    transferTo: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer] = _root_.scala.Seq.empty,
    nodeFilter: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupNodeFilter] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ResourceGroupConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (requests.isDefined) {
        val __value = requests.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (limits.isDefined) {
        val __value = limits.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      transferFrom.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      transferTo.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (nodeFilter.isDefined) {
        val __value = nodeFilter.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      requests.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      limits.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      transferFrom.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      transferTo.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      nodeFilter.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getRequests: io.milvus.grpc.rg.ResourceGroupLimit = requests.getOrElse(io.milvus.grpc.rg.ResourceGroupLimit.defaultInstance)
    def clearRequests: ResourceGroupConfig = copy(requests = _root_.scala.None)
    def withRequests(__v: io.milvus.grpc.rg.ResourceGroupLimit): ResourceGroupConfig = copy(requests = Option(__v))
    def getLimits: io.milvus.grpc.rg.ResourceGroupLimit = limits.getOrElse(io.milvus.grpc.rg.ResourceGroupLimit.defaultInstance)
    def clearLimits: ResourceGroupConfig = copy(limits = _root_.scala.None)
    def withLimits(__v: io.milvus.grpc.rg.ResourceGroupLimit): ResourceGroupConfig = copy(limits = Option(__v))
    def clearTransferFrom = copy(transferFrom = _root_.scala.Seq.empty)
    def addTransferFrom(__vs: io.milvus.grpc.rg.ResourceGroupTransfer *): ResourceGroupConfig = addAllTransferFrom(__vs)
    def addAllTransferFrom(__vs: Iterable[io.milvus.grpc.rg.ResourceGroupTransfer]): ResourceGroupConfig = copy(transferFrom = transferFrom ++ __vs)
    def withTransferFrom(__v: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]): ResourceGroupConfig = copy(transferFrom = __v)
    def clearTransferTo = copy(transferTo = _root_.scala.Seq.empty)
    def addTransferTo(__vs: io.milvus.grpc.rg.ResourceGroupTransfer *): ResourceGroupConfig = addAllTransferTo(__vs)
    def addAllTransferTo(__vs: Iterable[io.milvus.grpc.rg.ResourceGroupTransfer]): ResourceGroupConfig = copy(transferTo = transferTo ++ __vs)
    def withTransferTo(__v: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]): ResourceGroupConfig = copy(transferTo = __v)
    def getNodeFilter: io.milvus.grpc.rg.ResourceGroupNodeFilter = nodeFilter.getOrElse(io.milvus.grpc.rg.ResourceGroupNodeFilter.defaultInstance)
    def clearNodeFilter: ResourceGroupConfig = copy(nodeFilter = _root_.scala.None)
    def withNodeFilter(__v: io.milvus.grpc.rg.ResourceGroupNodeFilter): ResourceGroupConfig = copy(nodeFilter = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => requests.orNull
        case 2 => limits.orNull
        case 3 => transferFrom
        case 4 => transferTo
        case 5 => nodeFilter.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => requests.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => limits.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(transferFrom.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(transferTo.iterator.map(_.toPMessage).toVector)
        case 5 => nodeFilter.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.rg.ResourceGroupConfig.type = io.milvus.grpc.rg.ResourceGroupConfig
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.rg.ResourceGroupConfig])
}

object ResourceGroupConfig extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.rg.ResourceGroupConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.rg.ResourceGroupConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.rg.ResourceGroupConfig = {
    var __requests: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit] = _root_.scala.None
    var __limits: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit] = _root_.scala.None
    val __transferFrom: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.rg.ResourceGroupTransfer] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.rg.ResourceGroupTransfer]
    val __transferTo: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.rg.ResourceGroupTransfer] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.rg.ResourceGroupTransfer]
    var __nodeFilter: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupNodeFilter] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __requests = _root_.scala.Option(__requests.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupLimit](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __limits = _root_.scala.Option(__limits.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupLimit](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __transferFrom += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupTransfer](_input__)
        case 34 =>
          __transferTo += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupTransfer](_input__)
        case 42 =>
          __nodeFilter = _root_.scala.Option(__nodeFilter.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupNodeFilter](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.rg.ResourceGroupConfig(
        requests = __requests,
        limits = __limits,
        transferFrom = __transferFrom.result(),
        transferTo = __transferTo.result(),
        nodeFilter = __nodeFilter,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.rg.ResourceGroupConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.rg.ResourceGroupConfig(
        requests = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit]]),
        limits = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit]]),
        transferFrom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]]).getOrElse(_root_.scala.Seq.empty),
        transferTo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]]).getOrElse(_root_.scala.Seq.empty),
        nodeFilter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.rg.ResourceGroupNodeFilter]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.rg.RgProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.rg.RgProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.rg.ResourceGroupLimit
      case 2 => __out = io.milvus.grpc.rg.ResourceGroupLimit
      case 3 => __out = io.milvus.grpc.rg.ResourceGroupTransfer
      case 4 => __out = io.milvus.grpc.rg.ResourceGroupTransfer
      case 5 => __out = io.milvus.grpc.rg.ResourceGroupNodeFilter
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.rg.ResourceGroupConfig(
    requests = _root_.scala.None,
    limits = _root_.scala.None,
    transferFrom = _root_.scala.Seq.empty,
    transferTo = _root_.scala.Seq.empty,
    nodeFilter = _root_.scala.None
  )
  implicit class ResourceGroupConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.rg.ResourceGroupConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.rg.ResourceGroupConfig](_l) {
    def requests: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.rg.ResourceGroupLimit] = field(_.getRequests)((c_, f_) => c_.copy(requests = _root_.scala.Option(f_)))
    def optionalRequests: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit]] = field(_.requests)((c_, f_) => c_.copy(requests = f_))
    def limits: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.rg.ResourceGroupLimit] = field(_.getLimits)((c_, f_) => c_.copy(limits = _root_.scala.Option(f_)))
    def optionalLimits: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit]] = field(_.limits)((c_, f_) => c_.copy(limits = f_))
    def transferFrom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]] = field(_.transferFrom)((c_, f_) => c_.copy(transferFrom = f_))
    def transferTo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer]] = field(_.transferTo)((c_, f_) => c_.copy(transferTo = f_))
    def nodeFilter: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.rg.ResourceGroupNodeFilter] = field(_.getNodeFilter)((c_, f_) => c_.copy(nodeFilter = _root_.scala.Option(f_)))
    def optionalNodeFilter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupNodeFilter]] = field(_.nodeFilter)((c_, f_) => c_.copy(nodeFilter = f_))
  }
  final val REQUESTS_FIELD_NUMBER = 1
  final val LIMITS_FIELD_NUMBER = 2
  final val TRANSFER_FROM_FIELD_NUMBER = 3
  final val TRANSFER_TO_FIELD_NUMBER = 4
  final val NODE_FILTER_FIELD_NUMBER = 5
  def of(
    requests: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit],
    limits: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupLimit],
    transferFrom: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer],
    transferTo: _root_.scala.Seq[io.milvus.grpc.rg.ResourceGroupTransfer],
    nodeFilter: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupNodeFilter]
  ): _root_.io.milvus.grpc.rg.ResourceGroupConfig = _root_.io.milvus.grpc.rg.ResourceGroupConfig(
    requests,
    limits,
    transferFrom,
    transferTo,
    nodeFilter
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.rg.ResourceGroupConfig])
}
