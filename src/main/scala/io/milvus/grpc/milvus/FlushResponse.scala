// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

import milvus.proto.msg
import milvus.proto.msg.MsgPosition

/** @param collSealTimes
  *   physical time for backup tool
  * @param collFlushTs
  *   hybrid ts for geting flush tate
  */
@SerialVersionUID(0L)
final case class FlushResponse(
                                status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
                                dbName: _root_.scala.Predef.String = "",
                                collSegIDs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray] = _root_.scala.collection.immutable.Map.empty,
                                flushCollSegIDs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray] = _root_.scala.collection.immutable.Map.empty,
                                collSealTimes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
                                collFlushTs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
                                channelCps: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, MsgPosition] = _root_.scala.collection.immutable.Map.empty,
                                unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FlushResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      collSegIDs.foreach { __item =>
        val __value = io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      flushCollSegIDs.foreach { __item =>
        val __value = io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      collSealTimes.foreach { __item =>
        val __value = io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      collFlushTs.foreach { __item =>
        val __value = io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      channelCps.foreach { __item =>
        val __value = io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      collSegIDs.foreach { __v =>
        val __m = io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      flushCollSegIDs.foreach { __v =>
        val __m = io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      collSealTimes.foreach { __v =>
        val __m = io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      collFlushTs.foreach { __v =>
        val __m = io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      channelCps.foreach { __v =>
        val __m = io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: FlushResponse = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): FlushResponse = copy(status = Option(__v))
    def withDbName(__v: _root_.scala.Predef.String): FlushResponse = copy(dbName = __v)
    def clearCollSegIDs = copy(collSegIDs = _root_.scala.collection.immutable.Map.empty)
    def addCollSegIDs(__vs: (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray) *): FlushResponse = addAllCollSegIDs(__vs)
    def addAllCollSegIDs(__vs: Iterable[(_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)]): FlushResponse = copy(collSegIDs = collSegIDs ++ __vs)
    def withCollSegIDs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]): FlushResponse = copy(collSegIDs = __v)
    def clearFlushCollSegIDs = copy(flushCollSegIDs = _root_.scala.collection.immutable.Map.empty)
    def addFlushCollSegIDs(__vs: (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray) *): FlushResponse = addAllFlushCollSegIDs(__vs)
    def addAllFlushCollSegIDs(__vs: Iterable[(_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)]): FlushResponse = copy(flushCollSegIDs = flushCollSegIDs ++ __vs)
    def withFlushCollSegIDs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]): FlushResponse = copy(flushCollSegIDs = __v)
    def clearCollSealTimes = copy(collSealTimes = _root_.scala.collection.immutable.Map.empty)
    def addCollSealTimes(__vs: (_root_.scala.Predef.String, _root_.scala.Long) *): FlushResponse = addAllCollSealTimes(__vs)
    def addAllCollSealTimes(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Long)]): FlushResponse = copy(collSealTimes = collSealTimes ++ __vs)
    def withCollSealTimes(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]): FlushResponse = copy(collSealTimes = __v)
    def clearCollFlushTs = copy(collFlushTs = _root_.scala.collection.immutable.Map.empty)
    def addCollFlushTs(__vs: (_root_.scala.Predef.String, _root_.scala.Long) *): FlushResponse = addAllCollFlushTs(__vs)
    def addAllCollFlushTs(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Long)]): FlushResponse = copy(collFlushTs = collFlushTs ++ __vs)
    def withCollFlushTs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]): FlushResponse = copy(collFlushTs = __v)
    def clearChannelCps = copy(channelCps = _root_.scala.collection.immutable.Map.empty)
    def addChannelCps(__vs: (_root_.scala.Predef.String, MsgPosition) *): FlushResponse = addAllChannelCps(__vs)
    def addAllChannelCps(__vs: Iterable[(_root_.scala.Predef.String, MsgPosition)]): FlushResponse = copy(channelCps = channelCps ++ __vs)
    def withChannelCps(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, MsgPosition]): FlushResponse = copy(channelCps = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 3 => collSegIDs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toBase(_)).toSeq
        case 4 => flushCollSegIDs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toBase(_)).toSeq
        case 5 => collSealTimes.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toBase(_)).toSeq
        case 6 => collFlushTs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toBase(_)).toSeq
        case 7 => channelCps.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(dbName)
        case 3 => _root_.scalapb.descriptors.PRepeated(collSegIDs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(flushCollSegIDs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toBase(_).toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(collSealTimes.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toBase(_).toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(collFlushTs.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(channelCps.iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.FlushResponse.type = io.milvus.grpc.milvus.FlushResponse
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse])
}

object FlushResponse extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    var __dbName: _root_.scala.Predef.String = ""
    val __collSegIDs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]
    val __flushCollSegIDs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]
    val __collSealTimes: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Long]
    val __collFlushTs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Long]
    val __channelCps: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, MsgPosition), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, MsgPosition]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, MsgPosition]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __dbName = _input__.readStringRequireUtf8()
        case 26 =>
          __collSegIDs += io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry](_input__))
        case 34 =>
          __flushCollSegIDs += io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry](_input__))
        case 42 =>
          __collSealTimes += io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry](_input__))
        case 50 =>
          __collFlushTs += io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry](_input__))
        case 58 =>
          __channelCps += io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.FlushResponse(
        status = __status,
        dbName = __dbName,
        collSegIDs = __collSegIDs.result(),
        flushCollSegIDs = __flushCollSegIDs.result(),
        collSealTimes = __collSealTimes.result(),
        collFlushTs = __collFlushTs.result(),
        channelCps = __channelCps.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.FlushResponse(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collSegIDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSegIDs.toCustom(_)).toMap,
        flushCollSegIDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_flushCollSegIDs.toCustom(_)).toMap,
        collSealTimes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collSealTimes.toCustom(_)).toMap,
        collFlushTs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_collFlushTs.toCustom(_)).toMap,
        channelCps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.FlushResponse._typemapper_channelCps.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(60)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(60)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
      case 3 => __out = io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry
      case 4 => __out = io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry
      case 5 => __out = io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry
      case 6 => __out = io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry
      case 7 => __out = io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry,
      _root_.io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry,
      _root_.io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry,
      _root_.io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry,
      _root_.io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse(
    status = _root_.scala.None,
    dbName = "",
    collSegIDs = _root_.scala.collection.immutable.Map.empty,
    flushCollSegIDs = _root_.scala.collection.immutable.Map.empty,
    collSealTimes = _root_.scala.collection.immutable.Map.empty,
    collFlushTs = _root_.scala.collection.immutable.Map.empty,
    channelCps = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class CollSegIDsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CollSegIDsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CollSegIDsEntry = copy(key = __v)
      def getValue: io.milvus.grpc.schema.LongArray = value.getOrElse(io.milvus.grpc.schema.LongArray.defaultInstance)
      def clearValue: CollSegIDsEntry = copy(value = _root_.scala.None)
      def withValue(__v: io.milvus.grpc.schema.LongArray): CollSegIDsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry.type = io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse.CollSegIDsEntry])
  }
  
  object CollSegIDsEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.LongArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.LongArray]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = io.milvus.grpc.schema.LongArray
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class CollSegIDsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.LongArray] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.LongArray]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)](__m => (__m.key, __m.getValue))(__p => io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[io.milvus.grpc.schema.LongArray]
    ): _root_.io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry = _root_.io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse.CollSegIDsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class FlushCollSegIDsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FlushCollSegIDsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): FlushCollSegIDsEntry = copy(key = __v)
      def getValue: io.milvus.grpc.schema.LongArray = value.getOrElse(io.milvus.grpc.schema.LongArray.defaultInstance)
      def clearValue: FlushCollSegIDsEntry = copy(value = _root_.scala.None)
      def withValue(__v: io.milvus.grpc.schema.LongArray): FlushCollSegIDsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry.type = io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse.FlushCollSegIDsEntry])
  }
  
  object FlushCollSegIDsEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[io.milvus.grpc.schema.LongArray] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.LongArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.LongArray]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = io.milvus.grpc.schema.LongArray
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class FlushCollSegIDsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.LongArray] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.LongArray]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)](__m => (__m.key, __m.getValue))(__p => io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[io.milvus.grpc.schema.LongArray]
    ): _root_.io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry = _root_.io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse.FlushCollSegIDsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CollSealTimesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CollSealTimesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CollSealTimesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): CollSealTimesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry.type = io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse.CollSealTimesEntry])
  }
  
  object CollSealTimesEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry(
      key = "",
      value = 0L
    )
    implicit class CollSealTimesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry, (_root_.scala.Predef.String, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry, (_root_.scala.Predef.String, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Long
    ): _root_.io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry = _root_.io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse.CollSealTimesEntry])
  }
  
  @SerialVersionUID(0L)
  final case class CollFlushTsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CollFlushTsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeUInt64(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CollFlushTsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): CollFlushTsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry.type = io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse.CollFlushTsEntry])
  }
  
  object CollFlushTsEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readUInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry(
      key = "",
      value = 0L
    )
    implicit class CollFlushTsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry, (_root_.scala.Predef.String, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry, (_root_.scala.Predef.String, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Long
    ): _root_.io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry = _root_.io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse.CollFlushTsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class ChannelCpsEntry(
                                    key: _root_.scala.Predef.String = "",
                                    value: _root_.scala.Option[MsgPosition] = _root_.scala.None,
                                    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ChannelCpsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): ChannelCpsEntry = copy(key = __v)
      def getValue: MsgPosition = value.getOrElse(msg.MsgPosition.defaultInstance)
      def clearValue: ChannelCpsEntry = copy(value = _root_.scala.None)
      def withValue(__v: MsgPosition): ChannelCpsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry.type = io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.FlushResponse.ChannelCpsEntry])
  }
  
  object ChannelCpsEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[MsgPosition] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[MsgPosition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[MsgPosition]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.FlushResponse.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = msg.MsgPosition
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class ChannelCpsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, MsgPosition] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[MsgPosition]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry, (_root_.scala.Predef.String, MsgPosition)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry, (_root_.scala.Predef.String, MsgPosition)](__m => (__m.key, __m.getValue))(__p => io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[MsgPosition]
    ): _root_.io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry = _root_.io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse.ChannelCpsEntry])
  }
  
  implicit class FlushResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.FlushResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.FlushResponse](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collSegIDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]] = field(_.collSegIDs)((c_, f_) => c_.copy(collSegIDs = f_))
    def flushCollSegIDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray]] = field(_.flushCollSegIDs)((c_, f_) => c_.copy(flushCollSegIDs = f_))
    def collSealTimes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = field(_.collSealTimes)((c_, f_) => c_.copy(collSealTimes = f_))
    def collFlushTs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = field(_.collFlushTs)((c_, f_) => c_.copy(collFlushTs = f_))
    def channelCps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, MsgPosition]] = field(_.channelCps)((c_, f_) => c_.copy(channelCps = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val DB_NAME_FIELD_NUMBER = 2
  final val COLL_SEGIDS_FIELD_NUMBER = 3
  final val FLUSH_COLL_SEGIDS_FIELD_NUMBER = 4
  final val COLL_SEAL_TIMES_FIELD_NUMBER = 5
  final val COLL_FLUSH_TS_FIELD_NUMBER = 6
  final val CHANNEL_CPS_FIELD_NUMBER = 7
  @transient
  private[milvus] val _typemapper_collSegIDs: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)]]
  @transient
  private[milvus] val _typemapper_flushCollSegIDs: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.FlushCollSegIDsEntry, (_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray)]]
  @transient
  private[milvus] val _typemapper_collSealTimes: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry, (_root_.scala.Predef.String, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollSealTimesEntry, (_root_.scala.Predef.String, _root_.scala.Long)]]
  @transient
  private[milvus] val _typemapper_collFlushTs: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry, (_root_.scala.Predef.String, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.CollFlushTsEntry, (_root_.scala.Predef.String, _root_.scala.Long)]]
  @transient
  private[milvus] val _typemapper_channelCps: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry, (_root_.scala.Predef.String, MsgPosition)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.FlushResponse.ChannelCpsEntry, (_root_.scala.Predef.String, MsgPosition)]]
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    dbName: _root_.scala.Predef.String,
    collSegIDs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray],
    flushCollSegIDs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, io.milvus.grpc.schema.LongArray],
    collSealTimes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long],
    collFlushTs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long],
    channelCps: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, MsgPosition]
  ): _root_.io.milvus.grpc.milvus.FlushResponse = _root_.io.milvus.grpc.milvus.FlushResponse(
    status,
    dbName,
    collSegIDs,
    flushCollSegIDs,
    collSealTimes,
    collFlushTs,
    channelCps
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.FlushResponse])
}
