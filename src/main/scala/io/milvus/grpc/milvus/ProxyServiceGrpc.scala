// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

object ProxyServiceGrpc {
  val METHOD_REGISTER_LINK: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RegisterLinkRequest, io.milvus.grpc.milvus.RegisterLinkResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.ProxyService", "RegisterLink"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RegisterLinkRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RegisterLinkResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(1).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("milvus.proto.milvus.ProxyService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.milvus.grpc.milvus.MilvusProto.javaDescriptor))
      .addMethod(METHOD_REGISTER_LINK)
      .build()
  
  trait ProxyService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ProxyService] = ProxyService
    def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RegisterLinkResponse]
  }
  
  object ProxyService extends _root_.scalapb.grpc.ServiceCompanion[ProxyService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ProxyService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.services(1)
    def bindService(serviceImpl: ProxyService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_REGISTER_LINK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RegisterLinkRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.RegisterLinkResponse]) => {
          serviceImpl.registerLink(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  trait ProxyServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ProxyService] = ProxyService
    def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): io.milvus.grpc.milvus.RegisterLinkResponse
  }
  
  class ProxyServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ProxyServiceBlockingStub](channel, options) with ProxyServiceBlockingClient {
    override def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): io.milvus.grpc.milvus.RegisterLinkResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REGISTER_LINK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProxyServiceBlockingStub = new ProxyServiceBlockingStub(channel, options)
  }
  
  class ProxyServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ProxyServiceStub](channel, options) with ProxyService {
    override def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RegisterLinkResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REGISTER_LINK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProxyServiceStub = new ProxyServiceStub(channel, options)
  }
  
  object ProxyServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ProxyServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProxyServiceStub = new ProxyServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ProxyServiceStub] = this
  }
  
  def bindService(serviceImpl: ProxyService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ProxyService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ProxyServiceBlockingStub = new ProxyServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ProxyServiceStub = new ProxyServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(1)
  
}