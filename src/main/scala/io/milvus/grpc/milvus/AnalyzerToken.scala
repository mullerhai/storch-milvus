// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class AnalyzerToken(
    token: _root_.scala.Predef.String = "",
    startOffset: _root_.scala.Long = 0L,
    endOffset: _root_.scala.Long = 0L,
    position: _root_.scala.Long = 0L,
    positionLength: _root_.scala.Long = 0L,
    hash: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AnalyzerToken] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = token
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = startOffset
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = endOffset
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = position
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = positionLength
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = hash
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = token
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = startOffset
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = endOffset
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = position
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = positionLength
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = hash
        if (__v != 0) {
          _output__.writeUInt32(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withToken(__v: _root_.scala.Predef.String): AnalyzerToken = copy(token = __v)
    def withStartOffset(__v: _root_.scala.Long): AnalyzerToken = copy(startOffset = __v)
    def withEndOffset(__v: _root_.scala.Long): AnalyzerToken = copy(endOffset = __v)
    def withPosition(__v: _root_.scala.Long): AnalyzerToken = copy(position = __v)
    def withPositionLength(__v: _root_.scala.Long): AnalyzerToken = copy(positionLength = __v)
    def withHash(__v: _root_.scala.Int): AnalyzerToken = copy(hash = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = token
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = startOffset
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = endOffset
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = position
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = positionLength
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = hash
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(token)
        case 2 => _root_.scalapb.descriptors.PLong(startOffset)
        case 3 => _root_.scalapb.descriptors.PLong(endOffset)
        case 4 => _root_.scalapb.descriptors.PLong(position)
        case 5 => _root_.scalapb.descriptors.PLong(positionLength)
        case 6 => _root_.scalapb.descriptors.PInt(hash)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.AnalyzerToken.type = io.milvus.grpc.milvus.AnalyzerToken
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.AnalyzerToken])
}

object AnalyzerToken extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.AnalyzerToken] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.AnalyzerToken] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.AnalyzerToken = {
    var __token: _root_.scala.Predef.String = ""
    var __startOffset: _root_.scala.Long = 0L
    var __endOffset: _root_.scala.Long = 0L
    var __position: _root_.scala.Long = 0L
    var __positionLength: _root_.scala.Long = 0L
    var __hash: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __token = _input__.readStringRequireUtf8()
        case 16 =>
          __startOffset = _input__.readInt64()
        case 24 =>
          __endOffset = _input__.readInt64()
        case 32 =>
          __position = _input__.readInt64()
        case 40 =>
          __positionLength = _input__.readInt64()
        case 48 =>
          __hash = _input__.readUInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.AnalyzerToken(
        token = __token,
        startOffset = __startOffset,
        endOffset = __endOffset,
        position = __position,
        positionLength = __positionLength,
        hash = __hash,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.AnalyzerToken] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.AnalyzerToken(
        token = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        startOffset = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        endOffset = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        position = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        positionLength = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        hash = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(182)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(182)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.AnalyzerToken(
    token = "",
    startOffset = 0L,
    endOffset = 0L,
    position = 0L,
    positionLength = 0L,
    hash = 0
  )
  implicit class AnalyzerTokenLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.AnalyzerToken]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.AnalyzerToken](_l) {
    def token: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def startOffset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.startOffset)((c_, f_) => c_.copy(startOffset = f_))
    def endOffset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.endOffset)((c_, f_) => c_.copy(endOffset = f_))
    def position: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.position)((c_, f_) => c_.copy(position = f_))
    def positionLength: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.positionLength)((c_, f_) => c_.copy(positionLength = f_))
    def hash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
  }
  final val TOKEN_FIELD_NUMBER = 1
  final val START_OFFSET_FIELD_NUMBER = 2
  final val END_OFFSET_FIELD_NUMBER = 3
  final val POSITION_FIELD_NUMBER = 4
  final val POSITION_LENGTH_FIELD_NUMBER = 5
  final val HASH_FIELD_NUMBER = 6
  def of(
    token: _root_.scala.Predef.String,
    startOffset: _root_.scala.Long,
    endOffset: _root_.scala.Long,
    position: _root_.scala.Long,
    positionLength: _root_.scala.Long,
    hash: _root_.scala.Int
  ): _root_.io.milvus.grpc.milvus.AnalyzerToken = _root_.io.milvus.grpc.milvus.AnalyzerToken(
    token,
    startOffset,
    endOffset,
    position,
    positionLength,
    hash
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.AnalyzerToken])
}
