// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class InsertRequest(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None,
    dbName: _root_.scala.Predef.String = "",
    collectionName: _root_.scala.Predef.String = "",
    partitionName: _root_.scala.Predef.String = "",
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData] = _root_.scala.Seq.empty,
    hashKeys: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    numRows: _root_.scala.Int = 0,
    schemaTimestamp: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InsertRequest] {
    private[this] def hashKeysSerializedSize = {
      if (__hashKeysSerializedSizeField == 0) __hashKeysSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        hashKeys.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __hashKeysSerializedSizeField
    }
    @transient private[this] var __hashKeysSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (base.isDefined) {
        val __value = base.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = partitionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      fieldsData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (hashKeys.nonEmpty) {
        val __localsize = hashKeysSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = numRows
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, __value)
        }
      };
      
      {
        val __value = schemaTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      base.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = partitionName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      fieldsData.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (hashKeys.nonEmpty) {
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(hashKeysSerializedSize)
        hashKeys.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = numRows
        if (__v != 0) {
          _output__.writeUInt32(7, __v)
        }
      };
      {
        val __v = schemaTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBase: io.milvus.grpc.common.MsgBase = base.getOrElse(io.milvus.grpc.common.MsgBase.defaultInstance)
    def clearBase: InsertRequest = copy(base = _root_.scala.None)
    def withBase(__v: io.milvus.grpc.common.MsgBase): InsertRequest = copy(base = Option(__v))
    def withDbName(__v: _root_.scala.Predef.String): InsertRequest = copy(dbName = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): InsertRequest = copy(collectionName = __v)
    def withPartitionName(__v: _root_.scala.Predef.String): InsertRequest = copy(partitionName = __v)
    def clearFieldsData = copy(fieldsData = _root_.scala.Seq.empty)
    def addFieldsData(__vs: io.milvus.grpc.schema.FieldData *): InsertRequest = addAllFieldsData(__vs)
    def addAllFieldsData(__vs: Iterable[io.milvus.grpc.schema.FieldData]): InsertRequest = copy(fieldsData = fieldsData ++ __vs)
    def withFieldsData(__v: _root_.scala.Seq[io.milvus.grpc.schema.FieldData]): InsertRequest = copy(fieldsData = __v)
    def clearHashKeys = copy(hashKeys = _root_.scala.Seq.empty)
    def addHashKeys(__vs: _root_.scala.Int *): InsertRequest = addAllHashKeys(__vs)
    def addAllHashKeys(__vs: Iterable[_root_.scala.Int]): InsertRequest = copy(hashKeys = hashKeys ++ __vs)
    def withHashKeys(__v: _root_.scala.Seq[_root_.scala.Int]): InsertRequest = copy(hashKeys = __v)
    def withNumRows(__v: _root_.scala.Int): InsertRequest = copy(numRows = __v)
    def withSchemaTimestamp(__v: _root_.scala.Long): InsertRequest = copy(schemaTimestamp = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => base.orNull
        case 2 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = partitionName
          if (__t != "") __t else null
        }
        case 5 => fieldsData
        case 6 => hashKeys
        case 7 => {
          val __t = numRows
          if (__t != 0) __t else null
        }
        case 8 => {
          val __t = schemaTimestamp
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => base.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(dbName)
        case 3 => _root_.scalapb.descriptors.PString(collectionName)
        case 4 => _root_.scalapb.descriptors.PString(partitionName)
        case 5 => _root_.scalapb.descriptors.PRepeated(fieldsData.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(hashKeys.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PInt(numRows)
        case 8 => _root_.scalapb.descriptors.PLong(schemaTimestamp)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.InsertRequest.type = io.milvus.grpc.milvus.InsertRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.InsertRequest])
}

object InsertRequest extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.InsertRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.InsertRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.InsertRequest = {
    var __base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None
    var __dbName: _root_.scala.Predef.String = ""
    var __collectionName: _root_.scala.Predef.String = ""
    var __partitionName: _root_.scala.Predef.String = ""
    val __fieldsData: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData]
    val __hashKeys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __numRows: _root_.scala.Int = 0
    var __schemaTimestamp: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __base = _root_.scala.Option(__base.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __dbName = _input__.readStringRequireUtf8()
        case 26 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 34 =>
          __partitionName = _input__.readStringRequireUtf8()
        case 42 =>
          __fieldsData += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldData](_input__)
        case 48 =>
          __hashKeys += _input__.readUInt32()
        case 50 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __hashKeys += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 56 =>
          __numRows = _input__.readUInt32()
        case 64 =>
          __schemaTimestamp = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.InsertRequest(
        base = __base,
        dbName = __dbName,
        collectionName = __collectionName,
        partitionName = __partitionName,
        fieldsData = __fieldsData.result(),
        hashKeys = __hashKeys.result(),
        numRows = __numRows,
        schemaTimestamp = __schemaTimestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.InsertRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.InsertRequest(
        base = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.MsgBase]]),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        partitionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fieldsData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FieldData]]).getOrElse(_root_.scala.Seq.empty),
        hashKeys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        numRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        schemaTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(49)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(49)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.MsgBase
      case 5 => __out = io.milvus.grpc.schema.FieldData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.InsertRequest(
    base = _root_.scala.None,
    dbName = "",
    collectionName = "",
    partitionName = "",
    fieldsData = _root_.scala.Seq.empty,
    hashKeys = _root_.scala.Seq.empty,
    numRows = 0,
    schemaTimestamp = 0L
  )
  implicit class InsertRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.InsertRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.InsertRequest](_l) {
    def base: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase] = field(_.getBase)((c_, f_) => c_.copy(base = _root_.scala.Option(f_)))
    def optionalBase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.MsgBase]] = field(_.base)((c_, f_) => c_.copy(base = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def partitionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.partitionName)((c_, f_) => c_.copy(partitionName = f_))
    def fieldsData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FieldData]] = field(_.fieldsData)((c_, f_) => c_.copy(fieldsData = f_))
    def hashKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.hashKeys)((c_, f_) => c_.copy(hashKeys = f_))
    def numRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numRows)((c_, f_) => c_.copy(numRows = f_))
    def schemaTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.schemaTimestamp)((c_, f_) => c_.copy(schemaTimestamp = f_))
  }
  final val BASE_FIELD_NUMBER = 1
  final val DB_NAME_FIELD_NUMBER = 2
  final val COLLECTION_NAME_FIELD_NUMBER = 3
  final val PARTITION_NAME_FIELD_NUMBER = 4
  final val FIELDS_DATA_FIELD_NUMBER = 5
  final val HASH_KEYS_FIELD_NUMBER = 6
  final val NUM_ROWS_FIELD_NUMBER = 7
  final val SCHEMA_TIMESTAMP_FIELD_NUMBER = 8
  def of(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase],
    dbName: _root_.scala.Predef.String,
    collectionName: _root_.scala.Predef.String,
    partitionName: _root_.scala.Predef.String,
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData],
    hashKeys: _root_.scala.Seq[_root_.scala.Int],
    numRows: _root_.scala.Int,
    schemaTimestamp: _root_.scala.Long
  ): _root_.io.milvus.grpc.milvus.InsertRequest = _root_.io.milvus.grpc.milvus.InsertRequest(
    base,
    dbName,
    collectionName,
    partitionName,
    fieldsData,
    hashKeys,
    numRows,
    schemaTimestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.InsertRequest])
}
