// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param sessionTs
  *   for session-like operation like iterator
  */
@SerialVersionUID(0L)
final case class QueryResults(
    status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData] = _root_.scala.Seq.empty,
    collectionName: _root_.scala.Predef.String = "",
    outputFields: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    sessionTs: _root_.scala.Long = 0L,
    primaryFieldName: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QueryResults] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      fieldsData.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      outputFields.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = sessionTs
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, __value)
        }
      };
      
      {
        val __value = primaryFieldName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldsData.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      outputFields.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = sessionTs
        if (__v != 0L) {
          _output__.writeUInt64(5, __v)
        }
      };
      {
        val __v = primaryFieldName
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: QueryResults = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): QueryResults = copy(status = Option(__v))
    def clearFieldsData = copy(fieldsData = _root_.scala.Seq.empty)
    def addFieldsData(__vs: io.milvus.grpc.schema.FieldData *): QueryResults = addAllFieldsData(__vs)
    def addAllFieldsData(__vs: Iterable[io.milvus.grpc.schema.FieldData]): QueryResults = copy(fieldsData = fieldsData ++ __vs)
    def withFieldsData(__v: _root_.scala.Seq[io.milvus.grpc.schema.FieldData]): QueryResults = copy(fieldsData = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): QueryResults = copy(collectionName = __v)
    def clearOutputFields = copy(outputFields = _root_.scala.Seq.empty)
    def addOutputFields(__vs: _root_.scala.Predef.String *): QueryResults = addAllOutputFields(__vs)
    def addAllOutputFields(__vs: Iterable[_root_.scala.Predef.String]): QueryResults = copy(outputFields = outputFields ++ __vs)
    def withOutputFields(__v: _root_.scala.Seq[_root_.scala.Predef.String]): QueryResults = copy(outputFields = __v)
    def withSessionTs(__v: _root_.scala.Long): QueryResults = copy(sessionTs = __v)
    def withPrimaryFieldName(__v: _root_.scala.Predef.String): QueryResults = copy(primaryFieldName = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => fieldsData
        case 3 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 4 => outputFields
        case 5 => {
          val __t = sessionTs
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = primaryFieldName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(fieldsData.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PString(collectionName)
        case 4 => _root_.scalapb.descriptors.PRepeated(outputFields.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PLong(sessionTs)
        case 6 => _root_.scalapb.descriptors.PString(primaryFieldName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.QueryResults.type = io.milvus.grpc.milvus.QueryResults
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.QueryResults])
}

object QueryResults extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.QueryResults] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.QueryResults] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.QueryResults = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    val __fieldsData: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.schema.FieldData]
    var __collectionName: _root_.scala.Predef.String = ""
    val __outputFields: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __sessionTs: _root_.scala.Long = 0L
    var __primaryFieldName: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __fieldsData += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.FieldData](_input__)
        case 26 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 34 =>
          __outputFields += _input__.readStringRequireUtf8()
        case 40 =>
          __sessionTs = _input__.readUInt64()
        case 50 =>
          __primaryFieldName = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.QueryResults(
        status = __status,
        fieldsData = __fieldsData.result(),
        collectionName = __collectionName,
        outputFields = __outputFields.result(),
        sessionTs = __sessionTs,
        primaryFieldName = __primaryFieldName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.QueryResults] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.QueryResults(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        fieldsData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.schema.FieldData]]).getOrElse(_root_.scala.Seq.empty),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        outputFields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        sessionTs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        primaryFieldName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(62)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(62)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
      case 2 => __out = io.milvus.grpc.schema.FieldData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.QueryResults(
    status = _root_.scala.None,
    fieldsData = _root_.scala.Seq.empty,
    collectionName = "",
    outputFields = _root_.scala.Seq.empty,
    sessionTs = 0L,
    primaryFieldName = ""
  )
  implicit class QueryResultsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.QueryResults]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.QueryResults](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def fieldsData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.schema.FieldData]] = field(_.fieldsData)((c_, f_) => c_.copy(fieldsData = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def outputFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.outputFields)((c_, f_) => c_.copy(outputFields = f_))
    def sessionTs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sessionTs)((c_, f_) => c_.copy(sessionTs = f_))
    def primaryFieldName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.primaryFieldName)((c_, f_) => c_.copy(primaryFieldName = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val FIELDS_DATA_FIELD_NUMBER = 2
  final val COLLECTION_NAME_FIELD_NUMBER = 3
  final val OUTPUT_FIELDS_FIELD_NUMBER = 4
  final val SESSION_TS_FIELD_NUMBER = 5
  final val PRIMARY_FIELD_NAME_FIELD_NUMBER = 6
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    fieldsData: _root_.scala.Seq[io.milvus.grpc.schema.FieldData],
    collectionName: _root_.scala.Predef.String,
    outputFields: _root_.scala.Seq[_root_.scala.Predef.String],
    sessionTs: _root_.scala.Long,
    primaryFieldName: _root_.scala.Predef.String
  ): _root_.io.milvus.grpc.milvus.QueryResults = _root_.io.milvus.grpc.milvus.QueryResults(
    status,
    fieldsData,
    collectionName,
    outputFields,
    sessionTs,
    primaryFieldName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.QueryResults])
}
