// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** ReplicaGroup
  *
  * @param partitionIds
  *   empty indicates to load collection
  * @param nodeIds
  *   include leaders
  * @param numOutboundNode
  *   outbound access rg -&gt; node num
  */
@SerialVersionUID(0L)
final case class ReplicaInfo(
    replicaID: _root_.scala.Long = 0L,
    collectionID: _root_.scala.Long = 0L,
    partitionIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    shardReplicas: _root_.scala.Seq[io.milvus.grpc.milvus.ShardReplica] = _root_.scala.Seq.empty,
    nodeIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    resourceGroupName: _root_.scala.Predef.String = "",
    numOutboundNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ReplicaInfo] {
    private[this] def partitionIdsSerializedSize = {
      if (__partitionIdsSerializedSizeField == 0) __partitionIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        partitionIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __partitionIdsSerializedSizeField
    }
    @transient private[this] var __partitionIdsSerializedSizeField: _root_.scala.Int = 0
    private[this] def nodeIdsSerializedSize = {
      if (__nodeIdsSerializedSizeField == 0) __nodeIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        nodeIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __nodeIdsSerializedSizeField
    }
    @transient private[this] var __nodeIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = replicaID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = collectionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      if (partitionIds.nonEmpty) {
        val __localsize = partitionIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      shardReplicas.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (nodeIds.nonEmpty) {
        val __localsize = nodeIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = resourceGroupName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      numOutboundNode.foreach { __item =>
        val __value = io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = replicaID
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = collectionID
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      if (partitionIds.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(partitionIdsSerializedSize)
        partitionIds.foreach(_output__.writeInt64NoTag)
      };
      shardReplicas.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (nodeIds.nonEmpty) {
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(nodeIdsSerializedSize)
        nodeIds.foreach(_output__.writeInt64NoTag)
      };
      {
        val __v = resourceGroupName
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      numOutboundNode.foreach { __v =>
        val __m = io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withReplicaID(__v: _root_.scala.Long): ReplicaInfo = copy(replicaID = __v)
    def withCollectionID(__v: _root_.scala.Long): ReplicaInfo = copy(collectionID = __v)
    def clearPartitionIds = copy(partitionIds = _root_.scala.Seq.empty)
    def addPartitionIds(__vs: _root_.scala.Long *): ReplicaInfo = addAllPartitionIds(__vs)
    def addAllPartitionIds(__vs: Iterable[_root_.scala.Long]): ReplicaInfo = copy(partitionIds = partitionIds ++ __vs)
    def withPartitionIds(__v: _root_.scala.Seq[_root_.scala.Long]): ReplicaInfo = copy(partitionIds = __v)
    def clearShardReplicas = copy(shardReplicas = _root_.scala.Seq.empty)
    def addShardReplicas(__vs: io.milvus.grpc.milvus.ShardReplica *): ReplicaInfo = addAllShardReplicas(__vs)
    def addAllShardReplicas(__vs: Iterable[io.milvus.grpc.milvus.ShardReplica]): ReplicaInfo = copy(shardReplicas = shardReplicas ++ __vs)
    def withShardReplicas(__v: _root_.scala.Seq[io.milvus.grpc.milvus.ShardReplica]): ReplicaInfo = copy(shardReplicas = __v)
    def clearNodeIds = copy(nodeIds = _root_.scala.Seq.empty)
    def addNodeIds(__vs: _root_.scala.Long *): ReplicaInfo = addAllNodeIds(__vs)
    def addAllNodeIds(__vs: Iterable[_root_.scala.Long]): ReplicaInfo = copy(nodeIds = nodeIds ++ __vs)
    def withNodeIds(__v: _root_.scala.Seq[_root_.scala.Long]): ReplicaInfo = copy(nodeIds = __v)
    def withResourceGroupName(__v: _root_.scala.Predef.String): ReplicaInfo = copy(resourceGroupName = __v)
    def clearNumOutboundNode = copy(numOutboundNode = _root_.scala.collection.immutable.Map.empty)
    def addNumOutboundNode(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): ReplicaInfo = addAllNumOutboundNode(__vs)
    def addAllNumOutboundNode(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): ReplicaInfo = copy(numOutboundNode = numOutboundNode ++ __vs)
    def withNumOutboundNode(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): ReplicaInfo = copy(numOutboundNode = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = replicaID
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = collectionID
          if (__t != 0L) __t else null
        }
        case 3 => partitionIds
        case 4 => shardReplicas
        case 5 => nodeIds
        case 6 => {
          val __t = resourceGroupName
          if (__t != "") __t else null
        }
        case 7 => numOutboundNode.iterator.map(io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(replicaID)
        case 2 => _root_.scalapb.descriptors.PLong(collectionID)
        case 3 => _root_.scalapb.descriptors.PRepeated(partitionIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(shardReplicas.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(nodeIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PString(resourceGroupName)
        case 7 => _root_.scalapb.descriptors.PRepeated(numOutboundNode.iterator.map(io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.ReplicaInfo.type = io.milvus.grpc.milvus.ReplicaInfo
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ReplicaInfo])
}

object ReplicaInfo extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ReplicaInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ReplicaInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ReplicaInfo = {
    var __replicaID: _root_.scala.Long = 0L
    var __collectionID: _root_.scala.Long = 0L
    val __partitionIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __shardReplicas: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.ShardReplica] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.ShardReplica]
    val __nodeIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var __resourceGroupName: _root_.scala.Predef.String = ""
    val __numOutboundNode: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __replicaID = _input__.readInt64()
        case 16 =>
          __collectionID = _input__.readInt64()
        case 24 =>
          __partitionIds += _input__.readInt64()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __partitionIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 34 =>
          __shardReplicas += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.ShardReplica](_input__)
        case 40 =>
          __nodeIds += _input__.readInt64()
        case 42 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __nodeIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 50 =>
          __resourceGroupName = _input__.readStringRequireUtf8()
        case 58 =>
          __numOutboundNode += io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.ReplicaInfo(
        replicaID = __replicaID,
        collectionID = __collectionID,
        partitionIds = __partitionIds.result(),
        shardReplicas = __shardReplicas.result(),
        nodeIds = __nodeIds.result(),
        resourceGroupName = __resourceGroupName,
        numOutboundNode = __numOutboundNode.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ReplicaInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.ReplicaInfo(
        replicaID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        partitionIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        shardReplicas = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.ShardReplica]]).getOrElse(_root_.scala.Seq.empty),
        nodeIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        resourceGroupName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        numOutboundNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.ReplicaInfo._typemapper_numOutboundNode.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(105)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(105)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.milvus.grpc.milvus.ShardReplica
      case 7 => __out = io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.ReplicaInfo(
    replicaID = 0L,
    collectionID = 0L,
    partitionIds = _root_.scala.Seq.empty,
    shardReplicas = _root_.scala.Seq.empty,
    nodeIds = _root_.scala.Seq.empty,
    resourceGroupName = "",
    numOutboundNode = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class NumOutboundNodeEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NumOutboundNodeEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): NumOutboundNodeEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): NumOutboundNodeEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry.type = io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ReplicaInfo.NumOutboundNodeEntry])
  }
  
  object NumOutboundNodeEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.ReplicaInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.ReplicaInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry(
      key = "",
      value = 0
    )
    implicit class NumOutboundNodeEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry = _root_.io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ReplicaInfo.NumOutboundNodeEntry])
  }
  
  implicit class ReplicaInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ReplicaInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ReplicaInfo](_l) {
    def replicaID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.replicaID)((c_, f_) => c_.copy(replicaID = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
    def partitionIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.partitionIds)((c_, f_) => c_.copy(partitionIds = f_))
    def shardReplicas: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.ShardReplica]] = field(_.shardReplicas)((c_, f_) => c_.copy(shardReplicas = f_))
    def nodeIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.nodeIds)((c_, f_) => c_.copy(nodeIds = f_))
    def resourceGroupName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resourceGroupName)((c_, f_) => c_.copy(resourceGroupName = f_))
    def numOutboundNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.numOutboundNode)((c_, f_) => c_.copy(numOutboundNode = f_))
  }
  final val REPLICAID_FIELD_NUMBER = 1
  final val COLLECTIONID_FIELD_NUMBER = 2
  final val PARTITION_IDS_FIELD_NUMBER = 3
  final val SHARD_REPLICAS_FIELD_NUMBER = 4
  final val NODE_IDS_FIELD_NUMBER = 5
  final val RESOURCE_GROUP_NAME_FIELD_NUMBER = 6
  final val NUM_OUTBOUND_NODE_FIELD_NUMBER = 7
  @transient
  private[milvus] val _typemapper_numOutboundNode: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ReplicaInfo.NumOutboundNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  def of(
    replicaID: _root_.scala.Long,
    collectionID: _root_.scala.Long,
    partitionIds: _root_.scala.Seq[_root_.scala.Long],
    shardReplicas: _root_.scala.Seq[io.milvus.grpc.milvus.ShardReplica],
    nodeIds: _root_.scala.Seq[_root_.scala.Long],
    resourceGroupName: _root_.scala.Predef.String,
    numOutboundNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]
  ): _root_.io.milvus.grpc.milvus.ReplicaInfo = _root_.io.milvus.grpc.milvus.ReplicaInfo(
    replicaID,
    collectionID,
    partitionIds,
    shardReplicas,
    nodeIds,
    resourceGroupName,
    numOutboundNode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ReplicaInfo])
}
