// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** *
  * Load collection data into query nodes, then you can do vector search on this collection.
  *
  * @param base
  *   Not useful for now
  * @param collectionName
  *   The collection name you want to load
  * @param replicaNumber
  *   The replica number to load, default by 1
  * @param resourceGroups
  *   create replica used resource group
  * @param refresh
  *   Whether to enable refresh mode.
  * @param loadFields
  *   Field Partial Load fields list
  * @param skipLoadDynamicField
  *   Field Partial load skip load dynamic fields 
  * @param loadParams
  *   Additional parameters for load
  */
@SerialVersionUID(0L)
final case class LoadCollectionRequest(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None,
    dbName: _root_.scala.Predef.String = "",
    collectionName: _root_.scala.Predef.String = "",
    replicaNumber: _root_.scala.Int = 0,
    resourceGroups: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    refresh: _root_.scala.Boolean = false,
    loadFields: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    skipLoadDynamicField: _root_.scala.Boolean = false,
    loadParams: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LoadCollectionRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (base.isDefined) {
        val __value = base.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = replicaNumber
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      resourceGroups.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = refresh
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      loadFields.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      
      {
        val __value = skipLoadDynamicField
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      loadParams.foreach { __item =>
        val __value = io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      base.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = replicaNumber
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      resourceGroups.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = refresh
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      loadFields.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      {
        val __v = skipLoadDynamicField
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      loadParams.foreach { __v =>
        val __m = io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toBase(__v)
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBase: io.milvus.grpc.common.MsgBase = base.getOrElse(io.milvus.grpc.common.MsgBase.defaultInstance)
    def clearBase: LoadCollectionRequest = copy(base = _root_.scala.None)
    def withBase(__v: io.milvus.grpc.common.MsgBase): LoadCollectionRequest = copy(base = Option(__v))
    def withDbName(__v: _root_.scala.Predef.String): LoadCollectionRequest = copy(dbName = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): LoadCollectionRequest = copy(collectionName = __v)
    def withReplicaNumber(__v: _root_.scala.Int): LoadCollectionRequest = copy(replicaNumber = __v)
    def clearResourceGroups = copy(resourceGroups = _root_.scala.Seq.empty)
    def addResourceGroups(__vs: _root_.scala.Predef.String *): LoadCollectionRequest = addAllResourceGroups(__vs)
    def addAllResourceGroups(__vs: Iterable[_root_.scala.Predef.String]): LoadCollectionRequest = copy(resourceGroups = resourceGroups ++ __vs)
    def withResourceGroups(__v: _root_.scala.Seq[_root_.scala.Predef.String]): LoadCollectionRequest = copy(resourceGroups = __v)
    def withRefresh(__v: _root_.scala.Boolean): LoadCollectionRequest = copy(refresh = __v)
    def clearLoadFields = copy(loadFields = _root_.scala.Seq.empty)
    def addLoadFields(__vs: _root_.scala.Predef.String *): LoadCollectionRequest = addAllLoadFields(__vs)
    def addAllLoadFields(__vs: Iterable[_root_.scala.Predef.String]): LoadCollectionRequest = copy(loadFields = loadFields ++ __vs)
    def withLoadFields(__v: _root_.scala.Seq[_root_.scala.Predef.String]): LoadCollectionRequest = copy(loadFields = __v)
    def withSkipLoadDynamicField(__v: _root_.scala.Boolean): LoadCollectionRequest = copy(skipLoadDynamicField = __v)
    def clearLoadParams = copy(loadParams = _root_.scala.collection.immutable.Map.empty)
    def addLoadParams(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): LoadCollectionRequest = addAllLoadParams(__vs)
    def addAllLoadParams(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): LoadCollectionRequest = copy(loadParams = loadParams ++ __vs)
    def withLoadParams(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): LoadCollectionRequest = copy(loadParams = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => base.orNull
        case 2 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = replicaNumber
          if (__t != 0) __t else null
        }
        case 5 => resourceGroups
        case 6 => {
          val __t = refresh
          if (__t != false) __t else null
        }
        case 7 => loadFields
        case 8 => {
          val __t = skipLoadDynamicField
          if (__t != false) __t else null
        }
        case 9 => loadParams.iterator.map(io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => base.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(dbName)
        case 3 => _root_.scalapb.descriptors.PString(collectionName)
        case 4 => _root_.scalapb.descriptors.PInt(replicaNumber)
        case 5 => _root_.scalapb.descriptors.PRepeated(resourceGroups.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PBoolean(refresh)
        case 7 => _root_.scalapb.descriptors.PRepeated(loadFields.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PBoolean(skipLoadDynamicField)
        case 9 => _root_.scalapb.descriptors.PRepeated(loadParams.iterator.map(io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.LoadCollectionRequest.type = io.milvus.grpc.milvus.LoadCollectionRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.LoadCollectionRequest])
}

object LoadCollectionRequest extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.LoadCollectionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.LoadCollectionRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.LoadCollectionRequest = {
    var __base: _root_.scala.Option[io.milvus.grpc.common.MsgBase] = _root_.scala.None
    var __dbName: _root_.scala.Predef.String = ""
    var __collectionName: _root_.scala.Predef.String = ""
    var __replicaNumber: _root_.scala.Int = 0
    val __resourceGroups: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __refresh: _root_.scala.Boolean = false
    val __loadFields: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __skipLoadDynamicField: _root_.scala.Boolean = false
    val __loadParams: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __base = _root_.scala.Option(__base.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __dbName = _input__.readStringRequireUtf8()
        case 26 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 32 =>
          __replicaNumber = _input__.readInt32()
        case 42 =>
          __resourceGroups += _input__.readStringRequireUtf8()
        case 48 =>
          __refresh = _input__.readBool()
        case 58 =>
          __loadFields += _input__.readStringRequireUtf8()
        case 64 =>
          __skipLoadDynamicField = _input__.readBool()
        case 74 =>
          __loadParams += io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.LoadCollectionRequest(
        base = __base,
        dbName = __dbName,
        collectionName = __collectionName,
        replicaNumber = __replicaNumber,
        resourceGroups = __resourceGroups.result(),
        refresh = __refresh,
        loadFields = __loadFields.result(),
        skipLoadDynamicField = __skipLoadDynamicField,
        loadParams = __loadParams.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.LoadCollectionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.LoadCollectionRequest(
        base = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.MsgBase]]),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        replicaNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        resourceGroups = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        refresh = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        loadFields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        skipLoadDynamicField = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        loadParams = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.LoadCollectionRequest._typemapper_loadParams.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.MsgBase
      case 9 => __out = io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.LoadCollectionRequest(
    base = _root_.scala.None,
    dbName = "",
    collectionName = "",
    replicaNumber = 0,
    resourceGroups = _root_.scala.Seq.empty,
    refresh = false,
    loadFields = _root_.scala.Seq.empty,
    skipLoadDynamicField = false,
    loadParams = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class LoadParamsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LoadParamsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): LoadParamsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): LoadParamsEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry.type = io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.LoadCollectionRequest.LoadParamsEntry])
  }
  
  object LoadParamsEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.LoadCollectionRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.LoadCollectionRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry(
      key = "",
      value = ""
    )
    implicit class LoadParamsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry = _root_.io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.LoadCollectionRequest.LoadParamsEntry])
  }
  
  implicit class LoadCollectionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.LoadCollectionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.LoadCollectionRequest](_l) {
    def base: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase] = field(_.getBase)((c_, f_) => c_.copy(base = _root_.scala.Option(f_)))
    def optionalBase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.MsgBase]] = field(_.base)((c_, f_) => c_.copy(base = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def replicaNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.replicaNumber)((c_, f_) => c_.copy(replicaNumber = f_))
    def resourceGroups: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.resourceGroups)((c_, f_) => c_.copy(resourceGroups = f_))
    def refresh: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.refresh)((c_, f_) => c_.copy(refresh = f_))
    def loadFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.loadFields)((c_, f_) => c_.copy(loadFields = f_))
    def skipLoadDynamicField: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.skipLoadDynamicField)((c_, f_) => c_.copy(skipLoadDynamicField = f_))
    def loadParams: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.loadParams)((c_, f_) => c_.copy(loadParams = f_))
  }
  final val BASE_FIELD_NUMBER = 1
  final val DB_NAME_FIELD_NUMBER = 2
  final val COLLECTION_NAME_FIELD_NUMBER = 3
  final val REPLICA_NUMBER_FIELD_NUMBER = 4
  final val RESOURCE_GROUPS_FIELD_NUMBER = 5
  final val REFRESH_FIELD_NUMBER = 6
  final val LOAD_FIELDS_FIELD_NUMBER = 7
  final val SKIP_LOAD_DYNAMIC_FIELD_FIELD_NUMBER = 8
  final val LOAD_PARAMS_FIELD_NUMBER = 9
  @transient
  private[milvus] val _typemapper_loadParams: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.LoadCollectionRequest.LoadParamsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    base: _root_.scala.Option[io.milvus.grpc.common.MsgBase],
    dbName: _root_.scala.Predef.String,
    collectionName: _root_.scala.Predef.String,
    replicaNumber: _root_.scala.Int,
    resourceGroups: _root_.scala.Seq[_root_.scala.Predef.String],
    refresh: _root_.scala.Boolean,
    loadFields: _root_.scala.Seq[_root_.scala.Predef.String],
    skipLoadDynamicField: _root_.scala.Boolean,
    loadParams: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
  ): _root_.io.milvus.grpc.milvus.LoadCollectionRequest = _root_.io.milvus.grpc.milvus.LoadCollectionRequest(
    base,
    dbName,
    collectionName,
    replicaNumber,
    resourceGroups,
    refresh,
    loadFields,
    skipLoadDynamicField,
    loadParams
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.LoadCollectionRequest])
}
