// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** *
  * DescribeCollection Response
  *
  * @param status
  *   Contain error_code and reason
  * @param schema
  *   The schema param when you created collection.
  * @param collectionID
  *   The collection id
  * @param virtualChannelNames
  *   System design related, users should not perceive
  * @param physicalChannelNames
  *   System design related, users should not perceive
  * @param createdTimestamp
  *   Hybrid timestamp in milvus
  * @param createdUtcTimestamp
  *   The utc timestamp calculated by created_timestamp
  * @param shardsNum
  *   The shards number you set.
  * @param aliases
  *   The aliases of this collection
  * @param startPositions
  *   The message ID/posititon when collection is created
  * @param consistencyLevel
  *   The consistency level that the collection used, modification is not supported now.
  * @param collectionName
  *   The collection name
  */
@SerialVersionUID(0L)
final case class DescribeCollectionResponse(
    status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
    schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema] = _root_.scala.None,
    collectionID: _root_.scala.Long = 0L,
    virtualChannelNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    physicalChannelNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    createdTimestamp: _root_.scala.Long = 0L,
    createdUtcTimestamp: _root_.scala.Long = 0L,
    shardsNum: _root_.scala.Int = 0,
    aliases: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    startPositions: _root_.scala.Seq[io.milvus.grpc.common.KeyDataPair] = _root_.scala.Seq.empty,
    consistencyLevel: io.milvus.grpc.common.ConsistencyLevel = io.milvus.grpc.common.ConsistencyLevel.Strong,
    collectionName: _root_.scala.Predef.String = "",
    properties: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair] = _root_.scala.Seq.empty,
    dbName: _root_.scala.Predef.String = "",
    numPartitions: _root_.scala.Long = 0L,
    dbId: _root_.scala.Long = 0L,
    requestTime: _root_.scala.Long = 0L,
    updateTimestamp: _root_.scala.Long = 0L,
    updateTimestampStr: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DescribeCollectionResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (schema.isDefined) {
        val __value = schema.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = collectionID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      virtualChannelNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      physicalChannelNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = createdTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      
      {
        val __value = createdUtcTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, __value)
        }
      };
      
      {
        val __value = shardsNum
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
        }
      };
      aliases.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
      }
      startPositions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = consistencyLevel.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(11, __value)
        }
      };
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      properties.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
        }
      };
      
      {
        val __value = numPartitions
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(15, __value)
        }
      };
      
      {
        val __value = dbId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, __value)
        }
      };
      
      {
        val __value = requestTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(17, __value)
        }
      };
      
      {
        val __value = updateTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(18, __value)
        }
      };
      
      {
        val __value = updateTimestampStr
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      schema.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = collectionID
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      virtualChannelNames.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      physicalChannelNames.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = createdTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      {
        val __v = createdUtcTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(7, __v)
        }
      };
      {
        val __v = shardsNum
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
      aliases.foreach { __v =>
        val __m = __v
        _output__.writeString(9, __m)
      };
      startPositions.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = consistencyLevel.value
        if (__v != 0) {
          _output__.writeEnum(11, __v)
        }
      };
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      properties.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(14, __v)
        }
      };
      {
        val __v = numPartitions
        if (__v != 0L) {
          _output__.writeInt64(15, __v)
        }
      };
      {
        val __v = dbId
        if (__v != 0L) {
          _output__.writeInt64(16, __v)
        }
      };
      {
        val __v = requestTime
        if (__v != 0L) {
          _output__.writeUInt64(17, __v)
        }
      };
      {
        val __v = updateTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(18, __v)
        }
      };
      {
        val __v = updateTimestampStr
        if (!__v.isEmpty) {
          _output__.writeString(19, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: DescribeCollectionResponse = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): DescribeCollectionResponse = copy(status = Option(__v))
    def getSchema: io.milvus.grpc.schema.CollectionSchema = schema.getOrElse(io.milvus.grpc.schema.CollectionSchema.defaultInstance)
    def clearSchema: DescribeCollectionResponse = copy(schema = _root_.scala.None)
    def withSchema(__v: io.milvus.grpc.schema.CollectionSchema): DescribeCollectionResponse = copy(schema = Option(__v))
    def withCollectionID(__v: _root_.scala.Long): DescribeCollectionResponse = copy(collectionID = __v)
    def clearVirtualChannelNames = copy(virtualChannelNames = _root_.scala.Seq.empty)
    def addVirtualChannelNames(__vs: _root_.scala.Predef.String *): DescribeCollectionResponse = addAllVirtualChannelNames(__vs)
    def addAllVirtualChannelNames(__vs: Iterable[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(virtualChannelNames = virtualChannelNames ++ __vs)
    def withVirtualChannelNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(virtualChannelNames = __v)
    def clearPhysicalChannelNames = copy(physicalChannelNames = _root_.scala.Seq.empty)
    def addPhysicalChannelNames(__vs: _root_.scala.Predef.String *): DescribeCollectionResponse = addAllPhysicalChannelNames(__vs)
    def addAllPhysicalChannelNames(__vs: Iterable[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(physicalChannelNames = physicalChannelNames ++ __vs)
    def withPhysicalChannelNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(physicalChannelNames = __v)
    def withCreatedTimestamp(__v: _root_.scala.Long): DescribeCollectionResponse = copy(createdTimestamp = __v)
    def withCreatedUtcTimestamp(__v: _root_.scala.Long): DescribeCollectionResponse = copy(createdUtcTimestamp = __v)
    def withShardsNum(__v: _root_.scala.Int): DescribeCollectionResponse = copy(shardsNum = __v)
    def clearAliases = copy(aliases = _root_.scala.Seq.empty)
    def addAliases(__vs: _root_.scala.Predef.String *): DescribeCollectionResponse = addAllAliases(__vs)
    def addAllAliases(__vs: Iterable[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(aliases = aliases ++ __vs)
    def withAliases(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DescribeCollectionResponse = copy(aliases = __v)
    def clearStartPositions = copy(startPositions = _root_.scala.Seq.empty)
    def addStartPositions(__vs: io.milvus.grpc.common.KeyDataPair *): DescribeCollectionResponse = addAllStartPositions(__vs)
    def addAllStartPositions(__vs: Iterable[io.milvus.grpc.common.KeyDataPair]): DescribeCollectionResponse = copy(startPositions = startPositions ++ __vs)
    def withStartPositions(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyDataPair]): DescribeCollectionResponse = copy(startPositions = __v)
    def withConsistencyLevel(__v: io.milvus.grpc.common.ConsistencyLevel): DescribeCollectionResponse = copy(consistencyLevel = __v)
    def withCollectionName(__v: _root_.scala.Predef.String): DescribeCollectionResponse = copy(collectionName = __v)
    def clearProperties = copy(properties = _root_.scala.Seq.empty)
    def addProperties(__vs: io.milvus.grpc.common.KeyValuePair *): DescribeCollectionResponse = addAllProperties(__vs)
    def addAllProperties(__vs: Iterable[io.milvus.grpc.common.KeyValuePair]): DescribeCollectionResponse = copy(properties = properties ++ __vs)
    def withProperties(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]): DescribeCollectionResponse = copy(properties = __v)
    def withDbName(__v: _root_.scala.Predef.String): DescribeCollectionResponse = copy(dbName = __v)
    def withNumPartitions(__v: _root_.scala.Long): DescribeCollectionResponse = copy(numPartitions = __v)
    def withDbId(__v: _root_.scala.Long): DescribeCollectionResponse = copy(dbId = __v)
    def withRequestTime(__v: _root_.scala.Long): DescribeCollectionResponse = copy(requestTime = __v)
    def withUpdateTimestamp(__v: _root_.scala.Long): DescribeCollectionResponse = copy(updateTimestamp = __v)
    def withUpdateTimestampStr(__v: _root_.scala.Predef.String): DescribeCollectionResponse = copy(updateTimestampStr = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => schema.orNull
        case 3 => {
          val __t = collectionID
          if (__t != 0L) __t else null
        }
        case 4 => virtualChannelNames
        case 5 => physicalChannelNames
        case 6 => {
          val __t = createdTimestamp
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = createdUtcTimestamp
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = shardsNum
          if (__t != 0) __t else null
        }
        case 9 => aliases
        case 10 => startPositions
        case 11 => {
          val __t = consistencyLevel.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 12 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 13 => properties
        case 14 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 15 => {
          val __t = numPartitions
          if (__t != 0L) __t else null
        }
        case 16 => {
          val __t = dbId
          if (__t != 0L) __t else null
        }
        case 17 => {
          val __t = requestTime
          if (__t != 0L) __t else null
        }
        case 18 => {
          val __t = updateTimestamp
          if (__t != 0L) __t else null
        }
        case 19 => {
          val __t = updateTimestampStr
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => schema.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(collectionID)
        case 4 => _root_.scalapb.descriptors.PRepeated(virtualChannelNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(physicalChannelNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PLong(createdTimestamp)
        case 7 => _root_.scalapb.descriptors.PLong(createdUtcTimestamp)
        case 8 => _root_.scalapb.descriptors.PInt(shardsNum)
        case 9 => _root_.scalapb.descriptors.PRepeated(aliases.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(startPositions.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PEnum(consistencyLevel.scalaValueDescriptor)
        case 12 => _root_.scalapb.descriptors.PString(collectionName)
        case 13 => _root_.scalapb.descriptors.PRepeated(properties.iterator.map(_.toPMessage).toVector)
        case 14 => _root_.scalapb.descriptors.PString(dbName)
        case 15 => _root_.scalapb.descriptors.PLong(numPartitions)
        case 16 => _root_.scalapb.descriptors.PLong(dbId)
        case 17 => _root_.scalapb.descriptors.PLong(requestTime)
        case 18 => _root_.scalapb.descriptors.PLong(updateTimestamp)
        case 19 => _root_.scalapb.descriptors.PString(updateTimestampStr)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.DescribeCollectionResponse.type = io.milvus.grpc.milvus.DescribeCollectionResponse
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.DescribeCollectionResponse])
}

object DescribeCollectionResponse extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.DescribeCollectionResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.DescribeCollectionResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.DescribeCollectionResponse = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    var __schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema] = _root_.scala.None
    var __collectionID: _root_.scala.Long = 0L
    val __virtualChannelNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __physicalChannelNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __createdTimestamp: _root_.scala.Long = 0L
    var __createdUtcTimestamp: _root_.scala.Long = 0L
    var __shardsNum: _root_.scala.Int = 0
    val __aliases: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __startPositions: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyDataPair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyDataPair]
    var __consistencyLevel: io.milvus.grpc.common.ConsistencyLevel = io.milvus.grpc.common.ConsistencyLevel.Strong
    var __collectionName: _root_.scala.Predef.String = ""
    val __properties: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair]
    var __dbName: _root_.scala.Predef.String = ""
    var __numPartitions: _root_.scala.Long = 0L
    var __dbId: _root_.scala.Long = 0L
    var __requestTime: _root_.scala.Long = 0L
    var __updateTimestamp: _root_.scala.Long = 0L
    var __updateTimestampStr: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __schema = _root_.scala.Option(__schema.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.CollectionSchema](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __collectionID = _input__.readInt64()
        case 34 =>
          __virtualChannelNames += _input__.readStringRequireUtf8()
        case 42 =>
          __physicalChannelNames += _input__.readStringRequireUtf8()
        case 48 =>
          __createdTimestamp = _input__.readUInt64()
        case 56 =>
          __createdUtcTimestamp = _input__.readUInt64()
        case 64 =>
          __shardsNum = _input__.readInt32()
        case 74 =>
          __aliases += _input__.readStringRequireUtf8()
        case 82 =>
          __startPositions += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyDataPair](_input__)
        case 88 =>
          __consistencyLevel = io.milvus.grpc.common.ConsistencyLevel.fromValue(_input__.readEnum())
        case 98 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 106 =>
          __properties += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyValuePair](_input__)
        case 114 =>
          __dbName = _input__.readStringRequireUtf8()
        case 120 =>
          __numPartitions = _input__.readInt64()
        case 128 =>
          __dbId = _input__.readInt64()
        case 136 =>
          __requestTime = _input__.readUInt64()
        case 144 =>
          __updateTimestamp = _input__.readUInt64()
        case 154 =>
          __updateTimestampStr = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.DescribeCollectionResponse(
        status = __status,
        schema = __schema,
        collectionID = __collectionID,
        virtualChannelNames = __virtualChannelNames.result(),
        physicalChannelNames = __physicalChannelNames.result(),
        createdTimestamp = __createdTimestamp,
        createdUtcTimestamp = __createdUtcTimestamp,
        shardsNum = __shardsNum,
        aliases = __aliases.result(),
        startPositions = __startPositions.result(),
        consistencyLevel = __consistencyLevel,
        collectionName = __collectionName,
        properties = __properties.result(),
        dbName = __dbName,
        numPartitions = __numPartitions,
        dbId = __dbId,
        requestTime = __requestTime,
        updateTimestamp = __updateTimestamp,
        updateTimestampStr = __updateTimestampStr,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.DescribeCollectionResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.DescribeCollectionResponse(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        schema = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.CollectionSchema]]),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        virtualChannelNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        physicalChannelNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        createdTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        createdUtcTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        shardsNum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        aliases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        startPositions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyDataPair]]).getOrElse(_root_.scala.Seq.empty),
        consistencyLevel = io.milvus.grpc.common.ConsistencyLevel.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.common.ConsistencyLevel.Strong.scalaValueDescriptor).number),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        properties = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]]).getOrElse(_root_.scala.Seq.empty),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        numPartitions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        dbId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        requestTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        updateTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        updateTimestampStr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
      case 2 => __out = io.milvus.grpc.schema.CollectionSchema
      case 10 => __out = io.milvus.grpc.common.KeyDataPair
      case 13 => __out = io.milvus.grpc.common.KeyValuePair
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 11 => io.milvus.grpc.common.ConsistencyLevel
    }
  }
  lazy val defaultInstance = io.milvus.grpc.milvus.DescribeCollectionResponse(
    status = _root_.scala.None,
    schema = _root_.scala.None,
    collectionID = 0L,
    virtualChannelNames = _root_.scala.Seq.empty,
    physicalChannelNames = _root_.scala.Seq.empty,
    createdTimestamp = 0L,
    createdUtcTimestamp = 0L,
    shardsNum = 0,
    aliases = _root_.scala.Seq.empty,
    startPositions = _root_.scala.Seq.empty,
    consistencyLevel = io.milvus.grpc.common.ConsistencyLevel.Strong,
    collectionName = "",
    properties = _root_.scala.Seq.empty,
    dbName = "",
    numPartitions = 0L,
    dbId = 0L,
    requestTime = 0L,
    updateTimestamp = 0L,
    updateTimestampStr = ""
  )
  implicit class DescribeCollectionResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.DescribeCollectionResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.DescribeCollectionResponse](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def schema: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.CollectionSchema] = field(_.getSchema)((c_, f_) => c_.copy(schema = _root_.scala.Option(f_)))
    def optionalSchema: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema]] = field(_.schema)((c_, f_) => c_.copy(schema = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
    def virtualChannelNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.virtualChannelNames)((c_, f_) => c_.copy(virtualChannelNames = f_))
    def physicalChannelNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.physicalChannelNames)((c_, f_) => c_.copy(physicalChannelNames = f_))
    def createdTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.createdTimestamp)((c_, f_) => c_.copy(createdTimestamp = f_))
    def createdUtcTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.createdUtcTimestamp)((c_, f_) => c_.copy(createdUtcTimestamp = f_))
    def shardsNum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shardsNum)((c_, f_) => c_.copy(shardsNum = f_))
    def aliases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.aliases)((c_, f_) => c_.copy(aliases = f_))
    def startPositions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyDataPair]] = field(_.startPositions)((c_, f_) => c_.copy(startPositions = f_))
    def consistencyLevel: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.ConsistencyLevel] = field(_.consistencyLevel)((c_, f_) => c_.copy(consistencyLevel = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def numPartitions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.numPartitions)((c_, f_) => c_.copy(numPartitions = f_))
    def dbId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.dbId)((c_, f_) => c_.copy(dbId = f_))
    def requestTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.requestTime)((c_, f_) => c_.copy(requestTime = f_))
    def updateTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.updateTimestamp)((c_, f_) => c_.copy(updateTimestamp = f_))
    def updateTimestampStr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.updateTimestampStr)((c_, f_) => c_.copy(updateTimestampStr = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val SCHEMA_FIELD_NUMBER = 2
  final val COLLECTIONID_FIELD_NUMBER = 3
  final val VIRTUAL_CHANNEL_NAMES_FIELD_NUMBER = 4
  final val PHYSICAL_CHANNEL_NAMES_FIELD_NUMBER = 5
  final val CREATED_TIMESTAMP_FIELD_NUMBER = 6
  final val CREATED_UTC_TIMESTAMP_FIELD_NUMBER = 7
  final val SHARDS_NUM_FIELD_NUMBER = 8
  final val ALIASES_FIELD_NUMBER = 9
  final val START_POSITIONS_FIELD_NUMBER = 10
  final val CONSISTENCY_LEVEL_FIELD_NUMBER = 11
  final val COLLECTION_NAME_FIELD_NUMBER = 12
  final val PROPERTIES_FIELD_NUMBER = 13
  final val DB_NAME_FIELD_NUMBER = 14
  final val NUM_PARTITIONS_FIELD_NUMBER = 15
  final val DB_ID_FIELD_NUMBER = 16
  final val REQUEST_TIME_FIELD_NUMBER = 17
  final val UPDATE_TIMESTAMP_FIELD_NUMBER = 18
  final val UPDATE_TIMESTAMP_STR_FIELD_NUMBER = 19
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    schema: _root_.scala.Option[io.milvus.grpc.schema.CollectionSchema],
    collectionID: _root_.scala.Long,
    virtualChannelNames: _root_.scala.Seq[_root_.scala.Predef.String],
    physicalChannelNames: _root_.scala.Seq[_root_.scala.Predef.String],
    createdTimestamp: _root_.scala.Long,
    createdUtcTimestamp: _root_.scala.Long,
    shardsNum: _root_.scala.Int,
    aliases: _root_.scala.Seq[_root_.scala.Predef.String],
    startPositions: _root_.scala.Seq[io.milvus.grpc.common.KeyDataPair],
    consistencyLevel: io.milvus.grpc.common.ConsistencyLevel,
    collectionName: _root_.scala.Predef.String,
    properties: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair],
    dbName: _root_.scala.Predef.String,
    numPartitions: _root_.scala.Long,
    dbId: _root_.scala.Long,
    requestTime: _root_.scala.Long,
    updateTimestamp: _root_.scala.Long,
    updateTimestampStr: _root_.scala.Predef.String
  ): _root_.io.milvus.grpc.milvus.DescribeCollectionResponse = _root_.io.milvus.grpc.milvus.DescribeCollectionResponse(
    status,
    schema,
    collectionID,
    virtualChannelNames,
    physicalChannelNames,
    createdTimestamp,
    createdUtcTimestamp,
    shardsNum,
    aliases,
    startPositions,
    consistencyLevel,
    collectionName,
    properties,
    dbName,
    numPartitions,
    dbId,
    requestTime,
    updateTimestamp,
    updateTimestampStr
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.DescribeCollectionResponse])
}
