// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/**
  * Index informations
  *
  * @param indexName
  *   Index name
  * @param indexID
  *   Index id
  * @param params
  *   Will return index_type, metric_type, params(like nlist).
  * @param fieldName
  *   The vector field name
  * @param indexedRows
  *   index build progress
  * @param state
  *   index state
  * @param minIndexVersion
  *   minimal index version for current index 
  * @param maxIndexVersion
  *   maximum index version for current index 
  */
@SerialVersionUID(0L)
final case class IndexDescription(
    indexName: _root_.scala.Predef.String = "",
    indexID: _root_.scala.Long = 0L,
    params: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair] = _root_.scala.Seq.empty,
    fieldName: _root_.scala.Predef.String = "",
    indexedRows: _root_.scala.Long = 0L,
    totalRows: _root_.scala.Long = 0L,
    state: io.milvus.grpc.common.IndexState = io.milvus.grpc.common.IndexState.IndexStateNone,
    indexStateFailReason: _root_.scala.Predef.String = "",
    pendingIndexRows: _root_.scala.Long = 0L,
    minIndexVersion: _root_.scala.Int = 0,
    maxIndexVersion: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IndexDescription] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = indexName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = indexID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      params.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = fieldName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = indexedRows
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = totalRows
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, __value)
        }
      };
      
      {
        val __value = indexStateFailReason
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = pendingIndexRows
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      
      {
        val __value = minIndexVersion
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, __value)
        }
      };
      
      {
        val __value = maxIndexVersion
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = indexName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = indexID
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = fieldName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = indexedRows
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = totalRows
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(7, __v)
        }
      };
      {
        val __v = indexStateFailReason
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = pendingIndexRows
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      {
        val __v = minIndexVersion
        if (__v != 0) {
          _output__.writeInt32(10, __v)
        }
      };
      {
        val __v = maxIndexVersion
        if (__v != 0) {
          _output__.writeInt32(11, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withIndexName(__v: _root_.scala.Predef.String): IndexDescription = copy(indexName = __v)
    def withIndexID(__v: _root_.scala.Long): IndexDescription = copy(indexID = __v)
    def clearParams = copy(params = _root_.scala.Seq.empty)
    def addParams(__vs: io.milvus.grpc.common.KeyValuePair *): IndexDescription = addAllParams(__vs)
    def addAllParams(__vs: Iterable[io.milvus.grpc.common.KeyValuePair]): IndexDescription = copy(params = params ++ __vs)
    def withParams(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]): IndexDescription = copy(params = __v)
    def withFieldName(__v: _root_.scala.Predef.String): IndexDescription = copy(fieldName = __v)
    def withIndexedRows(__v: _root_.scala.Long): IndexDescription = copy(indexedRows = __v)
    def withTotalRows(__v: _root_.scala.Long): IndexDescription = copy(totalRows = __v)
    def withState(__v: io.milvus.grpc.common.IndexState): IndexDescription = copy(state = __v)
    def withIndexStateFailReason(__v: _root_.scala.Predef.String): IndexDescription = copy(indexStateFailReason = __v)
    def withPendingIndexRows(__v: _root_.scala.Long): IndexDescription = copy(pendingIndexRows = __v)
    def withMinIndexVersion(__v: _root_.scala.Int): IndexDescription = copy(minIndexVersion = __v)
    def withMaxIndexVersion(__v: _root_.scala.Int): IndexDescription = copy(maxIndexVersion = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = indexName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = indexID
          if (__t != 0L) __t else null
        }
        case 3 => params
        case 4 => {
          val __t = fieldName
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = indexedRows
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = totalRows
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 8 => {
          val __t = indexStateFailReason
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = pendingIndexRows
          if (__t != 0L) __t else null
        }
        case 10 => {
          val __t = minIndexVersion
          if (__t != 0) __t else null
        }
        case 11 => {
          val __t = maxIndexVersion
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(indexName)
        case 2 => _root_.scalapb.descriptors.PLong(indexID)
        case 3 => _root_.scalapb.descriptors.PRepeated(params.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PString(fieldName)
        case 5 => _root_.scalapb.descriptors.PLong(indexedRows)
        case 6 => _root_.scalapb.descriptors.PLong(totalRows)
        case 7 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 8 => _root_.scalapb.descriptors.PString(indexStateFailReason)
        case 9 => _root_.scalapb.descriptors.PLong(pendingIndexRows)
        case 10 => _root_.scalapb.descriptors.PInt(minIndexVersion)
        case 11 => _root_.scalapb.descriptors.PInt(maxIndexVersion)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.IndexDescription.type = io.milvus.grpc.milvus.IndexDescription
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.IndexDescription])
}

object IndexDescription extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.IndexDescription] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.IndexDescription] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.IndexDescription = {
    var __indexName: _root_.scala.Predef.String = ""
    var __indexID: _root_.scala.Long = 0L
    val __params: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair]
    var __fieldName: _root_.scala.Predef.String = ""
    var __indexedRows: _root_.scala.Long = 0L
    var __totalRows: _root_.scala.Long = 0L
    var __state: io.milvus.grpc.common.IndexState = io.milvus.grpc.common.IndexState.IndexStateNone
    var __indexStateFailReason: _root_.scala.Predef.String = ""
    var __pendingIndexRows: _root_.scala.Long = 0L
    var __minIndexVersion: _root_.scala.Int = 0
    var __maxIndexVersion: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __indexName = _input__.readStringRequireUtf8()
        case 16 =>
          __indexID = _input__.readInt64()
        case 26 =>
          __params += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyValuePair](_input__)
        case 34 =>
          __fieldName = _input__.readStringRequireUtf8()
        case 40 =>
          __indexedRows = _input__.readInt64()
        case 48 =>
          __totalRows = _input__.readInt64()
        case 56 =>
          __state = io.milvus.grpc.common.IndexState.fromValue(_input__.readEnum())
        case 66 =>
          __indexStateFailReason = _input__.readStringRequireUtf8()
        case 72 =>
          __pendingIndexRows = _input__.readInt64()
        case 80 =>
          __minIndexVersion = _input__.readInt32()
        case 88 =>
          __maxIndexVersion = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.IndexDescription(
        indexName = __indexName,
        indexID = __indexID,
        params = __params.result(),
        fieldName = __fieldName,
        indexedRows = __indexedRows,
        totalRows = __totalRows,
        state = __state,
        indexStateFailReason = __indexStateFailReason,
        pendingIndexRows = __pendingIndexRows,
        minIndexVersion = __minIndexVersion,
        maxIndexVersion = __maxIndexVersion,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.IndexDescription] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.IndexDescription(
        indexName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        indexID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]]).getOrElse(_root_.scala.Seq.empty),
        fieldName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        indexedRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        totalRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        state = io.milvus.grpc.common.IndexState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.common.IndexState.IndexStateNone.scalaValueDescriptor).number),
        indexStateFailReason = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        pendingIndexRows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        minIndexVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        maxIndexVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.milvus.grpc.common.KeyValuePair
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => io.milvus.grpc.common.IndexState
    }
  }
  lazy val defaultInstance = io.milvus.grpc.milvus.IndexDescription(
    indexName = "",
    indexID = 0L,
    params = _root_.scala.Seq.empty,
    fieldName = "",
    indexedRows = 0L,
    totalRows = 0L,
    state = io.milvus.grpc.common.IndexState.IndexStateNone,
    indexStateFailReason = "",
    pendingIndexRows = 0L,
    minIndexVersion = 0,
    maxIndexVersion = 0
  )
  implicit class IndexDescriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.IndexDescription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.IndexDescription](_l) {
    def indexName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.indexName)((c_, f_) => c_.copy(indexName = f_))
    def indexID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.indexID)((c_, f_) => c_.copy(indexID = f_))
    def params: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def fieldName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fieldName)((c_, f_) => c_.copy(fieldName = f_))
    def indexedRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.indexedRows)((c_, f_) => c_.copy(indexedRows = f_))
    def totalRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalRows)((c_, f_) => c_.copy(totalRows = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.IndexState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def indexStateFailReason: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.indexStateFailReason)((c_, f_) => c_.copy(indexStateFailReason = f_))
    def pendingIndexRows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.pendingIndexRows)((c_, f_) => c_.copy(pendingIndexRows = f_))
    def minIndexVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.minIndexVersion)((c_, f_) => c_.copy(minIndexVersion = f_))
    def maxIndexVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxIndexVersion)((c_, f_) => c_.copy(maxIndexVersion = f_))
  }
  final val INDEX_NAME_FIELD_NUMBER = 1
  final val INDEXID_FIELD_NUMBER = 2
  final val PARAMS_FIELD_NUMBER = 3
  final val FIELD_NAME_FIELD_NUMBER = 4
  final val INDEXED_ROWS_FIELD_NUMBER = 5
  final val TOTAL_ROWS_FIELD_NUMBER = 6
  final val STATE_FIELD_NUMBER = 7
  final val INDEX_STATE_FAIL_REASON_FIELD_NUMBER = 8
  final val PENDING_INDEX_ROWS_FIELD_NUMBER = 9
  final val MIN_INDEX_VERSION_FIELD_NUMBER = 10
  final val MAX_INDEX_VERSION_FIELD_NUMBER = 11
  def of(
    indexName: _root_.scala.Predef.String,
    indexID: _root_.scala.Long,
    params: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair],
    fieldName: _root_.scala.Predef.String,
    indexedRows: _root_.scala.Long,
    totalRows: _root_.scala.Long,
    state: io.milvus.grpc.common.IndexState,
    indexStateFailReason: _root_.scala.Predef.String,
    pendingIndexRows: _root_.scala.Long,
    minIndexVersion: _root_.scala.Int,
    maxIndexVersion: _root_.scala.Int
  ): _root_.io.milvus.grpc.milvus.IndexDescription = _root_.io.milvus.grpc.milvus.IndexDescription(
    indexName,
    indexID,
    params,
    fieldName,
    indexedRows,
    totalRows,
    state,
    indexStateFailReason,
    pendingIndexRows,
    minIndexVersion,
    maxIndexVersion
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.IndexDescription])
}
