// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param state
  *   is this import task finished or not
  * @param rowCount
  *   if the task is finished, this value is how many rows are imported. if the task is not finished, this value is how many rows are parsed. return 0 if failed.
  * @param idList
  *   auto generated ids if the primary key is autoid
  * @param infos
  *   more information about the task, progress percent, file path, failed reason, etc.
  * @param id
  *   id of an import task
  * @param collectionId
  *   collection ID of the import task.
  * @param segmentIds
  *   a list of segment IDs created by the import task.
  * @param createTs
  *   timestamp when the import task is created.
  */
@SerialVersionUID(0L)
final case class GetImportStateResponse(
    status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
    state: io.milvus.grpc.common.ImportState = io.milvus.grpc.common.ImportState.ImportPending,
    rowCount: _root_.scala.Long = 0L,
    idList: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    infos: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair] = _root_.scala.Seq.empty,
    id: _root_.scala.Long = 0L,
    collectionId: _root_.scala.Long = 0L,
    segmentIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    createTs: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetImportStateResponse] {
    private[this] def idListSerializedSize = {
      if (__idListSerializedSizeField == 0) __idListSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        idList.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __idListSerializedSizeField
    }
    @transient private[this] var __idListSerializedSizeField: _root_.scala.Int = 0
    private[this] def segmentIdsSerializedSize = {
      if (__segmentIdsSerializedSizeField == 0) __segmentIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        segmentIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __segmentIdsSerializedSizeField
    }
    @transient private[this] var __segmentIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      
      {
        val __value = rowCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      if (idList.nonEmpty) {
        val __localsize = idListSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      infos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = id
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = collectionId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      if (segmentIds.nonEmpty) {
        val __localsize = segmentIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = createTs
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      {
        val __v = rowCount
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      if (idList.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(idListSerializedSize)
        idList.foreach(_output__.writeInt64NoTag)
      };
      infos.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = collectionId
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      if (segmentIds.nonEmpty) {
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(segmentIdsSerializedSize)
        segmentIds.foreach(_output__.writeInt64NoTag)
      };
      {
        val __v = createTs
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: GetImportStateResponse = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): GetImportStateResponse = copy(status = Option(__v))
    def withState(__v: io.milvus.grpc.common.ImportState): GetImportStateResponse = copy(state = __v)
    def withRowCount(__v: _root_.scala.Long): GetImportStateResponse = copy(rowCount = __v)
    def clearIdList = copy(idList = _root_.scala.Seq.empty)
    def addIdList(__vs: _root_.scala.Long *): GetImportStateResponse = addAllIdList(__vs)
    def addAllIdList(__vs: Iterable[_root_.scala.Long]): GetImportStateResponse = copy(idList = idList ++ __vs)
    def withIdList(__v: _root_.scala.Seq[_root_.scala.Long]): GetImportStateResponse = copy(idList = __v)
    def clearInfos = copy(infos = _root_.scala.Seq.empty)
    def addInfos(__vs: io.milvus.grpc.common.KeyValuePair *): GetImportStateResponse = addAllInfos(__vs)
    def addAllInfos(__vs: Iterable[io.milvus.grpc.common.KeyValuePair]): GetImportStateResponse = copy(infos = infos ++ __vs)
    def withInfos(__v: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]): GetImportStateResponse = copy(infos = __v)
    def withId(__v: _root_.scala.Long): GetImportStateResponse = copy(id = __v)
    def withCollectionId(__v: _root_.scala.Long): GetImportStateResponse = copy(collectionId = __v)
    def clearSegmentIds = copy(segmentIds = _root_.scala.Seq.empty)
    def addSegmentIds(__vs: _root_.scala.Long *): GetImportStateResponse = addAllSegmentIds(__vs)
    def addAllSegmentIds(__vs: Iterable[_root_.scala.Long]): GetImportStateResponse = copy(segmentIds = segmentIds ++ __vs)
    def withSegmentIds(__v: _root_.scala.Seq[_root_.scala.Long]): GetImportStateResponse = copy(segmentIds = __v)
    def withCreateTs(__v: _root_.scala.Long): GetImportStateResponse = copy(createTs = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = rowCount
          if (__t != 0L) __t else null
        }
        case 4 => idList
        case 5 => infos
        case 6 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = collectionId
          if (__t != 0L) __t else null
        }
        case 8 => segmentIds
        case 9 => {
          val __t = createTs
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PLong(rowCount)
        case 4 => _root_.scalapb.descriptors.PRepeated(idList.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(infos.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PLong(id)
        case 7 => _root_.scalapb.descriptors.PLong(collectionId)
        case 8 => _root_.scalapb.descriptors.PRepeated(segmentIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 9 => _root_.scalapb.descriptors.PLong(createTs)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.GetImportStateResponse.type = io.milvus.grpc.milvus.GetImportStateResponse
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.GetImportStateResponse])
}

object GetImportStateResponse extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.GetImportStateResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.GetImportStateResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.GetImportStateResponse = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    var __state: io.milvus.grpc.common.ImportState = io.milvus.grpc.common.ImportState.ImportPending
    var __rowCount: _root_.scala.Long = 0L
    val __idList: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __infos: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.KeyValuePair]
    var __id: _root_.scala.Long = 0L
    var __collectionId: _root_.scala.Long = 0L
    val __segmentIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var __createTs: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __state = io.milvus.grpc.common.ImportState.fromValue(_input__.readEnum())
        case 24 =>
          __rowCount = _input__.readInt64()
        case 32 =>
          __idList += _input__.readInt64()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __idList += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 42 =>
          __infos += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.KeyValuePair](_input__)
        case 48 =>
          __id = _input__.readInt64()
        case 56 =>
          __collectionId = _input__.readInt64()
        case 64 =>
          __segmentIds += _input__.readInt64()
        case 66 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __segmentIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 72 =>
          __createTs = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.GetImportStateResponse(
        status = __status,
        state = __state,
        rowCount = __rowCount,
        idList = __idList.result(),
        infos = __infos.result(),
        id = __id,
        collectionId = __collectionId,
        segmentIds = __segmentIds.result(),
        createTs = __createTs,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.GetImportStateResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.GetImportStateResponse(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        state = io.milvus.grpc.common.ImportState.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.common.ImportState.ImportPending.scalaValueDescriptor).number),
        rowCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        idList = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        infos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]]).getOrElse(_root_.scala.Seq.empty),
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        collectionId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        segmentIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        createTs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(100)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(100)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
      case 5 => __out = io.milvus.grpc.common.KeyValuePair
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.milvus.grpc.common.ImportState
    }
  }
  lazy val defaultInstance = io.milvus.grpc.milvus.GetImportStateResponse(
    status = _root_.scala.None,
    state = io.milvus.grpc.common.ImportState.ImportPending,
    rowCount = 0L,
    idList = _root_.scala.Seq.empty,
    infos = _root_.scala.Seq.empty,
    id = 0L,
    collectionId = 0L,
    segmentIds = _root_.scala.Seq.empty,
    createTs = 0L
  )
  implicit class GetImportStateResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.GetImportStateResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.GetImportStateResponse](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.ImportState] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def rowCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.rowCount)((c_, f_) => c_.copy(rowCount = f_))
    def idList: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.idList)((c_, f_) => c_.copy(idList = f_))
    def infos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair]] = field(_.infos)((c_, f_) => c_.copy(infos = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def collectionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectionId)((c_, f_) => c_.copy(collectionId = f_))
    def segmentIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.segmentIds)((c_, f_) => c_.copy(segmentIds = f_))
    def createTs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.createTs)((c_, f_) => c_.copy(createTs = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val STATE_FIELD_NUMBER = 2
  final val ROW_COUNT_FIELD_NUMBER = 3
  final val ID_LIST_FIELD_NUMBER = 4
  final val INFOS_FIELD_NUMBER = 5
  final val ID_FIELD_NUMBER = 6
  final val COLLECTION_ID_FIELD_NUMBER = 7
  final val SEGMENT_IDS_FIELD_NUMBER = 8
  final val CREATE_TS_FIELD_NUMBER = 9
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    state: io.milvus.grpc.common.ImportState,
    rowCount: _root_.scala.Long,
    idList: _root_.scala.Seq[_root_.scala.Long],
    infos: _root_.scala.Seq[io.milvus.grpc.common.KeyValuePair],
    id: _root_.scala.Long,
    collectionId: _root_.scala.Long,
    segmentIds: _root_.scala.Seq[_root_.scala.Long],
    createTs: _root_.scala.Long
  ): _root_.io.milvus.grpc.milvus.GetImportStateResponse = _root_.io.milvus.grpc.milvus.GetImportStateResponse(
    status,
    state,
    rowCount,
    idList,
    infos,
    id,
    collectionId,
    segmentIds,
    createTs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.GetImportStateResponse])
}
