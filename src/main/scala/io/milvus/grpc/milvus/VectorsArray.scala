// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class VectorsArray(
    array: io.milvus.grpc.milvus.VectorsArray.Array = io.milvus.grpc.milvus.VectorsArray.Array.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[VectorsArray] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (array.idArray.isDefined) {
        val __value = array.idArray.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (array.dataArray.isDefined) {
        val __value = array.dataArray.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      array.idArray.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      array.dataArray.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getIdArray: io.milvus.grpc.milvus.VectorIDs = array.idArray.getOrElse(io.milvus.grpc.milvus.VectorIDs.defaultInstance)
    def withIdArray(__v: io.milvus.grpc.milvus.VectorIDs): VectorsArray = copy(array = io.milvus.grpc.milvus.VectorsArray.Array.IdArray(__v))
    def getDataArray: io.milvus.grpc.schema.VectorField = array.dataArray.getOrElse(io.milvus.grpc.schema.VectorField.defaultInstance)
    def withDataArray(__v: io.milvus.grpc.schema.VectorField): VectorsArray = copy(array = io.milvus.grpc.milvus.VectorsArray.Array.DataArray(__v))
    def clearArray: VectorsArray = copy(array = io.milvus.grpc.milvus.VectorsArray.Array.Empty)
    def withArray(__v: io.milvus.grpc.milvus.VectorsArray.Array): VectorsArray = copy(array = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => array.idArray.orNull
        case 2 => array.dataArray.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => array.idArray.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => array.dataArray.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.VectorsArray.type = io.milvus.grpc.milvus.VectorsArray
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.VectorsArray])
}

object VectorsArray extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.VectorsArray] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.VectorsArray] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.VectorsArray = {
    var __array: io.milvus.grpc.milvus.VectorsArray.Array = io.milvus.grpc.milvus.VectorsArray.Array.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __array = io.milvus.grpc.milvus.VectorsArray.Array.IdArray(__array.idArray.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.VectorIDs](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __array = io.milvus.grpc.milvus.VectorsArray.Array.DataArray(__array.dataArray.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.VectorField](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.VectorsArray(
        array = __array,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.VectorsArray] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.VectorsArray(
        array = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.milvus.VectorIDs]]).map(io.milvus.grpc.milvus.VectorsArray.Array.IdArray(_))
            .orElse[io.milvus.grpc.milvus.VectorsArray.Array](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.VectorField]]).map(io.milvus.grpc.milvus.VectorsArray.Array.DataArray(_)))
            .getOrElse(io.milvus.grpc.milvus.VectorsArray.Array.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(65)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(65)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.milvus.VectorIDs
      case 2 => __out = io.milvus.grpc.schema.VectorField
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.VectorsArray(
    array = io.milvus.grpc.milvus.VectorsArray.Array.Empty
  )
  sealed abstract class Array extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isIdArray: _root_.scala.Boolean = false
    def isDataArray: _root_.scala.Boolean = false
    def idArray: _root_.scala.Option[io.milvus.grpc.milvus.VectorIDs] = _root_.scala.None
    def dataArray: _root_.scala.Option[io.milvus.grpc.schema.VectorField] = _root_.scala.None
  }
  object Array {
    @SerialVersionUID(0L)
    case object Empty extends io.milvus.grpc.milvus.VectorsArray.Array {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class IdArray(value: io.milvus.grpc.milvus.VectorIDs) extends io.milvus.grpc.milvus.VectorsArray.Array {
      type ValueType = io.milvus.grpc.milvus.VectorIDs
      override def isIdArray: _root_.scala.Boolean = true
      override def idArray: _root_.scala.Option[io.milvus.grpc.milvus.VectorIDs] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class DataArray(value: io.milvus.grpc.schema.VectorField) extends io.milvus.grpc.milvus.VectorsArray.Array {
      type ValueType = io.milvus.grpc.schema.VectorField
      override def isDataArray: _root_.scala.Boolean = true
      override def dataArray: _root_.scala.Option[io.milvus.grpc.schema.VectorField] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class VectorsArrayLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.VectorsArray]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.VectorsArray](_l) {
    def idArray: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.VectorIDs] = field(_.getIdArray)((c_, f_) => c_.copy(array = io.milvus.grpc.milvus.VectorsArray.Array.IdArray(f_)))
    def dataArray: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.VectorField] = field(_.getDataArray)((c_, f_) => c_.copy(array = io.milvus.grpc.milvus.VectorsArray.Array.DataArray(f_)))
    def array: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.VectorsArray.Array] = field(_.array)((c_, f_) => c_.copy(array = f_))
  }
  final val ID_ARRAY_FIELD_NUMBER = 1
  final val DATA_ARRAY_FIELD_NUMBER = 2
  def of(
    array: io.milvus.grpc.milvus.VectorsArray.Array
  ): _root_.io.milvus.grpc.milvus.VectorsArray = _root_.io.milvus.grpc.milvus.VectorsArray(
    array
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.VectorsArray])
}
