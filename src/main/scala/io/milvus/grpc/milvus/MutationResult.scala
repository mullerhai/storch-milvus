// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param iDs
  *   required for insert, delete, upsert
  * @param succIndex
  *   error indexes indicate
  * @param errIndex
  *   error indexes indicate
  */
@SerialVersionUID(0L)
final case class MutationResult(
    status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
    iDs: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None,
    succIndex: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    errIndex: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    acknowledged: _root_.scala.Boolean = false,
    insertCnt: _root_.scala.Long = 0L,
    deleteCnt: _root_.scala.Long = 0L,
    upsertCnt: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MutationResult] {
    private[this] def succIndexSerializedSize = {
      if (__succIndexSerializedSizeField == 0) __succIndexSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        succIndex.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __succIndexSerializedSizeField
    }
    @transient private[this] var __succIndexSerializedSizeField: _root_.scala.Int = 0
    private[this] def errIndexSerializedSize = {
      if (__errIndexSerializedSizeField == 0) __errIndexSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        errIndex.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __errIndexSerializedSizeField
    }
    @transient private[this] var __errIndexSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (iDs.isDefined) {
        val __value = iDs.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (succIndex.nonEmpty) {
        val __localsize = succIndexSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (errIndex.nonEmpty) {
        val __localsize = errIndexSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = acknowledged
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = insertCnt
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      
      {
        val __value = deleteCnt
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      
      {
        val __value = upsertCnt
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
        }
      };
      
      {
        val __value = timestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      iDs.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (succIndex.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(succIndexSerializedSize)
        succIndex.foreach(_output__.writeUInt32NoTag)
      };
      if (errIndex.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(errIndexSerializedSize)
        errIndex.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = acknowledged
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = insertCnt
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = deleteCnt
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      {
        val __v = upsertCnt
        if (__v != 0L) {
          _output__.writeInt64(8, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeUInt64(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: MutationResult = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): MutationResult = copy(status = Option(__v))
    def getIDs: io.milvus.grpc.schema.IDs = iDs.getOrElse(io.milvus.grpc.schema.IDs.defaultInstance)
    def clearIDs: MutationResult = copy(iDs = _root_.scala.None)
    def withIDs(__v: io.milvus.grpc.schema.IDs): MutationResult = copy(iDs = Option(__v))
    def clearSuccIndex = copy(succIndex = _root_.scala.Seq.empty)
    def addSuccIndex(__vs: _root_.scala.Int *): MutationResult = addAllSuccIndex(__vs)
    def addAllSuccIndex(__vs: Iterable[_root_.scala.Int]): MutationResult = copy(succIndex = succIndex ++ __vs)
    def withSuccIndex(__v: _root_.scala.Seq[_root_.scala.Int]): MutationResult = copy(succIndex = __v)
    def clearErrIndex = copy(errIndex = _root_.scala.Seq.empty)
    def addErrIndex(__vs: _root_.scala.Int *): MutationResult = addAllErrIndex(__vs)
    def addAllErrIndex(__vs: Iterable[_root_.scala.Int]): MutationResult = copy(errIndex = errIndex ++ __vs)
    def withErrIndex(__v: _root_.scala.Seq[_root_.scala.Int]): MutationResult = copy(errIndex = __v)
    def withAcknowledged(__v: _root_.scala.Boolean): MutationResult = copy(acknowledged = __v)
    def withInsertCnt(__v: _root_.scala.Long): MutationResult = copy(insertCnt = __v)
    def withDeleteCnt(__v: _root_.scala.Long): MutationResult = copy(deleteCnt = __v)
    def withUpsertCnt(__v: _root_.scala.Long): MutationResult = copy(upsertCnt = __v)
    def withTimestamp(__v: _root_.scala.Long): MutationResult = copy(timestamp = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => iDs.orNull
        case 3 => succIndex
        case 4 => errIndex
        case 5 => {
          val __t = acknowledged
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = insertCnt
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = deleteCnt
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = upsertCnt
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => iDs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(succIndex.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(errIndex.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PBoolean(acknowledged)
        case 6 => _root_.scalapb.descriptors.PLong(insertCnt)
        case 7 => _root_.scalapb.descriptors.PLong(deleteCnt)
        case 8 => _root_.scalapb.descriptors.PLong(upsertCnt)
        case 9 => _root_.scalapb.descriptors.PLong(timestamp)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.MutationResult.type = io.milvus.grpc.milvus.MutationResult
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.MutationResult])
}

object MutationResult extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.MutationResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.MutationResult] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.MutationResult = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    var __iDs: _root_.scala.Option[io.milvus.grpc.schema.IDs] = _root_.scala.None
    val __succIndex: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __errIndex: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __acknowledged: _root_.scala.Boolean = false
    var __insertCnt: _root_.scala.Long = 0L
    var __deleteCnt: _root_.scala.Long = 0L
    var __upsertCnt: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __iDs = _root_.scala.Option(__iDs.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.schema.IDs](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __succIndex += _input__.readUInt32()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __succIndex += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 32 =>
          __errIndex += _input__.readUInt32()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __errIndex += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 40 =>
          __acknowledged = _input__.readBool()
        case 48 =>
          __insertCnt = _input__.readInt64()
        case 56 =>
          __deleteCnt = _input__.readInt64()
        case 64 =>
          __upsertCnt = _input__.readInt64()
        case 72 =>
          __timestamp = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.MutationResult(
        status = __status,
        iDs = __iDs,
        succIndex = __succIndex.result(),
        errIndex = __errIndex.result(),
        acknowledged = __acknowledged,
        insertCnt = __insertCnt,
        deleteCnt = __deleteCnt,
        upsertCnt = __upsertCnt,
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.MutationResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.MutationResult(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        iDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.schema.IDs]]),
        succIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        errIndex = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        acknowledged = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        insertCnt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        deleteCnt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        upsertCnt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(52)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(52)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
      case 2 => __out = io.milvus.grpc.schema.IDs
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.MutationResult(
    status = _root_.scala.None,
    iDs = _root_.scala.None,
    succIndex = _root_.scala.Seq.empty,
    errIndex = _root_.scala.Seq.empty,
    acknowledged = false,
    insertCnt = 0L,
    deleteCnt = 0L,
    upsertCnt = 0L,
    timestamp = 0L
  )
  implicit class MutationResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.MutationResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.MutationResult](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def iDs: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.schema.IDs] = field(_.getIDs)((c_, f_) => c_.copy(iDs = _root_.scala.Option(f_)))
    def optionalIDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.schema.IDs]] = field(_.iDs)((c_, f_) => c_.copy(iDs = f_))
    def succIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.succIndex)((c_, f_) => c_.copy(succIndex = f_))
    def errIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.errIndex)((c_, f_) => c_.copy(errIndex = f_))
    def acknowledged: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.acknowledged)((c_, f_) => c_.copy(acknowledged = f_))
    def insertCnt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.insertCnt)((c_, f_) => c_.copy(insertCnt = f_))
    def deleteCnt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deleteCnt)((c_, f_) => c_.copy(deleteCnt = f_))
    def upsertCnt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.upsertCnt)((c_, f_) => c_.copy(upsertCnt = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val IDS_FIELD_NUMBER = 2
  final val SUCC_INDEX_FIELD_NUMBER = 3
  final val ERR_INDEX_FIELD_NUMBER = 4
  final val ACKNOWLEDGED_FIELD_NUMBER = 5
  final val INSERT_CNT_FIELD_NUMBER = 6
  final val DELETE_CNT_FIELD_NUMBER = 7
  final val UPSERT_CNT_FIELD_NUMBER = 8
  final val TIMESTAMP_FIELD_NUMBER = 9
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    iDs: _root_.scala.Option[io.milvus.grpc.schema.IDs],
    succIndex: _root_.scala.Seq[_root_.scala.Int],
    errIndex: _root_.scala.Seq[_root_.scala.Int],
    acknowledged: _root_.scala.Boolean,
    insertCnt: _root_.scala.Long,
    deleteCnt: _root_.scala.Long,
    upsertCnt: _root_.scala.Long,
    timestamp: _root_.scala.Long
  ): _root_.io.milvus.grpc.milvus.MutationResult = _root_.io.milvus.grpc.milvus.MutationResult(
    status,
    iDs,
    succIndex,
    errIndex,
    acknowledged,
    insertCnt,
    deleteCnt,
    upsertCnt,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.MutationResult])
}
