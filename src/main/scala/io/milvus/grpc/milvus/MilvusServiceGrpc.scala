// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

import milvus.proto.feder.{DescribeSegmentIndexDataRequest, DescribeSegmentIndexDataResponse, ListIndexedSegmentRequest, ListIndexedSegmentResponse}

object MilvusServiceGrpc {
  val METHOD_CREATE_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_DROP_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_HAS_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.HasCollectionRequest, io.milvus.grpc.milvus.BoolResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "HasCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.HasCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BoolResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_LOAD_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.LoadCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "LoadCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.LoadCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_RELEASE_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ReleaseCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ReleaseCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ReleaseCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_DESCRIBE_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DescribeCollectionRequest, io.milvus.grpc.milvus.DescribeCollectionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeCollectionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_BATCH_DESCRIBE_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.BatchDescribeCollectionRequest, io.milvus.grpc.milvus.BatchDescribeCollectionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "BatchDescribeCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BatchDescribeCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BatchDescribeCollectionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_GET_COLLECTION_STATISTICS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetCollectionStatisticsRequest, io.milvus.grpc.milvus.GetCollectionStatisticsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetCollectionStatistics"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCollectionStatisticsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCollectionStatisticsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val METHOD_SHOW_COLLECTIONS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ShowCollectionsRequest, io.milvus.grpc.milvus.ShowCollectionsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ShowCollections"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ShowCollectionsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ShowCollectionsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(8)))
      .build()
  
  val METHOD_ALTER_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AlterCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AlterCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AlterCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(9)))
      .build()
  
  val METHOD_ALTER_COLLECTION_FIELD: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AlterCollectionFieldRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AlterCollectionField"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AlterCollectionFieldRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(10)))
      .build()
  
  val METHOD_CREATE_PARTITION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreatePartitionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreatePartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreatePartitionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(11)))
      .build()
  
  val METHOD_DROP_PARTITION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropPartitionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropPartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropPartitionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(12)))
      .build()
  
  val METHOD_HAS_PARTITION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.HasPartitionRequest, io.milvus.grpc.milvus.BoolResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "HasPartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.HasPartitionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BoolResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(13)))
      .build()
  
  val METHOD_LOAD_PARTITIONS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.LoadPartitionsRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "LoadPartitions"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.LoadPartitionsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(14)))
      .build()
  
  val METHOD_RELEASE_PARTITIONS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ReleasePartitionsRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ReleasePartitions"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ReleasePartitionsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(15)))
      .build()
  
  val METHOD_GET_PARTITION_STATISTICS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetPartitionStatisticsRequest, io.milvus.grpc.milvus.GetPartitionStatisticsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetPartitionStatistics"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetPartitionStatisticsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetPartitionStatisticsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(16)))
      .build()
  
  val METHOD_SHOW_PARTITIONS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ShowPartitionsRequest, io.milvus.grpc.milvus.ShowPartitionsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ShowPartitions"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ShowPartitionsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ShowPartitionsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(17)))
      .build()
  
  val METHOD_GET_LOADING_PROGRESS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetLoadingProgressRequest, io.milvus.grpc.milvus.GetLoadingProgressResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetLoadingProgress"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetLoadingProgressRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetLoadingProgressResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(18)))
      .build()
  
  val METHOD_GET_LOAD_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetLoadStateRequest, io.milvus.grpc.milvus.GetLoadStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetLoadState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetLoadStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetLoadStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(19)))
      .build()
  
  val METHOD_CREATE_ALIAS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateAliasRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateAlias"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateAliasRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(20)))
      .build()
  
  val METHOD_DROP_ALIAS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropAliasRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropAlias"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropAliasRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(21)))
      .build()
  
  val METHOD_ALTER_ALIAS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AlterAliasRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AlterAlias"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AlterAliasRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(22)))
      .build()
  
  val METHOD_DESCRIBE_ALIAS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DescribeAliasRequest, io.milvus.grpc.milvus.DescribeAliasResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeAlias"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeAliasRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeAliasResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(23)))
      .build()
  
  val METHOD_LIST_ALIASES: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListAliasesRequest, io.milvus.grpc.milvus.ListAliasesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListAliases"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListAliasesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListAliasesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(24)))
      .build()
  
  val METHOD_CREATE_INDEX: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateIndexRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateIndex"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateIndexRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(25)))
      .build()
  
  val METHOD_ALTER_INDEX: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AlterIndexRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AlterIndex"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AlterIndexRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(26)))
      .build()
  
  val METHOD_DESCRIBE_INDEX: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DescribeIndexRequest, io.milvus.grpc.milvus.DescribeIndexResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeIndex"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeIndexRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeIndexResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(27)))
      .build()
  
  val METHOD_GET_INDEX_STATISTICS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetIndexStatisticsRequest, io.milvus.grpc.milvus.GetIndexStatisticsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetIndexStatistics"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexStatisticsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexStatisticsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(28)))
      .build()
  
  @scala.deprecated(message="Marked as deprecated in proto file", "") val METHOD_GET_INDEX_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetIndexStateRequest, io.milvus.grpc.milvus.GetIndexStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetIndexState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(29)))
      .build()
  
  @scala.deprecated(message="Marked as deprecated in proto file", "") val METHOD_GET_INDEX_BUILD_PROGRESS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetIndexBuildProgressRequest, io.milvus.grpc.milvus.GetIndexBuildProgressResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetIndexBuildProgress"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexBuildProgressRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetIndexBuildProgressResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(30)))
      .build()
  
  val METHOD_DROP_INDEX: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropIndexRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropIndex"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropIndexRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(31)))
      .build()
  
  val METHOD_INSERT: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.InsertRequest, io.milvus.grpc.milvus.MutationResult] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Insert"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.InsertRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.MutationResult])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(32)))
      .build()
  
  val METHOD_DELETE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DeleteRequest, io.milvus.grpc.milvus.MutationResult] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Delete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DeleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.MutationResult])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(33)))
      .build()
  
  val METHOD_UPSERT: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.UpsertRequest, io.milvus.grpc.milvus.MutationResult] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Upsert"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.UpsertRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.MutationResult])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(34)))
      .build()
  
  val METHOD_SEARCH: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.SearchRequest, io.milvus.grpc.milvus.SearchResults] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Search"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SearchRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SearchResults])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(35)))
      .build()
  
  val METHOD_HYBRID_SEARCH: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.HybridSearchRequest, io.milvus.grpc.milvus.SearchResults] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "HybridSearch"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.HybridSearchRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SearchResults])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(36)))
      .build()
  
  val METHOD_FLUSH: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.FlushRequest, io.milvus.grpc.milvus.FlushResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Flush"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.FlushRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.FlushResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(37)))
      .build()
  
  val METHOD_QUERY: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.QueryRequest, io.milvus.grpc.milvus.QueryResults] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Query"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.QueryRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.QueryResults])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(38)))
      .build()
  
  val METHOD_CALC_DISTANCE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CalcDistanceRequest, io.milvus.grpc.milvus.CalcDistanceResults] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CalcDistance"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CalcDistanceRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CalcDistanceResults])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(39)))
      .build()
  
  val METHOD_FLUSH_ALL: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.FlushAllRequest, io.milvus.grpc.milvus.FlushAllResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "FlushAll"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.FlushAllRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.FlushAllResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(40)))
      .build()
  
  val METHOD_ADD_COLLECTION_FIELD: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AddCollectionFieldRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AddCollectionField"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AddCollectionFieldRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(41)))
      .build()
  
  val METHOD_GET_FLUSH_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetFlushStateRequest, io.milvus.grpc.milvus.GetFlushStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetFlushState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetFlushStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetFlushStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(42)))
      .build()
  
  val METHOD_GET_FLUSH_ALL_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetFlushAllStateRequest, io.milvus.grpc.milvus.GetFlushAllStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetFlushAllState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetFlushAllStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetFlushAllStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(43)))
      .build()
  
  val METHOD_GET_PERSISTENT_SEGMENT_INFO: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest, io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetPersistentSegmentInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(44)))
      .build()
  
  val METHOD_GET_QUERY_SEGMENT_INFO: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetQuerySegmentInfoRequest, io.milvus.grpc.milvus.GetQuerySegmentInfoResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetQuerySegmentInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetQuerySegmentInfoRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetQuerySegmentInfoResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(45)))
      .build()
  
  val METHOD_GET_REPLICAS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetReplicasRequest, io.milvus.grpc.milvus.GetReplicasResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetReplicas"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetReplicasRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetReplicasResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(46)))
      .build()
  
  val METHOD_DUMMY: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DummyRequest, io.milvus.grpc.milvus.DummyResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Dummy"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DummyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DummyResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(47)))
      .build()
  
  val METHOD_REGISTER_LINK: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RegisterLinkRequest, io.milvus.grpc.milvus.RegisterLinkResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "RegisterLink"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RegisterLinkRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RegisterLinkResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(48)))
      .build()
  
  val METHOD_GET_METRICS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetMetricsRequest, io.milvus.grpc.milvus.GetMetricsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetMetrics"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetMetricsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetMetricsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(49)))
      .build()
  
  val METHOD_GET_COMPONENT_STATES: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetComponentStatesRequest, io.milvus.grpc.milvus.ComponentStates] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetComponentStates"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetComponentStatesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ComponentStates])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(50)))
      .build()
  
  val METHOD_LOAD_BALANCE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.LoadBalanceRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "LoadBalance"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.LoadBalanceRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(51)))
      .build()
  
  val METHOD_GET_COMPACTION_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetCompactionStateRequest, io.milvus.grpc.milvus.GetCompactionStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetCompactionState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCompactionStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCompactionStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(52)))
      .build()
  
  val METHOD_MANUAL_COMPACTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ManualCompactionRequest, io.milvus.grpc.milvus.ManualCompactionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ManualCompaction"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ManualCompactionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ManualCompactionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(53)))
      .build()
  
  val METHOD_GET_COMPACTION_STATE_WITH_PLANS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetCompactionPlansRequest, io.milvus.grpc.milvus.GetCompactionPlansResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetCompactionStateWithPlans"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCompactionPlansRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetCompactionPlansResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(54)))
      .build()
  
  val METHOD_IMPORT: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ImportRequest, io.milvus.grpc.milvus.ImportResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Import"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ImportRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ImportResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(55)))
      .build()
  
  val METHOD_GET_IMPORT_STATE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetImportStateRequest, io.milvus.grpc.milvus.GetImportStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetImportState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetImportStateRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetImportStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(56)))
      .build()
  
  val METHOD_LIST_IMPORT_TASKS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListImportTasksRequest, io.milvus.grpc.milvus.ListImportTasksResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListImportTasks"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListImportTasksRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListImportTasksResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(57)))
      .build()
  
  val METHOD_CREATE_CREDENTIAL: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateCredentialRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateCredential"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateCredentialRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(58)))
      .build()
  
  val METHOD_UPDATE_CREDENTIAL: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.UpdateCredentialRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "UpdateCredential"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.UpdateCredentialRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(59)))
      .build()
  
  val METHOD_DELETE_CREDENTIAL: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DeleteCredentialRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DeleteCredential"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DeleteCredentialRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(60)))
      .build()
  
  val METHOD_LIST_CRED_USERS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListCredUsersRequest, io.milvus.grpc.milvus.ListCredUsersResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListCredUsers"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListCredUsersRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListCredUsersResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(61)))
      .build()
  
  val METHOD_CREATE_ROLE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateRoleRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateRole"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateRoleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(62)))
      .build()
  
  val METHOD_DROP_ROLE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropRoleRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropRole"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropRoleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(63)))
      .build()
  
  val METHOD_OPERATE_USER_ROLE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.OperateUserRoleRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "OperateUserRole"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.OperateUserRoleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(64)))
      .build()
  
  val METHOD_SELECT_ROLE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.SelectRoleRequest, io.milvus.grpc.milvus.SelectRoleResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "SelectRole"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectRoleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectRoleResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(65)))
      .build()
  
  val METHOD_SELECT_USER: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.SelectUserRequest, io.milvus.grpc.milvus.SelectUserResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "SelectUser"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectUserRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectUserResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(66)))
      .build()
  
  val METHOD_OPERATE_PRIVILEGE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.OperatePrivilegeRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "OperatePrivilege"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.OperatePrivilegeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(67)))
      .build()
  
  val METHOD_OPERATE_PRIVILEGE_V2: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.OperatePrivilegeV2Request, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "OperatePrivilegeV2"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.OperatePrivilegeV2Request])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(68)))
      .build()
  
  val METHOD_SELECT_GRANT: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.SelectGrantRequest, io.milvus.grpc.milvus.SelectGrantResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "SelectGrant"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectGrantRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.SelectGrantResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(69)))
      .build()
  
  val METHOD_GET_VERSION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetVersionRequest, io.milvus.grpc.milvus.GetVersionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetVersion"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetVersionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetVersionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(70)))
      .build()
  
  val METHOD_CHECK_HEALTH: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CheckHealthRequest, io.milvus.grpc.milvus.CheckHealthResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CheckHealth"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CheckHealthRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CheckHealthResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(71)))
      .build()
  
  val METHOD_CREATE_RESOURCE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateResourceGroupRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateResourceGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateResourceGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(72)))
      .build()
  
  val METHOD_DROP_RESOURCE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropResourceGroupRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropResourceGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropResourceGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(73)))
      .build()
  
  val METHOD_UPDATE_RESOURCE_GROUPS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.UpdateResourceGroupsRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "UpdateResourceGroups"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.UpdateResourceGroupsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(74)))
      .build()
  
  val METHOD_TRANSFER_NODE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.TransferNodeRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "TransferNode"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.TransferNodeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(75)))
      .build()
  
  val METHOD_TRANSFER_REPLICA: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.TransferReplicaRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "TransferReplica"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.TransferReplicaRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(76)))
      .build()
  
  val METHOD_LIST_RESOURCE_GROUPS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListResourceGroupsRequest, io.milvus.grpc.milvus.ListResourceGroupsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListResourceGroups"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListResourceGroupsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListResourceGroupsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(77)))
      .build()
  
  val METHOD_DESCRIBE_RESOURCE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DescribeResourceGroupRequest, io.milvus.grpc.milvus.DescribeResourceGroupResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeResourceGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeResourceGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeResourceGroupResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(78)))
      .build()
  
  val METHOD_RENAME_COLLECTION: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RenameCollectionRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "RenameCollection"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RenameCollectionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(79)))
      .build()
  
  val METHOD_LIST_INDEXED_SEGMENT: _root_.io.grpc.MethodDescriptor[ListIndexedSegmentRequest, ListIndexedSegmentResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListIndexedSegment"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[ListIndexedSegmentRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[ListIndexedSegmentResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(80)))
      .build()
  
  val METHOD_DESCRIBE_SEGMENT_INDEX_DATA: _root_.io.grpc.MethodDescriptor[DescribeSegmentIndexDataRequest, DescribeSegmentIndexDataResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeSegmentIndexData"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[DescribeSegmentIndexDataRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[DescribeSegmentIndexDataResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(81)))
      .build()
  
  val METHOD_CONNECT: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ConnectRequest, io.milvus.grpc.milvus.ConnectResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "Connect"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ConnectRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ConnectResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(82)))
      .build()
  
  val METHOD_ALLOC_TIMESTAMP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AllocTimestampRequest, io.milvus.grpc.milvus.AllocTimestampResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AllocTimestamp"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AllocTimestampRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AllocTimestampResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(83)))
      .build()
  
  val METHOD_CREATE_DATABASE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateDatabaseRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateDatabase"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateDatabaseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(84)))
      .build()
  
  val METHOD_DROP_DATABASE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropDatabaseRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropDatabase"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropDatabaseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(85)))
      .build()
  
  val METHOD_LIST_DATABASES: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListDatabasesRequest, io.milvus.grpc.milvus.ListDatabasesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListDatabases"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListDatabasesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListDatabasesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(86)))
      .build()
  
  val METHOD_ALTER_DATABASE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AlterDatabaseRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AlterDatabase"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AlterDatabaseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(87)))
      .build()
  
  val METHOD_DESCRIBE_DATABASE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DescribeDatabaseRequest, io.milvus.grpc.milvus.DescribeDatabaseResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DescribeDatabase"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeDatabaseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DescribeDatabaseResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(88)))
      .build()
  
  val METHOD_REPLICATE_MESSAGE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ReplicateMessageRequest, io.milvus.grpc.milvus.ReplicateMessageResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ReplicateMessage"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ReplicateMessageRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ReplicateMessageResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(89)))
      .build()
  
  val METHOD_BACKUP_RBAC: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.BackupRBACMetaRequest, io.milvus.grpc.milvus.BackupRBACMetaResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "BackupRBAC"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BackupRBACMetaRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.BackupRBACMetaResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(90)))
      .build()
  
  val METHOD_RESTORE_RBAC: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RestoreRBACMetaRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "RestoreRBAC"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RestoreRBACMetaRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(91)))
      .build()
  
  val METHOD_CREATE_PRIVILEGE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreatePrivilegeGroupRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreatePrivilegeGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreatePrivilegeGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(92)))
      .build()
  
  val METHOD_DROP_PRIVILEGE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropPrivilegeGroupRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropPrivilegeGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropPrivilegeGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(93)))
      .build()
  
  val METHOD_LIST_PRIVILEGE_GROUPS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListPrivilegeGroupsRequest, io.milvus.grpc.milvus.ListPrivilegeGroupsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListPrivilegeGroups"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListPrivilegeGroupsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListPrivilegeGroupsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(94)))
      .build()
  
  val METHOD_OPERATE_PRIVILEGE_GROUP: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.OperatePrivilegeGroupRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "OperatePrivilegeGroup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.OperatePrivilegeGroupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(95)))
      .build()
  
  val METHOD_RUN_ANALYZER: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RunAnalyzerRequest, io.milvus.grpc.milvus.RunAnalyzerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "RunAnalyzer"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RunAnalyzerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RunAnalyzerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(96)))
      .build()
  
  val METHOD_ADD_FILE_RESOURCE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AddFileResourceRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AddFileResource"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AddFileResourceRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(97)))
      .build()
  
  val METHOD_REMOVE_FILE_RESOURCE: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.RemoveFileResourceRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "RemoveFileResource"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.RemoveFileResourceRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(98)))
      .build()
  
  val METHOD_LIST_FILE_RESOURCES: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListFileResourcesRequest, io.milvus.grpc.milvus.ListFileResourcesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListFileResources"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListFileResourcesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListFileResourcesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(99)))
      .build()
  
  val METHOD_ADD_USER_TAGS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.AddUserTagsRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "AddUserTags"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.AddUserTagsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(100)))
      .build()
  
  val METHOD_DELETE_USER_TAGS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DeleteUserTagsRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DeleteUserTags"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DeleteUserTagsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(101)))
      .build()
  
  val METHOD_GET_USER_TAGS: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.GetUserTagsRequest, io.milvus.grpc.milvus.GetUserTagsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "GetUserTags"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetUserTagsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.GetUserTagsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(102)))
      .build()
  
  val METHOD_LIST_USERS_WITH_TAG: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListUsersWithTagRequest, io.milvus.grpc.milvus.ListUsersWithTagResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListUsersWithTag"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListUsersWithTagRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListUsersWithTagResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(103)))
      .build()
  
  val METHOD_CREATE_ROW_POLICY: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.CreateRowPolicyRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "CreateRowPolicy"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.CreateRowPolicyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(104)))
      .build()
  
  val METHOD_DROP_ROW_POLICY: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.DropRowPolicyRequest, io.milvus.grpc.common.Status] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "DropRowPolicy"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.DropRowPolicyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.common.Status])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(105)))
      .build()
  
  val METHOD_LIST_ROW_POLICIES: _root_.io.grpc.MethodDescriptor[io.milvus.grpc.milvus.ListRowPoliciesRequest, io.milvus.grpc.milvus.ListRowPoliciesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("milvus.proto.milvus.MilvusService", "ListRowPolicies"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListRowPoliciesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.milvus.grpc.milvus.ListRowPoliciesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0).getMethods().get(106)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("milvus.proto.milvus.MilvusService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.milvus.grpc.milvus.MilvusProto.javaDescriptor))
      .addMethod(METHOD_CREATE_COLLECTION)
      .addMethod(METHOD_DROP_COLLECTION)
      .addMethod(METHOD_HAS_COLLECTION)
      .addMethod(METHOD_LOAD_COLLECTION)
      .addMethod(METHOD_RELEASE_COLLECTION)
      .addMethod(METHOD_DESCRIBE_COLLECTION)
      .addMethod(METHOD_BATCH_DESCRIBE_COLLECTION)
      .addMethod(METHOD_GET_COLLECTION_STATISTICS)
      .addMethod(METHOD_SHOW_COLLECTIONS)
      .addMethod(METHOD_ALTER_COLLECTION)
      .addMethod(METHOD_ALTER_COLLECTION_FIELD)
      .addMethod(METHOD_CREATE_PARTITION)
      .addMethod(METHOD_DROP_PARTITION)
      .addMethod(METHOD_HAS_PARTITION)
      .addMethod(METHOD_LOAD_PARTITIONS)
      .addMethod(METHOD_RELEASE_PARTITIONS)
      .addMethod(METHOD_GET_PARTITION_STATISTICS)
      .addMethod(METHOD_SHOW_PARTITIONS)
      .addMethod(METHOD_GET_LOADING_PROGRESS)
      .addMethod(METHOD_GET_LOAD_STATE)
      .addMethod(METHOD_CREATE_ALIAS)
      .addMethod(METHOD_DROP_ALIAS)
      .addMethod(METHOD_ALTER_ALIAS)
      .addMethod(METHOD_DESCRIBE_ALIAS)
      .addMethod(METHOD_LIST_ALIASES)
      .addMethod(METHOD_CREATE_INDEX)
      .addMethod(METHOD_ALTER_INDEX)
      .addMethod(METHOD_DESCRIBE_INDEX)
      .addMethod(METHOD_GET_INDEX_STATISTICS)
      .addMethod(METHOD_GET_INDEX_STATE)
      .addMethod(METHOD_GET_INDEX_BUILD_PROGRESS)
      .addMethod(METHOD_DROP_INDEX)
      .addMethod(METHOD_INSERT)
      .addMethod(METHOD_DELETE)
      .addMethod(METHOD_UPSERT)
      .addMethod(METHOD_SEARCH)
      .addMethod(METHOD_HYBRID_SEARCH)
      .addMethod(METHOD_FLUSH)
      .addMethod(METHOD_QUERY)
      .addMethod(METHOD_CALC_DISTANCE)
      .addMethod(METHOD_FLUSH_ALL)
      .addMethod(METHOD_ADD_COLLECTION_FIELD)
      .addMethod(METHOD_GET_FLUSH_STATE)
      .addMethod(METHOD_GET_FLUSH_ALL_STATE)
      .addMethod(METHOD_GET_PERSISTENT_SEGMENT_INFO)
      .addMethod(METHOD_GET_QUERY_SEGMENT_INFO)
      .addMethod(METHOD_GET_REPLICAS)
      .addMethod(METHOD_DUMMY)
      .addMethod(METHOD_REGISTER_LINK)
      .addMethod(METHOD_GET_METRICS)
      .addMethod(METHOD_GET_COMPONENT_STATES)
      .addMethod(METHOD_LOAD_BALANCE)
      .addMethod(METHOD_GET_COMPACTION_STATE)
      .addMethod(METHOD_MANUAL_COMPACTION)
      .addMethod(METHOD_GET_COMPACTION_STATE_WITH_PLANS)
      .addMethod(METHOD_IMPORT)
      .addMethod(METHOD_GET_IMPORT_STATE)
      .addMethod(METHOD_LIST_IMPORT_TASKS)
      .addMethod(METHOD_CREATE_CREDENTIAL)
      .addMethod(METHOD_UPDATE_CREDENTIAL)
      .addMethod(METHOD_DELETE_CREDENTIAL)
      .addMethod(METHOD_LIST_CRED_USERS)
      .addMethod(METHOD_CREATE_ROLE)
      .addMethod(METHOD_DROP_ROLE)
      .addMethod(METHOD_OPERATE_USER_ROLE)
      .addMethod(METHOD_SELECT_ROLE)
      .addMethod(METHOD_SELECT_USER)
      .addMethod(METHOD_OPERATE_PRIVILEGE)
      .addMethod(METHOD_OPERATE_PRIVILEGE_V2)
      .addMethod(METHOD_SELECT_GRANT)
      .addMethod(METHOD_GET_VERSION)
      .addMethod(METHOD_CHECK_HEALTH)
      .addMethod(METHOD_CREATE_RESOURCE_GROUP)
      .addMethod(METHOD_DROP_RESOURCE_GROUP)
      .addMethod(METHOD_UPDATE_RESOURCE_GROUPS)
      .addMethod(METHOD_TRANSFER_NODE)
      .addMethod(METHOD_TRANSFER_REPLICA)
      .addMethod(METHOD_LIST_RESOURCE_GROUPS)
      .addMethod(METHOD_DESCRIBE_RESOURCE_GROUP)
      .addMethod(METHOD_RENAME_COLLECTION)
      .addMethod(METHOD_LIST_INDEXED_SEGMENT)
      .addMethod(METHOD_DESCRIBE_SEGMENT_INDEX_DATA)
      .addMethod(METHOD_CONNECT)
      .addMethod(METHOD_ALLOC_TIMESTAMP)
      .addMethod(METHOD_CREATE_DATABASE)
      .addMethod(METHOD_DROP_DATABASE)
      .addMethod(METHOD_LIST_DATABASES)
      .addMethod(METHOD_ALTER_DATABASE)
      .addMethod(METHOD_DESCRIBE_DATABASE)
      .addMethod(METHOD_REPLICATE_MESSAGE)
      .addMethod(METHOD_BACKUP_RBAC)
      .addMethod(METHOD_RESTORE_RBAC)
      .addMethod(METHOD_CREATE_PRIVILEGE_GROUP)
      .addMethod(METHOD_DROP_PRIVILEGE_GROUP)
      .addMethod(METHOD_LIST_PRIVILEGE_GROUPS)
      .addMethod(METHOD_OPERATE_PRIVILEGE_GROUP)
      .addMethod(METHOD_RUN_ANALYZER)
      .addMethod(METHOD_ADD_FILE_RESOURCE)
      .addMethod(METHOD_REMOVE_FILE_RESOURCE)
      .addMethod(METHOD_LIST_FILE_RESOURCES)
      .addMethod(METHOD_ADD_USER_TAGS)
      .addMethod(METHOD_DELETE_USER_TAGS)
      .addMethod(METHOD_GET_USER_TAGS)
      .addMethod(METHOD_LIST_USERS_WITH_TAG)
      .addMethod(METHOD_CREATE_ROW_POLICY)
      .addMethod(METHOD_DROP_ROW_POLICY)
      .addMethod(METHOD_LIST_ROW_POLICIES)
      .build()
  
  trait MilvusService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[MilvusService] = MilvusService
    def createCollection(request: io.milvus.grpc.milvus.CreateCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropCollection(request: io.milvus.grpc.milvus.DropCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def hasCollection(request: io.milvus.grpc.milvus.HasCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BoolResponse]
    def loadCollection(request: io.milvus.grpc.milvus.LoadCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def releaseCollection(request: io.milvus.grpc.milvus.ReleaseCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def describeCollection(request: io.milvus.grpc.milvus.DescribeCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeCollectionResponse]
    def batchDescribeCollection(request: io.milvus.grpc.milvus.BatchDescribeCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BatchDescribeCollectionResponse]
    def getCollectionStatistics(request: io.milvus.grpc.milvus.GetCollectionStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCollectionStatisticsResponse]
    def showCollections(request: io.milvus.grpc.milvus.ShowCollectionsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ShowCollectionsResponse]
    def alterCollection(request: io.milvus.grpc.milvus.AlterCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def alterCollectionField(request: io.milvus.grpc.milvus.AlterCollectionFieldRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def createPartition(request: io.milvus.grpc.milvus.CreatePartitionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropPartition(request: io.milvus.grpc.milvus.DropPartitionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def hasPartition(request: io.milvus.grpc.milvus.HasPartitionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BoolResponse]
    def loadPartitions(request: io.milvus.grpc.milvus.LoadPartitionsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def releasePartitions(request: io.milvus.grpc.milvus.ReleasePartitionsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def getPartitionStatistics(request: io.milvus.grpc.milvus.GetPartitionStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetPartitionStatisticsResponse]
    def showPartitions(request: io.milvus.grpc.milvus.ShowPartitionsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ShowPartitionsResponse]
    def getLoadingProgress(request: io.milvus.grpc.milvus.GetLoadingProgressRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetLoadingProgressResponse]
    def getLoadState(request: io.milvus.grpc.milvus.GetLoadStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetLoadStateResponse]
    def createAlias(request: io.milvus.grpc.milvus.CreateAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropAlias(request: io.milvus.grpc.milvus.DropAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def alterAlias(request: io.milvus.grpc.milvus.AlterAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def describeAlias(request: io.milvus.grpc.milvus.DescribeAliasRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeAliasResponse]
    def listAliases(request: io.milvus.grpc.milvus.ListAliasesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListAliasesResponse]
    def createIndex(request: io.milvus.grpc.milvus.CreateIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def alterIndex(request: io.milvus.grpc.milvus.AlterIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def describeIndex(request: io.milvus.grpc.milvus.DescribeIndexRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeIndexResponse]
    def getIndexStatistics(request: io.milvus.grpc.milvus.GetIndexStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexStatisticsResponse]
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def getIndexState(request: io.milvus.grpc.milvus.GetIndexStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexStateResponse]
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def getIndexBuildProgress(request: io.milvus.grpc.milvus.GetIndexBuildProgressRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexBuildProgressResponse]
    def dropIndex(request: io.milvus.grpc.milvus.DropIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def insert(request: io.milvus.grpc.milvus.InsertRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult]
    def delete(request: io.milvus.grpc.milvus.DeleteRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult]
    def upsert(request: io.milvus.grpc.milvus.UpsertRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult]
    def search(request: io.milvus.grpc.milvus.SearchRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SearchResults]
    def hybridSearch(request: io.milvus.grpc.milvus.HybridSearchRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SearchResults]
    def flush(request: io.milvus.grpc.milvus.FlushRequest): scala.concurrent.Future[io.milvus.grpc.milvus.FlushResponse]
    def query(request: io.milvus.grpc.milvus.QueryRequest): scala.concurrent.Future[io.milvus.grpc.milvus.QueryResults]
    def calcDistance(request: io.milvus.grpc.milvus.CalcDistanceRequest): scala.concurrent.Future[io.milvus.grpc.milvus.CalcDistanceResults]
    def flushAll(request: io.milvus.grpc.milvus.FlushAllRequest): scala.concurrent.Future[io.milvus.grpc.milvus.FlushAllResponse]
    def addCollectionField(request: io.milvus.grpc.milvus.AddCollectionFieldRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def getFlushState(request: io.milvus.grpc.milvus.GetFlushStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetFlushStateResponse]
    def getFlushAllState(request: io.milvus.grpc.milvus.GetFlushAllStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetFlushAllStateResponse]
    def getPersistentSegmentInfo(request: io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse]
    def getQuerySegmentInfo(request: io.milvus.grpc.milvus.GetQuerySegmentInfoRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetQuerySegmentInfoResponse]
    def getReplicas(request: io.milvus.grpc.milvus.GetReplicasRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetReplicasResponse]
    def dummy(request: io.milvus.grpc.milvus.DummyRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DummyResponse]
    /** TODO: remove
      */
    def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RegisterLinkResponse]
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
      */
    def getMetrics(request: io.milvus.grpc.milvus.GetMetricsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetMetricsResponse]
    def getComponentStates(request: io.milvus.grpc.milvus.GetComponentStatesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ComponentStates]
    def loadBalance(request: io.milvus.grpc.milvus.LoadBalanceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def getCompactionState(request: io.milvus.grpc.milvus.GetCompactionStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCompactionStateResponse]
    def manualCompaction(request: io.milvus.grpc.milvus.ManualCompactionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ManualCompactionResponse]
    def getCompactionStateWithPlans(request: io.milvus.grpc.milvus.GetCompactionPlansRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCompactionPlansResponse]
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
      */
    def `import`(request: io.milvus.grpc.milvus.ImportRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ImportResponse]
    def getImportState(request: io.milvus.grpc.milvus.GetImportStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetImportStateResponse]
    def listImportTasks(request: io.milvus.grpc.milvus.ListImportTasksRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListImportTasksResponse]
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
      */
    def createCredential(request: io.milvus.grpc.milvus.CreateCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def updateCredential(request: io.milvus.grpc.milvus.UpdateCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def deleteCredential(request: io.milvus.grpc.milvus.DeleteCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listCredUsers(request: io.milvus.grpc.milvus.ListCredUsersRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListCredUsersResponse]
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
      */
    def createRole(request: io.milvus.grpc.milvus.CreateRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropRole(request: io.milvus.grpc.milvus.DropRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def operateUserRole(request: io.milvus.grpc.milvus.OperateUserRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def selectRole(request: io.milvus.grpc.milvus.SelectRoleRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectRoleResponse]
    def selectUser(request: io.milvus.grpc.milvus.SelectUserRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectUserResponse]
    def operatePrivilege(request: io.milvus.grpc.milvus.OperatePrivilegeRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def operatePrivilegeV2(request: io.milvus.grpc.milvus.OperatePrivilegeV2Request): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def selectGrant(request: io.milvus.grpc.milvus.SelectGrantRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectGrantResponse]
    def getVersion(request: io.milvus.grpc.milvus.GetVersionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetVersionResponse]
    def checkHealth(request: io.milvus.grpc.milvus.CheckHealthRequest): scala.concurrent.Future[io.milvus.grpc.milvus.CheckHealthResponse]
    def createResourceGroup(request: io.milvus.grpc.milvus.CreateResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropResourceGroup(request: io.milvus.grpc.milvus.DropResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def updateResourceGroups(request: io.milvus.grpc.milvus.UpdateResourceGroupsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def transferNode(request: io.milvus.grpc.milvus.TransferNodeRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def transferReplica(request: io.milvus.grpc.milvus.TransferReplicaRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listResourceGroups(request: io.milvus.grpc.milvus.ListResourceGroupsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListResourceGroupsResponse]
    def describeResourceGroup(request: io.milvus.grpc.milvus.DescribeResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeResourceGroupResponse]
    def renameCollection(request: io.milvus.grpc.milvus.RenameCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listIndexedSegment(request: ListIndexedSegmentRequest): scala.concurrent.Future[ListIndexedSegmentResponse]
    def describeSegmentIndexData(request: DescribeSegmentIndexDataRequest): scala.concurrent.Future[DescribeSegmentIndexDataResponse]
    def connect(request: io.milvus.grpc.milvus.ConnectRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ConnectResponse]
    def allocTimestamp(request: io.milvus.grpc.milvus.AllocTimestampRequest): scala.concurrent.Future[io.milvus.grpc.milvus.AllocTimestampResponse]
    def createDatabase(request: io.milvus.grpc.milvus.CreateDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropDatabase(request: io.milvus.grpc.milvus.DropDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listDatabases(request: io.milvus.grpc.milvus.ListDatabasesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListDatabasesResponse]
    def alterDatabase(request: io.milvus.grpc.milvus.AlterDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def describeDatabase(request: io.milvus.grpc.milvus.DescribeDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeDatabaseResponse]
    def replicateMessage(request: io.milvus.grpc.milvus.ReplicateMessageRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ReplicateMessageResponse]
    def backupRBAC(request: io.milvus.grpc.milvus.BackupRBACMetaRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BackupRBACMetaResponse]
    def restoreRBAC(request: io.milvus.grpc.milvus.RestoreRBACMetaRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def createPrivilegeGroup(request: io.milvus.grpc.milvus.CreatePrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropPrivilegeGroup(request: io.milvus.grpc.milvus.DropPrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listPrivilegeGroups(request: io.milvus.grpc.milvus.ListPrivilegeGroupsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListPrivilegeGroupsResponse]
    def operatePrivilegeGroup(request: io.milvus.grpc.milvus.OperatePrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def runAnalyzer(request: io.milvus.grpc.milvus.RunAnalyzerRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RunAnalyzerResponse]
    def addFileResource(request: io.milvus.grpc.milvus.AddFileResourceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def removeFileResource(request: io.milvus.grpc.milvus.RemoveFileResourceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listFileResources(request: io.milvus.grpc.milvus.ListFileResourcesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListFileResourcesResponse]
    /** Row Level Security (RLS) APIs
      */
    def addUserTags(request: io.milvus.grpc.milvus.AddUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def deleteUserTags(request: io.milvus.grpc.milvus.DeleteUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def getUserTags(request: io.milvus.grpc.milvus.GetUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetUserTagsResponse]
    def listUsersWithTag(request: io.milvus.grpc.milvus.ListUsersWithTagRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListUsersWithTagResponse]
    def createRowPolicy(request: io.milvus.grpc.milvus.CreateRowPolicyRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def dropRowPolicy(request: io.milvus.grpc.milvus.DropRowPolicyRequest): scala.concurrent.Future[io.milvus.grpc.common.Status]
    def listRowPolicies(request: io.milvus.grpc.milvus.ListRowPoliciesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListRowPoliciesResponse]
  }
  
  object MilvusService extends _root_.scalapb.grpc.ServiceCompanion[MilvusService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[MilvusService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: MilvusService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_CREATE_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_HAS_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.HasCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.BoolResponse]) => {
          serviceImpl.hasCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LOAD_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.LoadCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.loadCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RELEASE_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ReleaseCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.releaseCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DescribeCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DescribeCollectionResponse]) => {
          serviceImpl.describeCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_BATCH_DESCRIBE_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.BatchDescribeCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.BatchDescribeCollectionResponse]) => {
          serviceImpl.batchDescribeCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_COLLECTION_STATISTICS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetCollectionStatisticsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetCollectionStatisticsResponse]) => {
          serviceImpl.getCollectionStatistics(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SHOW_COLLECTIONS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ShowCollectionsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ShowCollectionsResponse]) => {
          serviceImpl.showCollections(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALTER_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AlterCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.alterCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALTER_COLLECTION_FIELD,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AlterCollectionFieldRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.alterCollectionField(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreatePartitionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createPartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropPartitionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropPartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_HAS_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.HasPartitionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.BoolResponse]) => {
          serviceImpl.hasPartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LOAD_PARTITIONS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.LoadPartitionsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.loadPartitions(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RELEASE_PARTITIONS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ReleasePartitionsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.releasePartitions(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_PARTITION_STATISTICS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetPartitionStatisticsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetPartitionStatisticsResponse]) => {
          serviceImpl.getPartitionStatistics(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SHOW_PARTITIONS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ShowPartitionsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ShowPartitionsResponse]) => {
          serviceImpl.showPartitions(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_LOADING_PROGRESS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetLoadingProgressRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetLoadingProgressResponse]) => {
          serviceImpl.getLoadingProgress(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_LOAD_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetLoadStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetLoadStateResponse]) => {
          serviceImpl.getLoadState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_ALIAS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateAliasRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createAlias(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_ALIAS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropAliasRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropAlias(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALTER_ALIAS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AlterAliasRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.alterAlias(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_ALIAS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DescribeAliasRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DescribeAliasResponse]) => {
          serviceImpl.describeAlias(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_ALIASES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListAliasesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListAliasesResponse]) => {
          serviceImpl.listAliases(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_INDEX,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateIndexRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createIndex(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALTER_INDEX,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AlterIndexRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.alterIndex(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_INDEX,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DescribeIndexRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DescribeIndexResponse]) => {
          serviceImpl.describeIndex(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_INDEX_STATISTICS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetIndexStatisticsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetIndexStatisticsResponse]) => {
          serviceImpl.getIndexStatistics(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_INDEX_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetIndexStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetIndexStateResponse]) => {
          serviceImpl.getIndexState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_INDEX_BUILD_PROGRESS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetIndexBuildProgressRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetIndexBuildProgressResponse]) => {
          serviceImpl.getIndexBuildProgress(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_INDEX,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropIndexRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropIndex(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_INSERT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.InsertRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.MutationResult]) => {
          serviceImpl.insert(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DeleteRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.MutationResult]) => {
          serviceImpl.delete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_UPSERT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.UpsertRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.MutationResult]) => {
          serviceImpl.upsert(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SEARCH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.SearchRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.SearchResults]) => {
          serviceImpl.search(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_HYBRID_SEARCH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.HybridSearchRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.SearchResults]) => {
          serviceImpl.hybridSearch(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_FLUSH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.FlushRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.FlushResponse]) => {
          serviceImpl.flush(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_QUERY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.QueryRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.QueryResults]) => {
          serviceImpl.query(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CALC_DISTANCE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CalcDistanceRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.CalcDistanceResults]) => {
          serviceImpl.calcDistance(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_FLUSH_ALL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.FlushAllRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.FlushAllResponse]) => {
          serviceImpl.flushAll(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ADD_COLLECTION_FIELD,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AddCollectionFieldRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.addCollectionField(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_FLUSH_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetFlushStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetFlushStateResponse]) => {
          serviceImpl.getFlushState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_FLUSH_ALL_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetFlushAllStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetFlushAllStateResponse]) => {
          serviceImpl.getFlushAllState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_PERSISTENT_SEGMENT_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse]) => {
          serviceImpl.getPersistentSegmentInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_QUERY_SEGMENT_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetQuerySegmentInfoRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetQuerySegmentInfoResponse]) => {
          serviceImpl.getQuerySegmentInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_REPLICAS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetReplicasRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetReplicasResponse]) => {
          serviceImpl.getReplicas(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DUMMY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DummyRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DummyResponse]) => {
          serviceImpl.dummy(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_REGISTER_LINK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RegisterLinkRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.RegisterLinkResponse]) => {
          serviceImpl.registerLink(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_METRICS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetMetricsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetMetricsResponse]) => {
          serviceImpl.getMetrics(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_COMPONENT_STATES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetComponentStatesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ComponentStates]) => {
          serviceImpl.getComponentStates(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LOAD_BALANCE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.LoadBalanceRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.loadBalance(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_COMPACTION_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetCompactionStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetCompactionStateResponse]) => {
          serviceImpl.getCompactionState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_MANUAL_COMPACTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ManualCompactionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ManualCompactionResponse]) => {
          serviceImpl.manualCompaction(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_COMPACTION_STATE_WITH_PLANS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetCompactionPlansRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetCompactionPlansResponse]) => {
          serviceImpl.getCompactionStateWithPlans(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_IMPORT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ImportRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ImportResponse]) => {
          serviceImpl.`import`(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_IMPORT_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetImportStateRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetImportStateResponse]) => {
          serviceImpl.getImportState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_IMPORT_TASKS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListImportTasksRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListImportTasksResponse]) => {
          serviceImpl.listImportTasks(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_CREDENTIAL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateCredentialRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createCredential(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_UPDATE_CREDENTIAL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.UpdateCredentialRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.updateCredential(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE_CREDENTIAL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DeleteCredentialRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.deleteCredential(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_CRED_USERS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListCredUsersRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListCredUsersResponse]) => {
          serviceImpl.listCredUsers(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_ROLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateRoleRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createRole(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_ROLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropRoleRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropRole(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_OPERATE_USER_ROLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.OperateUserRoleRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.operateUserRole(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SELECT_ROLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.SelectRoleRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.SelectRoleResponse]) => {
          serviceImpl.selectRole(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SELECT_USER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.SelectUserRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.SelectUserResponse]) => {
          serviceImpl.selectUser(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_OPERATE_PRIVILEGE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.OperatePrivilegeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.operatePrivilege(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_OPERATE_PRIVILEGE_V2,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.OperatePrivilegeV2Request, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.operatePrivilegeV2(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SELECT_GRANT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.SelectGrantRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.SelectGrantResponse]) => {
          serviceImpl.selectGrant(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_VERSION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetVersionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetVersionResponse]) => {
          serviceImpl.getVersion(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CHECK_HEALTH,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CheckHealthRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.CheckHealthResponse]) => {
          serviceImpl.checkHealth(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_RESOURCE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateResourceGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createResourceGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_RESOURCE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropResourceGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropResourceGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_UPDATE_RESOURCE_GROUPS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.UpdateResourceGroupsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.updateResourceGroups(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_TRANSFER_NODE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.TransferNodeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.transferNode(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_TRANSFER_REPLICA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.TransferReplicaRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.transferReplica(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_RESOURCE_GROUPS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListResourceGroupsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListResourceGroupsResponse]) => {
          serviceImpl.listResourceGroups(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_RESOURCE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DescribeResourceGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DescribeResourceGroupResponse]) => {
          serviceImpl.describeResourceGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RENAME_COLLECTION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RenameCollectionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.renameCollection(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_INDEXED_SEGMENT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: ListIndexedSegmentRequest, observer: _root_.io.grpc.stub.StreamObserver[ListIndexedSegmentResponse]) => {
          serviceImpl.listIndexedSegment(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_SEGMENT_INDEX_DATA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: DescribeSegmentIndexDataRequest, observer: _root_.io.grpc.stub.StreamObserver[DescribeSegmentIndexDataResponse]) => {
          serviceImpl.describeSegmentIndexData(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CONNECT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ConnectRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ConnectResponse]) => {
          serviceImpl.connect(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALLOC_TIMESTAMP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AllocTimestampRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.AllocTimestampResponse]) => {
          serviceImpl.allocTimestamp(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_DATABASE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateDatabaseRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createDatabase(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_DATABASE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropDatabaseRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropDatabase(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_DATABASES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListDatabasesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListDatabasesResponse]) => {
          serviceImpl.listDatabases(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ALTER_DATABASE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AlterDatabaseRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.alterDatabase(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DESCRIBE_DATABASE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DescribeDatabaseRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.DescribeDatabaseResponse]) => {
          serviceImpl.describeDatabase(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_REPLICATE_MESSAGE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ReplicateMessageRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ReplicateMessageResponse]) => {
          serviceImpl.replicateMessage(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_BACKUP_RBAC,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.BackupRBACMetaRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.BackupRBACMetaResponse]) => {
          serviceImpl.backupRBAC(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RESTORE_RBAC,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RestoreRBACMetaRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.restoreRBAC(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_PRIVILEGE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreatePrivilegeGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createPrivilegeGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_PRIVILEGE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropPrivilegeGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropPrivilegeGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_PRIVILEGE_GROUPS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListPrivilegeGroupsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListPrivilegeGroupsResponse]) => {
          serviceImpl.listPrivilegeGroups(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_OPERATE_PRIVILEGE_GROUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.OperatePrivilegeGroupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.operatePrivilegeGroup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RUN_ANALYZER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RunAnalyzerRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.RunAnalyzerResponse]) => {
          serviceImpl.runAnalyzer(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ADD_FILE_RESOURCE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AddFileResourceRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.addFileResource(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_REMOVE_FILE_RESOURCE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.RemoveFileResourceRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.removeFileResource(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_FILE_RESOURCES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListFileResourcesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListFileResourcesResponse]) => {
          serviceImpl.listFileResources(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_ADD_USER_TAGS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.AddUserTagsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.addUserTags(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE_USER_TAGS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DeleteUserTagsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.deleteUserTags(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_USER_TAGS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.GetUserTagsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.GetUserTagsResponse]) => {
          serviceImpl.getUserTags(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_USERS_WITH_TAG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListUsersWithTagRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListUsersWithTagResponse]) => {
          serviceImpl.listUsersWithTag(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_ROW_POLICY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.CreateRowPolicyRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.createRowPolicy(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DROP_ROW_POLICY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.DropRowPolicyRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.common.Status]) => {
          serviceImpl.dropRowPolicy(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_ROW_POLICIES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.milvus.grpc.milvus.ListRowPoliciesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.milvus.grpc.milvus.ListRowPoliciesResponse]) => {
          serviceImpl.listRowPolicies(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  trait MilvusServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[MilvusService] = MilvusService
    def createCollection(request: io.milvus.grpc.milvus.CreateCollectionRequest): io.milvus.grpc.common.Status
    def dropCollection(request: io.milvus.grpc.milvus.DropCollectionRequest): io.milvus.grpc.common.Status
    def hasCollection(request: io.milvus.grpc.milvus.HasCollectionRequest): io.milvus.grpc.milvus.BoolResponse
    def loadCollection(request: io.milvus.grpc.milvus.LoadCollectionRequest): io.milvus.grpc.common.Status
    def releaseCollection(request: io.milvus.grpc.milvus.ReleaseCollectionRequest): io.milvus.grpc.common.Status
    def describeCollection(request: io.milvus.grpc.milvus.DescribeCollectionRequest): io.milvus.grpc.milvus.DescribeCollectionResponse
    def batchDescribeCollection(request: io.milvus.grpc.milvus.BatchDescribeCollectionRequest): io.milvus.grpc.milvus.BatchDescribeCollectionResponse
    def getCollectionStatistics(request: io.milvus.grpc.milvus.GetCollectionStatisticsRequest): io.milvus.grpc.milvus.GetCollectionStatisticsResponse
    def showCollections(request: io.milvus.grpc.milvus.ShowCollectionsRequest): io.milvus.grpc.milvus.ShowCollectionsResponse
    def alterCollection(request: io.milvus.grpc.milvus.AlterCollectionRequest): io.milvus.grpc.common.Status
    def alterCollectionField(request: io.milvus.grpc.milvus.AlterCollectionFieldRequest): io.milvus.grpc.common.Status
    def createPartition(request: io.milvus.grpc.milvus.CreatePartitionRequest): io.milvus.grpc.common.Status
    def dropPartition(request: io.milvus.grpc.milvus.DropPartitionRequest): io.milvus.grpc.common.Status
    def hasPartition(request: io.milvus.grpc.milvus.HasPartitionRequest): io.milvus.grpc.milvus.BoolResponse
    def loadPartitions(request: io.milvus.grpc.milvus.LoadPartitionsRequest): io.milvus.grpc.common.Status
    def releasePartitions(request: io.milvus.grpc.milvus.ReleasePartitionsRequest): io.milvus.grpc.common.Status
    def getPartitionStatistics(request: io.milvus.grpc.milvus.GetPartitionStatisticsRequest): io.milvus.grpc.milvus.GetPartitionStatisticsResponse
    def showPartitions(request: io.milvus.grpc.milvus.ShowPartitionsRequest): io.milvus.grpc.milvus.ShowPartitionsResponse
    def getLoadingProgress(request: io.milvus.grpc.milvus.GetLoadingProgressRequest): io.milvus.grpc.milvus.GetLoadingProgressResponse
    def getLoadState(request: io.milvus.grpc.milvus.GetLoadStateRequest): io.milvus.grpc.milvus.GetLoadStateResponse
    def createAlias(request: io.milvus.grpc.milvus.CreateAliasRequest): io.milvus.grpc.common.Status
    def dropAlias(request: io.milvus.grpc.milvus.DropAliasRequest): io.milvus.grpc.common.Status
    def alterAlias(request: io.milvus.grpc.milvus.AlterAliasRequest): io.milvus.grpc.common.Status
    def describeAlias(request: io.milvus.grpc.milvus.DescribeAliasRequest): io.milvus.grpc.milvus.DescribeAliasResponse
    def listAliases(request: io.milvus.grpc.milvus.ListAliasesRequest): io.milvus.grpc.milvus.ListAliasesResponse
    def createIndex(request: io.milvus.grpc.milvus.CreateIndexRequest): io.milvus.grpc.common.Status
    def alterIndex(request: io.milvus.grpc.milvus.AlterIndexRequest): io.milvus.grpc.common.Status
    def describeIndex(request: io.milvus.grpc.milvus.DescribeIndexRequest): io.milvus.grpc.milvus.DescribeIndexResponse
    def getIndexStatistics(request: io.milvus.grpc.milvus.GetIndexStatisticsRequest): io.milvus.grpc.milvus.GetIndexStatisticsResponse
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def getIndexState(request: io.milvus.grpc.milvus.GetIndexStateRequest): io.milvus.grpc.milvus.GetIndexStateResponse
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def getIndexBuildProgress(request: io.milvus.grpc.milvus.GetIndexBuildProgressRequest): io.milvus.grpc.milvus.GetIndexBuildProgressResponse
    def dropIndex(request: io.milvus.grpc.milvus.DropIndexRequest): io.milvus.grpc.common.Status
    def insert(request: io.milvus.grpc.milvus.InsertRequest): io.milvus.grpc.milvus.MutationResult
    def delete(request: io.milvus.grpc.milvus.DeleteRequest): io.milvus.grpc.milvus.MutationResult
    def upsert(request: io.milvus.grpc.milvus.UpsertRequest): io.milvus.grpc.milvus.MutationResult
    def search(request: io.milvus.grpc.milvus.SearchRequest): io.milvus.grpc.milvus.SearchResults
    def hybridSearch(request: io.milvus.grpc.milvus.HybridSearchRequest): io.milvus.grpc.milvus.SearchResults
    def flush(request: io.milvus.grpc.milvus.FlushRequest): io.milvus.grpc.milvus.FlushResponse
    def query(request: io.milvus.grpc.milvus.QueryRequest): io.milvus.grpc.milvus.QueryResults
    def calcDistance(request: io.milvus.grpc.milvus.CalcDistanceRequest): io.milvus.grpc.milvus.CalcDistanceResults
    def flushAll(request: io.milvus.grpc.milvus.FlushAllRequest): io.milvus.grpc.milvus.FlushAllResponse
    def addCollectionField(request: io.milvus.grpc.milvus.AddCollectionFieldRequest): io.milvus.grpc.common.Status
    def getFlushState(request: io.milvus.grpc.milvus.GetFlushStateRequest): io.milvus.grpc.milvus.GetFlushStateResponse
    def getFlushAllState(request: io.milvus.grpc.milvus.GetFlushAllStateRequest): io.milvus.grpc.milvus.GetFlushAllStateResponse
    def getPersistentSegmentInfo(request: io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest): io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse
    def getQuerySegmentInfo(request: io.milvus.grpc.milvus.GetQuerySegmentInfoRequest): io.milvus.grpc.milvus.GetQuerySegmentInfoResponse
    def getReplicas(request: io.milvus.grpc.milvus.GetReplicasRequest): io.milvus.grpc.milvus.GetReplicasResponse
    def dummy(request: io.milvus.grpc.milvus.DummyRequest): io.milvus.grpc.milvus.DummyResponse
    /** TODO: remove
      */
    def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): io.milvus.grpc.milvus.RegisterLinkResponse
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
      */
    def getMetrics(request: io.milvus.grpc.milvus.GetMetricsRequest): io.milvus.grpc.milvus.GetMetricsResponse
    def getComponentStates(request: io.milvus.grpc.milvus.GetComponentStatesRequest): io.milvus.grpc.milvus.ComponentStates
    def loadBalance(request: io.milvus.grpc.milvus.LoadBalanceRequest): io.milvus.grpc.common.Status
    def getCompactionState(request: io.milvus.grpc.milvus.GetCompactionStateRequest): io.milvus.grpc.milvus.GetCompactionStateResponse
    def manualCompaction(request: io.milvus.grpc.milvus.ManualCompactionRequest): io.milvus.grpc.milvus.ManualCompactionResponse
    def getCompactionStateWithPlans(request: io.milvus.grpc.milvus.GetCompactionPlansRequest): io.milvus.grpc.milvus.GetCompactionPlansResponse
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
      */
    def `import`(request: io.milvus.grpc.milvus.ImportRequest): io.milvus.grpc.milvus.ImportResponse
    def getImportState(request: io.milvus.grpc.milvus.GetImportStateRequest): io.milvus.grpc.milvus.GetImportStateResponse
    def listImportTasks(request: io.milvus.grpc.milvus.ListImportTasksRequest): io.milvus.grpc.milvus.ListImportTasksResponse
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
      */
    def createCredential(request: io.milvus.grpc.milvus.CreateCredentialRequest): io.milvus.grpc.common.Status
    def updateCredential(request: io.milvus.grpc.milvus.UpdateCredentialRequest): io.milvus.grpc.common.Status
    def deleteCredential(request: io.milvus.grpc.milvus.DeleteCredentialRequest): io.milvus.grpc.common.Status
    def listCredUsers(request: io.milvus.grpc.milvus.ListCredUsersRequest): io.milvus.grpc.milvus.ListCredUsersResponse
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
      */
    def createRole(request: io.milvus.grpc.milvus.CreateRoleRequest): io.milvus.grpc.common.Status
    def dropRole(request: io.milvus.grpc.milvus.DropRoleRequest): io.milvus.grpc.common.Status
    def operateUserRole(request: io.milvus.grpc.milvus.OperateUserRoleRequest): io.milvus.grpc.common.Status
    def selectRole(request: io.milvus.grpc.milvus.SelectRoleRequest): io.milvus.grpc.milvus.SelectRoleResponse
    def selectUser(request: io.milvus.grpc.milvus.SelectUserRequest): io.milvus.grpc.milvus.SelectUserResponse
    def operatePrivilege(request: io.milvus.grpc.milvus.OperatePrivilegeRequest): io.milvus.grpc.common.Status
    def operatePrivilegeV2(request: io.milvus.grpc.milvus.OperatePrivilegeV2Request): io.milvus.grpc.common.Status
    def selectGrant(request: io.milvus.grpc.milvus.SelectGrantRequest): io.milvus.grpc.milvus.SelectGrantResponse
    def getVersion(request: io.milvus.grpc.milvus.GetVersionRequest): io.milvus.grpc.milvus.GetVersionResponse
    def checkHealth(request: io.milvus.grpc.milvus.CheckHealthRequest): io.milvus.grpc.milvus.CheckHealthResponse
    def createResourceGroup(request: io.milvus.grpc.milvus.CreateResourceGroupRequest): io.milvus.grpc.common.Status
    def dropResourceGroup(request: io.milvus.grpc.milvus.DropResourceGroupRequest): io.milvus.grpc.common.Status
    def updateResourceGroups(request: io.milvus.grpc.milvus.UpdateResourceGroupsRequest): io.milvus.grpc.common.Status
    def transferNode(request: io.milvus.grpc.milvus.TransferNodeRequest): io.milvus.grpc.common.Status
    def transferReplica(request: io.milvus.grpc.milvus.TransferReplicaRequest): io.milvus.grpc.common.Status
    def listResourceGroups(request: io.milvus.grpc.milvus.ListResourceGroupsRequest): io.milvus.grpc.milvus.ListResourceGroupsResponse
    def describeResourceGroup(request: io.milvus.grpc.milvus.DescribeResourceGroupRequest): io.milvus.grpc.milvus.DescribeResourceGroupResponse
    def renameCollection(request: io.milvus.grpc.milvus.RenameCollectionRequest): io.milvus.grpc.common.Status
    def listIndexedSegment(request: ListIndexedSegmentRequest): ListIndexedSegmentResponse
    def describeSegmentIndexData(request: DescribeSegmentIndexDataRequest): DescribeSegmentIndexDataResponse
    def connect(request: io.milvus.grpc.milvus.ConnectRequest): io.milvus.grpc.milvus.ConnectResponse
    def allocTimestamp(request: io.milvus.grpc.milvus.AllocTimestampRequest): io.milvus.grpc.milvus.AllocTimestampResponse
    def createDatabase(request: io.milvus.grpc.milvus.CreateDatabaseRequest): io.milvus.grpc.common.Status
    def dropDatabase(request: io.milvus.grpc.milvus.DropDatabaseRequest): io.milvus.grpc.common.Status
    def listDatabases(request: io.milvus.grpc.milvus.ListDatabasesRequest): io.milvus.grpc.milvus.ListDatabasesResponse
    def alterDatabase(request: io.milvus.grpc.milvus.AlterDatabaseRequest): io.milvus.grpc.common.Status
    def describeDatabase(request: io.milvus.grpc.milvus.DescribeDatabaseRequest): io.milvus.grpc.milvus.DescribeDatabaseResponse
    def replicateMessage(request: io.milvus.grpc.milvus.ReplicateMessageRequest): io.milvus.grpc.milvus.ReplicateMessageResponse
    def backupRBAC(request: io.milvus.grpc.milvus.BackupRBACMetaRequest): io.milvus.grpc.milvus.BackupRBACMetaResponse
    def restoreRBAC(request: io.milvus.grpc.milvus.RestoreRBACMetaRequest): io.milvus.grpc.common.Status
    def createPrivilegeGroup(request: io.milvus.grpc.milvus.CreatePrivilegeGroupRequest): io.milvus.grpc.common.Status
    def dropPrivilegeGroup(request: io.milvus.grpc.milvus.DropPrivilegeGroupRequest): io.milvus.grpc.common.Status
    def listPrivilegeGroups(request: io.milvus.grpc.milvus.ListPrivilegeGroupsRequest): io.milvus.grpc.milvus.ListPrivilegeGroupsResponse
    def operatePrivilegeGroup(request: io.milvus.grpc.milvus.OperatePrivilegeGroupRequest): io.milvus.grpc.common.Status
    def runAnalyzer(request: io.milvus.grpc.milvus.RunAnalyzerRequest): io.milvus.grpc.milvus.RunAnalyzerResponse
    def addFileResource(request: io.milvus.grpc.milvus.AddFileResourceRequest): io.milvus.grpc.common.Status
    def removeFileResource(request: io.milvus.grpc.milvus.RemoveFileResourceRequest): io.milvus.grpc.common.Status
    def listFileResources(request: io.milvus.grpc.milvus.ListFileResourcesRequest): io.milvus.grpc.milvus.ListFileResourcesResponse
    /** Row Level Security (RLS) APIs
      */
    def addUserTags(request: io.milvus.grpc.milvus.AddUserTagsRequest): io.milvus.grpc.common.Status
    def deleteUserTags(request: io.milvus.grpc.milvus.DeleteUserTagsRequest): io.milvus.grpc.common.Status
    def getUserTags(request: io.milvus.grpc.milvus.GetUserTagsRequest): io.milvus.grpc.milvus.GetUserTagsResponse
    def listUsersWithTag(request: io.milvus.grpc.milvus.ListUsersWithTagRequest): io.milvus.grpc.milvus.ListUsersWithTagResponse
    def createRowPolicy(request: io.milvus.grpc.milvus.CreateRowPolicyRequest): io.milvus.grpc.common.Status
    def dropRowPolicy(request: io.milvus.grpc.milvus.DropRowPolicyRequest): io.milvus.grpc.common.Status
    def listRowPolicies(request: io.milvus.grpc.milvus.ListRowPoliciesRequest): io.milvus.grpc.milvus.ListRowPoliciesResponse
  }
  
  class MilvusServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[MilvusServiceBlockingStub](channel, options) with MilvusServiceBlockingClient {
    override def createCollection(request: io.milvus.grpc.milvus.CreateCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_COLLECTION, options, request)
    }
    
    override def dropCollection(request: io.milvus.grpc.milvus.DropCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_COLLECTION, options, request)
    }
    
    override def hasCollection(request: io.milvus.grpc.milvus.HasCollectionRequest): io.milvus.grpc.milvus.BoolResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_HAS_COLLECTION, options, request)
    }
    
    override def loadCollection(request: io.milvus.grpc.milvus.LoadCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LOAD_COLLECTION, options, request)
    }
    
    override def releaseCollection(request: io.milvus.grpc.milvus.ReleaseCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RELEASE_COLLECTION, options, request)
    }
    
    override def describeCollection(request: io.milvus.grpc.milvus.DescribeCollectionRequest): io.milvus.grpc.milvus.DescribeCollectionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_COLLECTION, options, request)
    }
    
    override def batchDescribeCollection(request: io.milvus.grpc.milvus.BatchDescribeCollectionRequest): io.milvus.grpc.milvus.BatchDescribeCollectionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_BATCH_DESCRIBE_COLLECTION, options, request)
    }
    
    override def getCollectionStatistics(request: io.milvus.grpc.milvus.GetCollectionStatisticsRequest): io.milvus.grpc.milvus.GetCollectionStatisticsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_COLLECTION_STATISTICS, options, request)
    }
    
    override def showCollections(request: io.milvus.grpc.milvus.ShowCollectionsRequest): io.milvus.grpc.milvus.ShowCollectionsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SHOW_COLLECTIONS, options, request)
    }
    
    override def alterCollection(request: io.milvus.grpc.milvus.AlterCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALTER_COLLECTION, options, request)
    }
    
    override def alterCollectionField(request: io.milvus.grpc.milvus.AlterCollectionFieldRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALTER_COLLECTION_FIELD, options, request)
    }
    
    override def createPartition(request: io.milvus.grpc.milvus.CreatePartitionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_PARTITION, options, request)
    }
    
    override def dropPartition(request: io.milvus.grpc.milvus.DropPartitionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_PARTITION, options, request)
    }
    
    override def hasPartition(request: io.milvus.grpc.milvus.HasPartitionRequest): io.milvus.grpc.milvus.BoolResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_HAS_PARTITION, options, request)
    }
    
    override def loadPartitions(request: io.milvus.grpc.milvus.LoadPartitionsRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LOAD_PARTITIONS, options, request)
    }
    
    override def releasePartitions(request: io.milvus.grpc.milvus.ReleasePartitionsRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RELEASE_PARTITIONS, options, request)
    }
    
    override def getPartitionStatistics(request: io.milvus.grpc.milvus.GetPartitionStatisticsRequest): io.milvus.grpc.milvus.GetPartitionStatisticsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_PARTITION_STATISTICS, options, request)
    }
    
    override def showPartitions(request: io.milvus.grpc.milvus.ShowPartitionsRequest): io.milvus.grpc.milvus.ShowPartitionsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SHOW_PARTITIONS, options, request)
    }
    
    override def getLoadingProgress(request: io.milvus.grpc.milvus.GetLoadingProgressRequest): io.milvus.grpc.milvus.GetLoadingProgressResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_LOADING_PROGRESS, options, request)
    }
    
    override def getLoadState(request: io.milvus.grpc.milvus.GetLoadStateRequest): io.milvus.grpc.milvus.GetLoadStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_LOAD_STATE, options, request)
    }
    
    override def createAlias(request: io.milvus.grpc.milvus.CreateAliasRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_ALIAS, options, request)
    }
    
    override def dropAlias(request: io.milvus.grpc.milvus.DropAliasRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_ALIAS, options, request)
    }
    
    override def alterAlias(request: io.milvus.grpc.milvus.AlterAliasRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALTER_ALIAS, options, request)
    }
    
    override def describeAlias(request: io.milvus.grpc.milvus.DescribeAliasRequest): io.milvus.grpc.milvus.DescribeAliasResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_ALIAS, options, request)
    }
    
    override def listAliases(request: io.milvus.grpc.milvus.ListAliasesRequest): io.milvus.grpc.milvus.ListAliasesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_ALIASES, options, request)
    }
    
    override def createIndex(request: io.milvus.grpc.milvus.CreateIndexRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_INDEX, options, request)
    }
    
    override def alterIndex(request: io.milvus.grpc.milvus.AlterIndexRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALTER_INDEX, options, request)
    }
    
    override def describeIndex(request: io.milvus.grpc.milvus.DescribeIndexRequest): io.milvus.grpc.milvus.DescribeIndexResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_INDEX, options, request)
    }
    
    override def getIndexStatistics(request: io.milvus.grpc.milvus.GetIndexStatisticsRequest): io.milvus.grpc.milvus.GetIndexStatisticsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_INDEX_STATISTICS, options, request)
    }
    
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def getIndexState(request: io.milvus.grpc.milvus.GetIndexStateRequest): io.milvus.grpc.milvus.GetIndexStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_INDEX_STATE, options, request)
    }
    
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def getIndexBuildProgress(request: io.milvus.grpc.milvus.GetIndexBuildProgressRequest): io.milvus.grpc.milvus.GetIndexBuildProgressResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_INDEX_BUILD_PROGRESS, options, request)
    }
    
    override def dropIndex(request: io.milvus.grpc.milvus.DropIndexRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_INDEX, options, request)
    }
    
    override def insert(request: io.milvus.grpc.milvus.InsertRequest): io.milvus.grpc.milvus.MutationResult = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_INSERT, options, request)
    }
    
    override def delete(request: io.milvus.grpc.milvus.DeleteRequest): io.milvus.grpc.milvus.MutationResult = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE, options, request)
    }
    
    override def upsert(request: io.milvus.grpc.milvus.UpsertRequest): io.milvus.grpc.milvus.MutationResult = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_UPSERT, options, request)
    }
    
    override def search(request: io.milvus.grpc.milvus.SearchRequest): io.milvus.grpc.milvus.SearchResults = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEARCH, options, request)
    }
    
    override def hybridSearch(request: io.milvus.grpc.milvus.HybridSearchRequest): io.milvus.grpc.milvus.SearchResults = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_HYBRID_SEARCH, options, request)
    }
    
    override def flush(request: io.milvus.grpc.milvus.FlushRequest): io.milvus.grpc.milvus.FlushResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_FLUSH, options, request)
    }
    
    override def query(request: io.milvus.grpc.milvus.QueryRequest): io.milvus.grpc.milvus.QueryResults = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_QUERY, options, request)
    }
    
    override def calcDistance(request: io.milvus.grpc.milvus.CalcDistanceRequest): io.milvus.grpc.milvus.CalcDistanceResults = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CALC_DISTANCE, options, request)
    }
    
    override def flushAll(request: io.milvus.grpc.milvus.FlushAllRequest): io.milvus.grpc.milvus.FlushAllResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_FLUSH_ALL, options, request)
    }
    
    override def addCollectionField(request: io.milvus.grpc.milvus.AddCollectionFieldRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ADD_COLLECTION_FIELD, options, request)
    }
    
    override def getFlushState(request: io.milvus.grpc.milvus.GetFlushStateRequest): io.milvus.grpc.milvus.GetFlushStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_FLUSH_STATE, options, request)
    }
    
    override def getFlushAllState(request: io.milvus.grpc.milvus.GetFlushAllStateRequest): io.milvus.grpc.milvus.GetFlushAllStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_FLUSH_ALL_STATE, options, request)
    }
    
    override def getPersistentSegmentInfo(request: io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest): io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_PERSISTENT_SEGMENT_INFO, options, request)
    }
    
    override def getQuerySegmentInfo(request: io.milvus.grpc.milvus.GetQuerySegmentInfoRequest): io.milvus.grpc.milvus.GetQuerySegmentInfoResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_QUERY_SEGMENT_INFO, options, request)
    }
    
    override def getReplicas(request: io.milvus.grpc.milvus.GetReplicasRequest): io.milvus.grpc.milvus.GetReplicasResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_REPLICAS, options, request)
    }
    
    override def dummy(request: io.milvus.grpc.milvus.DummyRequest): io.milvus.grpc.milvus.DummyResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DUMMY, options, request)
    }
    
    /** TODO: remove
      */
    override def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): io.milvus.grpc.milvus.RegisterLinkResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REGISTER_LINK, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
      */
    override def getMetrics(request: io.milvus.grpc.milvus.GetMetricsRequest): io.milvus.grpc.milvus.GetMetricsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_METRICS, options, request)
    }
    
    override def getComponentStates(request: io.milvus.grpc.milvus.GetComponentStatesRequest): io.milvus.grpc.milvus.ComponentStates = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_COMPONENT_STATES, options, request)
    }
    
    override def loadBalance(request: io.milvus.grpc.milvus.LoadBalanceRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LOAD_BALANCE, options, request)
    }
    
    override def getCompactionState(request: io.milvus.grpc.milvus.GetCompactionStateRequest): io.milvus.grpc.milvus.GetCompactionStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_COMPACTION_STATE, options, request)
    }
    
    override def manualCompaction(request: io.milvus.grpc.milvus.ManualCompactionRequest): io.milvus.grpc.milvus.ManualCompactionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_MANUAL_COMPACTION, options, request)
    }
    
    override def getCompactionStateWithPlans(request: io.milvus.grpc.milvus.GetCompactionPlansRequest): io.milvus.grpc.milvus.GetCompactionPlansResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_COMPACTION_STATE_WITH_PLANS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
      */
    override def `import`(request: io.milvus.grpc.milvus.ImportRequest): io.milvus.grpc.milvus.ImportResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_IMPORT, options, request)
    }
    
    override def getImportState(request: io.milvus.grpc.milvus.GetImportStateRequest): io.milvus.grpc.milvus.GetImportStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_IMPORT_STATE, options, request)
    }
    
    override def listImportTasks(request: io.milvus.grpc.milvus.ListImportTasksRequest): io.milvus.grpc.milvus.ListImportTasksResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_IMPORT_TASKS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
      */
    override def createCredential(request: io.milvus.grpc.milvus.CreateCredentialRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_CREDENTIAL, options, request)
    }
    
    override def updateCredential(request: io.milvus.grpc.milvus.UpdateCredentialRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_UPDATE_CREDENTIAL, options, request)
    }
    
    override def deleteCredential(request: io.milvus.grpc.milvus.DeleteCredentialRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_CREDENTIAL, options, request)
    }
    
    override def listCredUsers(request: io.milvus.grpc.milvus.ListCredUsersRequest): io.milvus.grpc.milvus.ListCredUsersResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_CRED_USERS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
      */
    override def createRole(request: io.milvus.grpc.milvus.CreateRoleRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_ROLE, options, request)
    }
    
    override def dropRole(request: io.milvus.grpc.milvus.DropRoleRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_ROLE, options, request)
    }
    
    override def operateUserRole(request: io.milvus.grpc.milvus.OperateUserRoleRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_OPERATE_USER_ROLE, options, request)
    }
    
    override def selectRole(request: io.milvus.grpc.milvus.SelectRoleRequest): io.milvus.grpc.milvus.SelectRoleResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SELECT_ROLE, options, request)
    }
    
    override def selectUser(request: io.milvus.grpc.milvus.SelectUserRequest): io.milvus.grpc.milvus.SelectUserResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SELECT_USER, options, request)
    }
    
    override def operatePrivilege(request: io.milvus.grpc.milvus.OperatePrivilegeRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_OPERATE_PRIVILEGE, options, request)
    }
    
    override def operatePrivilegeV2(request: io.milvus.grpc.milvus.OperatePrivilegeV2Request): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_OPERATE_PRIVILEGE_V2, options, request)
    }
    
    override def selectGrant(request: io.milvus.grpc.milvus.SelectGrantRequest): io.milvus.grpc.milvus.SelectGrantResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SELECT_GRANT, options, request)
    }
    
    override def getVersion(request: io.milvus.grpc.milvus.GetVersionRequest): io.milvus.grpc.milvus.GetVersionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_VERSION, options, request)
    }
    
    override def checkHealth(request: io.milvus.grpc.milvus.CheckHealthRequest): io.milvus.grpc.milvus.CheckHealthResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CHECK_HEALTH, options, request)
    }
    
    override def createResourceGroup(request: io.milvus.grpc.milvus.CreateResourceGroupRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_RESOURCE_GROUP, options, request)
    }
    
    override def dropResourceGroup(request: io.milvus.grpc.milvus.DropResourceGroupRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_RESOURCE_GROUP, options, request)
    }
    
    override def updateResourceGroups(request: io.milvus.grpc.milvus.UpdateResourceGroupsRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_UPDATE_RESOURCE_GROUPS, options, request)
    }
    
    override def transferNode(request: io.milvus.grpc.milvus.TransferNodeRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TRANSFER_NODE, options, request)
    }
    
    override def transferReplica(request: io.milvus.grpc.milvus.TransferReplicaRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TRANSFER_REPLICA, options, request)
    }
    
    override def listResourceGroups(request: io.milvus.grpc.milvus.ListResourceGroupsRequest): io.milvus.grpc.milvus.ListResourceGroupsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_RESOURCE_GROUPS, options, request)
    }
    
    override def describeResourceGroup(request: io.milvus.grpc.milvus.DescribeResourceGroupRequest): io.milvus.grpc.milvus.DescribeResourceGroupResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_RESOURCE_GROUP, options, request)
    }
    
    override def renameCollection(request: io.milvus.grpc.milvus.RenameCollectionRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RENAME_COLLECTION, options, request)
    }
    
    override def listIndexedSegment(request: ListIndexedSegmentRequest): ListIndexedSegmentResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_INDEXED_SEGMENT, options, request)
    }
    
    override def describeSegmentIndexData(request: DescribeSegmentIndexDataRequest): DescribeSegmentIndexDataResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_SEGMENT_INDEX_DATA, options, request)
    }
    
    override def connect(request: io.milvus.grpc.milvus.ConnectRequest): io.milvus.grpc.milvus.ConnectResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONNECT, options, request)
    }
    
    override def allocTimestamp(request: io.milvus.grpc.milvus.AllocTimestampRequest): io.milvus.grpc.milvus.AllocTimestampResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALLOC_TIMESTAMP, options, request)
    }
    
    override def createDatabase(request: io.milvus.grpc.milvus.CreateDatabaseRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_DATABASE, options, request)
    }
    
    override def dropDatabase(request: io.milvus.grpc.milvus.DropDatabaseRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_DATABASE, options, request)
    }
    
    override def listDatabases(request: io.milvus.grpc.milvus.ListDatabasesRequest): io.milvus.grpc.milvus.ListDatabasesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_DATABASES, options, request)
    }
    
    override def alterDatabase(request: io.milvus.grpc.milvus.AlterDatabaseRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ALTER_DATABASE, options, request)
    }
    
    override def describeDatabase(request: io.milvus.grpc.milvus.DescribeDatabaseRequest): io.milvus.grpc.milvus.DescribeDatabaseResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DESCRIBE_DATABASE, options, request)
    }
    
    override def replicateMessage(request: io.milvus.grpc.milvus.ReplicateMessageRequest): io.milvus.grpc.milvus.ReplicateMessageResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REPLICATE_MESSAGE, options, request)
    }
    
    override def backupRBAC(request: io.milvus.grpc.milvus.BackupRBACMetaRequest): io.milvus.grpc.milvus.BackupRBACMetaResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_BACKUP_RBAC, options, request)
    }
    
    override def restoreRBAC(request: io.milvus.grpc.milvus.RestoreRBACMetaRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RESTORE_RBAC, options, request)
    }
    
    override def createPrivilegeGroup(request: io.milvus.grpc.milvus.CreatePrivilegeGroupRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_PRIVILEGE_GROUP, options, request)
    }
    
    override def dropPrivilegeGroup(request: io.milvus.grpc.milvus.DropPrivilegeGroupRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_PRIVILEGE_GROUP, options, request)
    }
    
    override def listPrivilegeGroups(request: io.milvus.grpc.milvus.ListPrivilegeGroupsRequest): io.milvus.grpc.milvus.ListPrivilegeGroupsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_PRIVILEGE_GROUPS, options, request)
    }
    
    override def operatePrivilegeGroup(request: io.milvus.grpc.milvus.OperatePrivilegeGroupRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_OPERATE_PRIVILEGE_GROUP, options, request)
    }
    
    override def runAnalyzer(request: io.milvus.grpc.milvus.RunAnalyzerRequest): io.milvus.grpc.milvus.RunAnalyzerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RUN_ANALYZER, options, request)
    }
    
    override def addFileResource(request: io.milvus.grpc.milvus.AddFileResourceRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ADD_FILE_RESOURCE, options, request)
    }
    
    override def removeFileResource(request: io.milvus.grpc.milvus.RemoveFileResourceRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REMOVE_FILE_RESOURCE, options, request)
    }
    
    override def listFileResources(request: io.milvus.grpc.milvus.ListFileResourcesRequest): io.milvus.grpc.milvus.ListFileResourcesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_FILE_RESOURCES, options, request)
    }
    
    /** Row Level Security (RLS) APIs
      */
    override def addUserTags(request: io.milvus.grpc.milvus.AddUserTagsRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ADD_USER_TAGS, options, request)
    }
    
    override def deleteUserTags(request: io.milvus.grpc.milvus.DeleteUserTagsRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_USER_TAGS, options, request)
    }
    
    override def getUserTags(request: io.milvus.grpc.milvus.GetUserTagsRequest): io.milvus.grpc.milvus.GetUserTagsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_USER_TAGS, options, request)
    }
    
    override def listUsersWithTag(request: io.milvus.grpc.milvus.ListUsersWithTagRequest): io.milvus.grpc.milvus.ListUsersWithTagResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_USERS_WITH_TAG, options, request)
    }
    
    override def createRowPolicy(request: io.milvus.grpc.milvus.CreateRowPolicyRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_ROW_POLICY, options, request)
    }
    
    override def dropRowPolicy(request: io.milvus.grpc.milvus.DropRowPolicyRequest): io.milvus.grpc.common.Status = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DROP_ROW_POLICY, options, request)
    }
    
    override def listRowPolicies(request: io.milvus.grpc.milvus.ListRowPoliciesRequest): io.milvus.grpc.milvus.ListRowPoliciesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_ROW_POLICIES, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MilvusServiceBlockingStub = new MilvusServiceBlockingStub(channel, options)
  }
  
  class MilvusServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[MilvusServiceStub](channel, options) with MilvusService {
    override def createCollection(request: io.milvus.grpc.milvus.CreateCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_COLLECTION, options, request)
    }
    
    override def dropCollection(request: io.milvus.grpc.milvus.DropCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_COLLECTION, options, request)
    }
    
    override def hasCollection(request: io.milvus.grpc.milvus.HasCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BoolResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_HAS_COLLECTION, options, request)
    }
    
    override def loadCollection(request: io.milvus.grpc.milvus.LoadCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LOAD_COLLECTION, options, request)
    }
    
    override def releaseCollection(request: io.milvus.grpc.milvus.ReleaseCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RELEASE_COLLECTION, options, request)
    }
    
    override def describeCollection(request: io.milvus.grpc.milvus.DescribeCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeCollectionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_COLLECTION, options, request)
    }
    
    override def batchDescribeCollection(request: io.milvus.grpc.milvus.BatchDescribeCollectionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BatchDescribeCollectionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_BATCH_DESCRIBE_COLLECTION, options, request)
    }
    
    override def getCollectionStatistics(request: io.milvus.grpc.milvus.GetCollectionStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCollectionStatisticsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_COLLECTION_STATISTICS, options, request)
    }
    
    override def showCollections(request: io.milvus.grpc.milvus.ShowCollectionsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ShowCollectionsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SHOW_COLLECTIONS, options, request)
    }
    
    override def alterCollection(request: io.milvus.grpc.milvus.AlterCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALTER_COLLECTION, options, request)
    }
    
    override def alterCollectionField(request: io.milvus.grpc.milvus.AlterCollectionFieldRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALTER_COLLECTION_FIELD, options, request)
    }
    
    override def createPartition(request: io.milvus.grpc.milvus.CreatePartitionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_PARTITION, options, request)
    }
    
    override def dropPartition(request: io.milvus.grpc.milvus.DropPartitionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_PARTITION, options, request)
    }
    
    override def hasPartition(request: io.milvus.grpc.milvus.HasPartitionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BoolResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_HAS_PARTITION, options, request)
    }
    
    override def loadPartitions(request: io.milvus.grpc.milvus.LoadPartitionsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LOAD_PARTITIONS, options, request)
    }
    
    override def releasePartitions(request: io.milvus.grpc.milvus.ReleasePartitionsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RELEASE_PARTITIONS, options, request)
    }
    
    override def getPartitionStatistics(request: io.milvus.grpc.milvus.GetPartitionStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetPartitionStatisticsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_PARTITION_STATISTICS, options, request)
    }
    
    override def showPartitions(request: io.milvus.grpc.milvus.ShowPartitionsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ShowPartitionsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SHOW_PARTITIONS, options, request)
    }
    
    override def getLoadingProgress(request: io.milvus.grpc.milvus.GetLoadingProgressRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetLoadingProgressResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_LOADING_PROGRESS, options, request)
    }
    
    override def getLoadState(request: io.milvus.grpc.milvus.GetLoadStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetLoadStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_LOAD_STATE, options, request)
    }
    
    override def createAlias(request: io.milvus.grpc.milvus.CreateAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_ALIAS, options, request)
    }
    
    override def dropAlias(request: io.milvus.grpc.milvus.DropAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_ALIAS, options, request)
    }
    
    override def alterAlias(request: io.milvus.grpc.milvus.AlterAliasRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALTER_ALIAS, options, request)
    }
    
    override def describeAlias(request: io.milvus.grpc.milvus.DescribeAliasRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeAliasResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_ALIAS, options, request)
    }
    
    override def listAliases(request: io.milvus.grpc.milvus.ListAliasesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListAliasesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_ALIASES, options, request)
    }
    
    override def createIndex(request: io.milvus.grpc.milvus.CreateIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_INDEX, options, request)
    }
    
    override def alterIndex(request: io.milvus.grpc.milvus.AlterIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALTER_INDEX, options, request)
    }
    
    override def describeIndex(request: io.milvus.grpc.milvus.DescribeIndexRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeIndexResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_INDEX, options, request)
    }
    
    override def getIndexStatistics(request: io.milvus.grpc.milvus.GetIndexStatisticsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexStatisticsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_INDEX_STATISTICS, options, request)
    }
    
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def getIndexState(request: io.milvus.grpc.milvus.GetIndexStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_INDEX_STATE, options, request)
    }
    
    /** Deprecated: use DescribeIndex instead
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def getIndexBuildProgress(request: io.milvus.grpc.milvus.GetIndexBuildProgressRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetIndexBuildProgressResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_INDEX_BUILD_PROGRESS, options, request)
    }
    
    override def dropIndex(request: io.milvus.grpc.milvus.DropIndexRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_INDEX, options, request)
    }
    
    override def insert(request: io.milvus.grpc.milvus.InsertRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_INSERT, options, request)
    }
    
    override def delete(request: io.milvus.grpc.milvus.DeleteRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE, options, request)
    }
    
    override def upsert(request: io.milvus.grpc.milvus.UpsertRequest): scala.concurrent.Future[io.milvus.grpc.milvus.MutationResult] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_UPSERT, options, request)
    }
    
    override def search(request: io.milvus.grpc.milvus.SearchRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SearchResults] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEARCH, options, request)
    }
    
    override def hybridSearch(request: io.milvus.grpc.milvus.HybridSearchRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SearchResults] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_HYBRID_SEARCH, options, request)
    }
    
    override def flush(request: io.milvus.grpc.milvus.FlushRequest): scala.concurrent.Future[io.milvus.grpc.milvus.FlushResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_FLUSH, options, request)
    }
    
    override def query(request: io.milvus.grpc.milvus.QueryRequest): scala.concurrent.Future[io.milvus.grpc.milvus.QueryResults] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_QUERY, options, request)
    }
    
    override def calcDistance(request: io.milvus.grpc.milvus.CalcDistanceRequest): scala.concurrent.Future[io.milvus.grpc.milvus.CalcDistanceResults] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CALC_DISTANCE, options, request)
    }
    
    override def flushAll(request: io.milvus.grpc.milvus.FlushAllRequest): scala.concurrent.Future[io.milvus.grpc.milvus.FlushAllResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_FLUSH_ALL, options, request)
    }
    
    override def addCollectionField(request: io.milvus.grpc.milvus.AddCollectionFieldRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ADD_COLLECTION_FIELD, options, request)
    }
    
    override def getFlushState(request: io.milvus.grpc.milvus.GetFlushStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetFlushStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_FLUSH_STATE, options, request)
    }
    
    override def getFlushAllState(request: io.milvus.grpc.milvus.GetFlushAllStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetFlushAllStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_FLUSH_ALL_STATE, options, request)
    }
    
    override def getPersistentSegmentInfo(request: io.milvus.grpc.milvus.GetPersistentSegmentInfoRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetPersistentSegmentInfoResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_PERSISTENT_SEGMENT_INFO, options, request)
    }
    
    override def getQuerySegmentInfo(request: io.milvus.grpc.milvus.GetQuerySegmentInfoRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetQuerySegmentInfoResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_QUERY_SEGMENT_INFO, options, request)
    }
    
    override def getReplicas(request: io.milvus.grpc.milvus.GetReplicasRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetReplicasResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_REPLICAS, options, request)
    }
    
    override def dummy(request: io.milvus.grpc.milvus.DummyRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DummyResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DUMMY, options, request)
    }
    
    /** TODO: remove
      */
    override def registerLink(request: io.milvus.grpc.milvus.RegisterLinkRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RegisterLinkResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REGISTER_LINK, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
      */
    override def getMetrics(request: io.milvus.grpc.milvus.GetMetricsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetMetricsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_METRICS, options, request)
    }
    
    override def getComponentStates(request: io.milvus.grpc.milvus.GetComponentStatesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ComponentStates] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_COMPONENT_STATES, options, request)
    }
    
    override def loadBalance(request: io.milvus.grpc.milvus.LoadBalanceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LOAD_BALANCE, options, request)
    }
    
    override def getCompactionState(request: io.milvus.grpc.milvus.GetCompactionStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCompactionStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_COMPACTION_STATE, options, request)
    }
    
    override def manualCompaction(request: io.milvus.grpc.milvus.ManualCompactionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ManualCompactionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_MANUAL_COMPACTION, options, request)
    }
    
    override def getCompactionStateWithPlans(request: io.milvus.grpc.milvus.GetCompactionPlansRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetCompactionPlansResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_COMPACTION_STATE_WITH_PLANS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
      */
    override def `import`(request: io.milvus.grpc.milvus.ImportRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ImportResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_IMPORT, options, request)
    }
    
    override def getImportState(request: io.milvus.grpc.milvus.GetImportStateRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetImportStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_IMPORT_STATE, options, request)
    }
    
    override def listImportTasks(request: io.milvus.grpc.milvus.ListImportTasksRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListImportTasksResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_IMPORT_TASKS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
      */
    override def createCredential(request: io.milvus.grpc.milvus.CreateCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_CREDENTIAL, options, request)
    }
    
    override def updateCredential(request: io.milvus.grpc.milvus.UpdateCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_UPDATE_CREDENTIAL, options, request)
    }
    
    override def deleteCredential(request: io.milvus.grpc.milvus.DeleteCredentialRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_CREDENTIAL, options, request)
    }
    
    override def listCredUsers(request: io.milvus.grpc.milvus.ListCredUsersRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListCredUsersResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_CRED_USERS, options, request)
    }
    
    /** https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
      */
    override def createRole(request: io.milvus.grpc.milvus.CreateRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_ROLE, options, request)
    }
    
    override def dropRole(request: io.milvus.grpc.milvus.DropRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_ROLE, options, request)
    }
    
    override def operateUserRole(request: io.milvus.grpc.milvus.OperateUserRoleRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_OPERATE_USER_ROLE, options, request)
    }
    
    override def selectRole(request: io.milvus.grpc.milvus.SelectRoleRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectRoleResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SELECT_ROLE, options, request)
    }
    
    override def selectUser(request: io.milvus.grpc.milvus.SelectUserRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectUserResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SELECT_USER, options, request)
    }
    
    override def operatePrivilege(request: io.milvus.grpc.milvus.OperatePrivilegeRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_OPERATE_PRIVILEGE, options, request)
    }
    
    override def operatePrivilegeV2(request: io.milvus.grpc.milvus.OperatePrivilegeV2Request): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_OPERATE_PRIVILEGE_V2, options, request)
    }
    
    override def selectGrant(request: io.milvus.grpc.milvus.SelectGrantRequest): scala.concurrent.Future[io.milvus.grpc.milvus.SelectGrantResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SELECT_GRANT, options, request)
    }
    
    override def getVersion(request: io.milvus.grpc.milvus.GetVersionRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetVersionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_VERSION, options, request)
    }
    
    override def checkHealth(request: io.milvus.grpc.milvus.CheckHealthRequest): scala.concurrent.Future[io.milvus.grpc.milvus.CheckHealthResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CHECK_HEALTH, options, request)
    }
    
    override def createResourceGroup(request: io.milvus.grpc.milvus.CreateResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_RESOURCE_GROUP, options, request)
    }
    
    override def dropResourceGroup(request: io.milvus.grpc.milvus.DropResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_RESOURCE_GROUP, options, request)
    }
    
    override def updateResourceGroups(request: io.milvus.grpc.milvus.UpdateResourceGroupsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_UPDATE_RESOURCE_GROUPS, options, request)
    }
    
    override def transferNode(request: io.milvus.grpc.milvus.TransferNodeRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TRANSFER_NODE, options, request)
    }
    
    override def transferReplica(request: io.milvus.grpc.milvus.TransferReplicaRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TRANSFER_REPLICA, options, request)
    }
    
    override def listResourceGroups(request: io.milvus.grpc.milvus.ListResourceGroupsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListResourceGroupsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_RESOURCE_GROUPS, options, request)
    }
    
    override def describeResourceGroup(request: io.milvus.grpc.milvus.DescribeResourceGroupRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeResourceGroupResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_RESOURCE_GROUP, options, request)
    }
    
    override def renameCollection(request: io.milvus.grpc.milvus.RenameCollectionRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RENAME_COLLECTION, options, request)
    }
    
    override def listIndexedSegment(request: ListIndexedSegmentRequest): scala.concurrent.Future[ListIndexedSegmentResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_INDEXED_SEGMENT, options, request)
    }
    
    override def describeSegmentIndexData(request: DescribeSegmentIndexDataRequest): scala.concurrent.Future[DescribeSegmentIndexDataResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_SEGMENT_INDEX_DATA, options, request)
    }
    
    override def connect(request: io.milvus.grpc.milvus.ConnectRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ConnectResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONNECT, options, request)
    }
    
    override def allocTimestamp(request: io.milvus.grpc.milvus.AllocTimestampRequest): scala.concurrent.Future[io.milvus.grpc.milvus.AllocTimestampResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALLOC_TIMESTAMP, options, request)
    }
    
    override def createDatabase(request: io.milvus.grpc.milvus.CreateDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_DATABASE, options, request)
    }
    
    override def dropDatabase(request: io.milvus.grpc.milvus.DropDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_DATABASE, options, request)
    }
    
    override def listDatabases(request: io.milvus.grpc.milvus.ListDatabasesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListDatabasesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_DATABASES, options, request)
    }
    
    override def alterDatabase(request: io.milvus.grpc.milvus.AlterDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ALTER_DATABASE, options, request)
    }
    
    override def describeDatabase(request: io.milvus.grpc.milvus.DescribeDatabaseRequest): scala.concurrent.Future[io.milvus.grpc.milvus.DescribeDatabaseResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DESCRIBE_DATABASE, options, request)
    }
    
    override def replicateMessage(request: io.milvus.grpc.milvus.ReplicateMessageRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ReplicateMessageResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REPLICATE_MESSAGE, options, request)
    }
    
    override def backupRBAC(request: io.milvus.grpc.milvus.BackupRBACMetaRequest): scala.concurrent.Future[io.milvus.grpc.milvus.BackupRBACMetaResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_BACKUP_RBAC, options, request)
    }
    
    override def restoreRBAC(request: io.milvus.grpc.milvus.RestoreRBACMetaRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RESTORE_RBAC, options, request)
    }
    
    override def createPrivilegeGroup(request: io.milvus.grpc.milvus.CreatePrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_PRIVILEGE_GROUP, options, request)
    }
    
    override def dropPrivilegeGroup(request: io.milvus.grpc.milvus.DropPrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_PRIVILEGE_GROUP, options, request)
    }
    
    override def listPrivilegeGroups(request: io.milvus.grpc.milvus.ListPrivilegeGroupsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListPrivilegeGroupsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_PRIVILEGE_GROUPS, options, request)
    }
    
    override def operatePrivilegeGroup(request: io.milvus.grpc.milvus.OperatePrivilegeGroupRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_OPERATE_PRIVILEGE_GROUP, options, request)
    }
    
    override def runAnalyzer(request: io.milvus.grpc.milvus.RunAnalyzerRequest): scala.concurrent.Future[io.milvus.grpc.milvus.RunAnalyzerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RUN_ANALYZER, options, request)
    }
    
    override def addFileResource(request: io.milvus.grpc.milvus.AddFileResourceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ADD_FILE_RESOURCE, options, request)
    }
    
    override def removeFileResource(request: io.milvus.grpc.milvus.RemoveFileResourceRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REMOVE_FILE_RESOURCE, options, request)
    }
    
    override def listFileResources(request: io.milvus.grpc.milvus.ListFileResourcesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListFileResourcesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_FILE_RESOURCES, options, request)
    }
    
    /** Row Level Security (RLS) APIs
      */
    override def addUserTags(request: io.milvus.grpc.milvus.AddUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ADD_USER_TAGS, options, request)
    }
    
    override def deleteUserTags(request: io.milvus.grpc.milvus.DeleteUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_USER_TAGS, options, request)
    }
    
    override def getUserTags(request: io.milvus.grpc.milvus.GetUserTagsRequest): scala.concurrent.Future[io.milvus.grpc.milvus.GetUserTagsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_USER_TAGS, options, request)
    }
    
    override def listUsersWithTag(request: io.milvus.grpc.milvus.ListUsersWithTagRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListUsersWithTagResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_USERS_WITH_TAG, options, request)
    }
    
    override def createRowPolicy(request: io.milvus.grpc.milvus.CreateRowPolicyRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_ROW_POLICY, options, request)
    }
    
    override def dropRowPolicy(request: io.milvus.grpc.milvus.DropRowPolicyRequest): scala.concurrent.Future[io.milvus.grpc.common.Status] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DROP_ROW_POLICY, options, request)
    }
    
    override def listRowPolicies(request: io.milvus.grpc.milvus.ListRowPoliciesRequest): scala.concurrent.Future[io.milvus.grpc.milvus.ListRowPoliciesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_ROW_POLICIES, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MilvusServiceStub = new MilvusServiceStub(channel, options)
  }
  
  object MilvusServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[MilvusServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): MilvusServiceStub = new MilvusServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[MilvusServiceStub] = this
  }
  
  def bindService(serviceImpl: MilvusService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = MilvusService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): MilvusServiceBlockingStub = new MilvusServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): MilvusServiceStub = new MilvusServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getServices().get(0)
  
}