// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param users
  *   user
  * @param roles
  *   role
  * @param grants
  *   (role, object, previledge)
  * @param privilegeGroups
  *   privilege group info
  */
@SerialVersionUID(0L)
final case class RBACMeta(
    users: _root_.scala.Seq[io.milvus.grpc.milvus.UserInfo] = _root_.scala.Seq.empty,
    roles: _root_.scala.Seq[io.milvus.grpc.milvus.RoleEntity] = _root_.scala.Seq.empty,
    grants: _root_.scala.Seq[io.milvus.grpc.milvus.GrantEntity] = _root_.scala.Seq.empty,
    privilegeGroups: _root_.scala.Seq[io.milvus.grpc.milvus.PrivilegeGroupInfo] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RBACMeta] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      users.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      roles.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      grants.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      privilegeGroups.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      users.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      roles.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      grants.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      privilegeGroups.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearUsers = copy(users = _root_.scala.Seq.empty)
    def addUsers(__vs: io.milvus.grpc.milvus.UserInfo *): RBACMeta = addAllUsers(__vs)
    def addAllUsers(__vs: Iterable[io.milvus.grpc.milvus.UserInfo]): RBACMeta = copy(users = users ++ __vs)
    def withUsers(__v: _root_.scala.Seq[io.milvus.grpc.milvus.UserInfo]): RBACMeta = copy(users = __v)
    def clearRoles = copy(roles = _root_.scala.Seq.empty)
    def addRoles(__vs: io.milvus.grpc.milvus.RoleEntity *): RBACMeta = addAllRoles(__vs)
    def addAllRoles(__vs: Iterable[io.milvus.grpc.milvus.RoleEntity]): RBACMeta = copy(roles = roles ++ __vs)
    def withRoles(__v: _root_.scala.Seq[io.milvus.grpc.milvus.RoleEntity]): RBACMeta = copy(roles = __v)
    def clearGrants = copy(grants = _root_.scala.Seq.empty)
    def addGrants(__vs: io.milvus.grpc.milvus.GrantEntity *): RBACMeta = addAllGrants(__vs)
    def addAllGrants(__vs: Iterable[io.milvus.grpc.milvus.GrantEntity]): RBACMeta = copy(grants = grants ++ __vs)
    def withGrants(__v: _root_.scala.Seq[io.milvus.grpc.milvus.GrantEntity]): RBACMeta = copy(grants = __v)
    def clearPrivilegeGroups = copy(privilegeGroups = _root_.scala.Seq.empty)
    def addPrivilegeGroups(__vs: io.milvus.grpc.milvus.PrivilegeGroupInfo *): RBACMeta = addAllPrivilegeGroups(__vs)
    def addAllPrivilegeGroups(__vs: Iterable[io.milvus.grpc.milvus.PrivilegeGroupInfo]): RBACMeta = copy(privilegeGroups = privilegeGroups ++ __vs)
    def withPrivilegeGroups(__v: _root_.scala.Seq[io.milvus.grpc.milvus.PrivilegeGroupInfo]): RBACMeta = copy(privilegeGroups = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => users
        case 2 => roles
        case 3 => grants
        case 4 => privilegeGroups
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(users.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(roles.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(grants.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(privilegeGroups.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.RBACMeta.type = io.milvus.grpc.milvus.RBACMeta
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.RBACMeta])
}

object RBACMeta extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.RBACMeta] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.RBACMeta] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.RBACMeta = {
    val __users: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.UserInfo] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.UserInfo]
    val __roles: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.RoleEntity] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.RoleEntity]
    val __grants: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.GrantEntity] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.GrantEntity]
    val __privilegeGroups: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.PrivilegeGroupInfo] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.PrivilegeGroupInfo]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __users += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.UserInfo](_input__)
        case 18 =>
          __roles += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.RoleEntity](_input__)
        case 26 =>
          __grants += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.GrantEntity](_input__)
        case 34 =>
          __privilegeGroups += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.PrivilegeGroupInfo](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.RBACMeta(
        users = __users.result(),
        roles = __roles.result(),
        grants = __grants.result(),
        privilegeGroups = __privilegeGroups.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.RBACMeta] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.RBACMeta(
        users = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.UserInfo]]).getOrElse(_root_.scala.Seq.empty),
        roles = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.RoleEntity]]).getOrElse(_root_.scala.Seq.empty),
        grants = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.GrantEntity]]).getOrElse(_root_.scala.Seq.empty),
        privilegeGroups = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.PrivilegeGroupInfo]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(139)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(139)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.milvus.UserInfo
      case 2 => __out = io.milvus.grpc.milvus.RoleEntity
      case 3 => __out = io.milvus.grpc.milvus.GrantEntity
      case 4 => __out = io.milvus.grpc.milvus.PrivilegeGroupInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.RBACMeta(
    users = _root_.scala.Seq.empty,
    roles = _root_.scala.Seq.empty,
    grants = _root_.scala.Seq.empty,
    privilegeGroups = _root_.scala.Seq.empty
  )
  implicit class RBACMetaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.RBACMeta]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.RBACMeta](_l) {
    def users: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.UserInfo]] = field(_.users)((c_, f_) => c_.copy(users = f_))
    def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.RoleEntity]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    def grants: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.GrantEntity]] = field(_.grants)((c_, f_) => c_.copy(grants = f_))
    def privilegeGroups: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.PrivilegeGroupInfo]] = field(_.privilegeGroups)((c_, f_) => c_.copy(privilegeGroups = f_))
  }
  final val USERS_FIELD_NUMBER = 1
  final val ROLES_FIELD_NUMBER = 2
  final val GRANTS_FIELD_NUMBER = 3
  final val PRIVILEGE_GROUPS_FIELD_NUMBER = 4
  def of(
    users: _root_.scala.Seq[io.milvus.grpc.milvus.UserInfo],
    roles: _root_.scala.Seq[io.milvus.grpc.milvus.RoleEntity],
    grants: _root_.scala.Seq[io.milvus.grpc.milvus.GrantEntity],
    privilegeGroups: _root_.scala.Seq[io.milvus.grpc.milvus.PrivilegeGroupInfo]
  ): _root_.io.milvus.grpc.milvus.RBACMeta = _root_.io.milvus.grpc.milvus.RBACMeta(
    users,
    roles,
    grants,
    privilegeGroups
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.RBACMeta])
}
