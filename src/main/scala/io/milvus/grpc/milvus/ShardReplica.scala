// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param leaderAddr
  *   IP:port
  * @param nodeIds
  *   optional, DO NOT save it in meta, set it only for GetReplicas()
  *   if with_shard_nodes is true
  */
@SerialVersionUID(0L)
final case class ShardReplica(
    leaderID: _root_.scala.Long = 0L,
    leaderAddr: _root_.scala.Predef.String = "",
    dmChannelName: _root_.scala.Predef.String = "",
    nodeIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ShardReplica] {
    private[this] def nodeIdsSerializedSize = {
      if (__nodeIdsSerializedSizeField == 0) __nodeIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        nodeIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __nodeIdsSerializedSizeField
    }
    @transient private[this] var __nodeIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = leaderID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = leaderAddr
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = dmChannelName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (nodeIds.nonEmpty) {
        val __localsize = nodeIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = leaderID
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = leaderAddr
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = dmChannelName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      if (nodeIds.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(nodeIdsSerializedSize)
        nodeIds.foreach(_output__.writeInt64NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withLeaderID(__v: _root_.scala.Long): ShardReplica = copy(leaderID = __v)
    def withLeaderAddr(__v: _root_.scala.Predef.String): ShardReplica = copy(leaderAddr = __v)
    def withDmChannelName(__v: _root_.scala.Predef.String): ShardReplica = copy(dmChannelName = __v)
    def clearNodeIds = copy(nodeIds = _root_.scala.Seq.empty)
    def addNodeIds(__vs: _root_.scala.Long *): ShardReplica = addAllNodeIds(__vs)
    def addAllNodeIds(__vs: Iterable[_root_.scala.Long]): ShardReplica = copy(nodeIds = nodeIds ++ __vs)
    def withNodeIds(__v: _root_.scala.Seq[_root_.scala.Long]): ShardReplica = copy(nodeIds = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = leaderID
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = leaderAddr
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = dmChannelName
          if (__t != "") __t else null
        }
        case 4 => nodeIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(leaderID)
        case 2 => _root_.scalapb.descriptors.PString(leaderAddr)
        case 3 => _root_.scalapb.descriptors.PString(dmChannelName)
        case 4 => _root_.scalapb.descriptors.PRepeated(nodeIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.ShardReplica.type = io.milvus.grpc.milvus.ShardReplica
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ShardReplica])
}

object ShardReplica extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ShardReplica] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ShardReplica] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ShardReplica = {
    var __leaderID: _root_.scala.Long = 0L
    var __leaderAddr: _root_.scala.Predef.String = ""
    var __dmChannelName: _root_.scala.Predef.String = ""
    val __nodeIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __leaderID = _input__.readInt64()
        case 18 =>
          __leaderAddr = _input__.readStringRequireUtf8()
        case 26 =>
          __dmChannelName = _input__.readStringRequireUtf8()
        case 32 =>
          __nodeIds += _input__.readInt64()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __nodeIds += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.ShardReplica(
        leaderID = __leaderID,
        leaderAddr = __leaderAddr,
        dmChannelName = __dmChannelName,
        nodeIds = __nodeIds.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ShardReplica] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.ShardReplica(
        leaderID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        leaderAddr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dmChannelName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        nodeIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(106)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(106)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.ShardReplica(
    leaderID = 0L,
    leaderAddr = "",
    dmChannelName = "",
    nodeIds = _root_.scala.Seq.empty
  )
  implicit class ShardReplicaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ShardReplica]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ShardReplica](_l) {
    def leaderID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.leaderID)((c_, f_) => c_.copy(leaderID = f_))
    def leaderAddr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.leaderAddr)((c_, f_) => c_.copy(leaderAddr = f_))
    def dmChannelName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dmChannelName)((c_, f_) => c_.copy(dmChannelName = f_))
    def nodeIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.nodeIds)((c_, f_) => c_.copy(nodeIds = f_))
  }
  final val LEADERID_FIELD_NUMBER = 1
  final val LEADER_ADDR_FIELD_NUMBER = 2
  final val DM_CHANNEL_NAME_FIELD_NUMBER = 3
  final val NODE_IDS_FIELD_NUMBER = 4
  def of(
    leaderID: _root_.scala.Long,
    leaderAddr: _root_.scala.Predef.String,
    dmChannelName: _root_.scala.Predef.String,
    nodeIds: _root_.scala.Seq[_root_.scala.Long]
  ): _root_.io.milvus.grpc.milvus.ShardReplica = _root_.io.milvus.grpc.milvus.ShardReplica(
    leaderID,
    leaderAddr,
    dmChannelName,
    nodeIds
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ShardReplica])
}
