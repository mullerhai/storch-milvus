// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class CompactionMergeInfo(
    sources: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    target: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CompactionMergeInfo] {
    private[this] def sourcesSerializedSize = {
      if (__sourcesSerializedSizeField == 0) __sourcesSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        sources.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __sourcesSerializedSizeField
    }
    @transient private[this] var __sourcesSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sources.nonEmpty) {
        val __localsize = sourcesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = target
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (sources.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(sourcesSerializedSize)
        sources.foreach(_output__.writeInt64NoTag)
      };
      {
        val __v = target
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearSources = copy(sources = _root_.scala.Seq.empty)
    def addSources(__vs: _root_.scala.Long *): CompactionMergeInfo = addAllSources(__vs)
    def addAllSources(__vs: Iterable[_root_.scala.Long]): CompactionMergeInfo = copy(sources = sources ++ __vs)
    def withSources(__v: _root_.scala.Seq[_root_.scala.Long]): CompactionMergeInfo = copy(sources = __v)
    def withTarget(__v: _root_.scala.Long): CompactionMergeInfo = copy(target = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sources
        case 2 => {
          val __t = target
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(sources.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PLong(target)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.CompactionMergeInfo.type = io.milvus.grpc.milvus.CompactionMergeInfo
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.CompactionMergeInfo])
}

object CompactionMergeInfo extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.CompactionMergeInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.CompactionMergeInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.CompactionMergeInfo = {
    val __sources: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var __target: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __sources += _input__.readInt64()
        case 10 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __sources += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 16 =>
          __target = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.CompactionMergeInfo(
        sources = __sources.result(),
        target = __target,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.CompactionMergeInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.CompactionMergeInfo(
        sources = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(92)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(92)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.CompactionMergeInfo(
    sources = _root_.scala.Seq.empty,
    target = 0L
  )
  implicit class CompactionMergeInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.CompactionMergeInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.CompactionMergeInfo](_l) {
    def sources: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.sources)((c_, f_) => c_.copy(sources = f_))
    def target: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.target)((c_, f_) => c_.copy(target = f_))
  }
  final val SOURCES_FIELD_NUMBER = 1
  final val TARGET_FIELD_NUMBER = 2
  def of(
    sources: _root_.scala.Seq[_root_.scala.Long],
    target: _root_.scala.Long
  ): _root_.io.milvus.grpc.milvus.CompactionMergeInfo = _root_.io.milvus.grpc.milvus.CompactionMergeInfo(
    sources,
    target
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.CompactionMergeInfo])
}
