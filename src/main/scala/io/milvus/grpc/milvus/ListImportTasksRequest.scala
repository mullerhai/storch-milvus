// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param collectionName
  *   target collection, list all tasks if the name is empty
  * @param limit
  *   maximum number of tasks returned, list all tasks if the value is 0
  */
@SerialVersionUID(0L)
final case class ListImportTasksRequest(
    collectionName: _root_.scala.Predef.String = "",
    limit: _root_.scala.Long = 0L,
    dbName: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ListImportTasksRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = collectionName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = limit
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = collectionName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = limit
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withCollectionName(__v: _root_.scala.Predef.String): ListImportTasksRequest = copy(collectionName = __v)
    def withLimit(__v: _root_.scala.Long): ListImportTasksRequest = copy(limit = __v)
    def withDbName(__v: _root_.scala.Predef.String): ListImportTasksRequest = copy(dbName = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = collectionName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = limit
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = dbName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(collectionName)
        case 2 => _root_.scalapb.descriptors.PLong(limit)
        case 3 => _root_.scalapb.descriptors.PString(dbName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.ListImportTasksRequest.type = io.milvus.grpc.milvus.ListImportTasksRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ListImportTasksRequest])
}

object ListImportTasksRequest extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ListImportTasksRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ListImportTasksRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ListImportTasksRequest = {
    var __collectionName: _root_.scala.Predef.String = ""
    var __limit: _root_.scala.Long = 0L
    var __dbName: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __collectionName = _input__.readStringRequireUtf8()
        case 16 =>
          __limit = _input__.readInt64()
        case 26 =>
          __dbName = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.ListImportTasksRequest(
        collectionName = __collectionName,
        limit = __limit,
        dbName = __dbName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ListImportTasksRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.ListImportTasksRequest(
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        limit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(101)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(101)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.ListImportTasksRequest(
    collectionName = "",
    limit = 0L,
    dbName = ""
  )
  implicit class ListImportTasksRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ListImportTasksRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ListImportTasksRequest](_l) {
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
  }
  final val COLLECTION_NAME_FIELD_NUMBER = 1
  final val LIMIT_FIELD_NUMBER = 2
  final val DB_NAME_FIELD_NUMBER = 3
  def of(
    collectionName: _root_.scala.Predef.String,
    limit: _root_.scala.Long,
    dbName: _root_.scala.Predef.String
  ): _root_.io.milvus.grpc.milvus.ListImportTasksRequest = _root_.io.milvus.grpc.milvus.ListImportTasksRequest(
    collectionName,
    limit,
    dbName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ListImportTasksRequest])
}
