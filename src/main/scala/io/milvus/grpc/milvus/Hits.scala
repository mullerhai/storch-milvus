// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class Hits(
    iDs: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    rowData: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty,
    scores: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Hits] {
    private[this] def iDsSerializedSize = {
      if (__iDsSerializedSizeField == 0) __iDsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        iDs.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __iDsSerializedSizeField
    }
    @transient private[this] var __iDsSerializedSizeField: _root_.scala.Int = 0
    private[this] def scoresSerializedSize = {
      4 * scores.size
    }
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (iDs.nonEmpty) {
        val __localsize = iDsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      rowData.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
      }
      if (scores.nonEmpty) {
        val __localsize = scoresSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (iDs.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(iDsSerializedSize)
        iDs.foreach(_output__.writeInt64NoTag)
      };
      rowData.foreach { __v =>
        val __m = __v
        _output__.writeBytes(2, __m)
      };
      if (scores.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(scoresSerializedSize)
        scores.foreach(_output__.writeFloatNoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def clearIDs = copy(iDs = _root_.scala.Seq.empty)
    def addIDs(__vs: _root_.scala.Long *): Hits = addAllIDs(__vs)
    def addAllIDs(__vs: Iterable[_root_.scala.Long]): Hits = copy(iDs = iDs ++ __vs)
    def withIDs(__v: _root_.scala.Seq[_root_.scala.Long]): Hits = copy(iDs = __v)
    def clearRowData = copy(rowData = _root_.scala.Seq.empty)
    def addRowData(__vs: _root_.com.google.protobuf.ByteString *): Hits = addAllRowData(__vs)
    def addAllRowData(__vs: Iterable[_root_.com.google.protobuf.ByteString]): Hits = copy(rowData = rowData ++ __vs)
    def withRowData(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): Hits = copy(rowData = __v)
    def clearScores = copy(scores = _root_.scala.Seq.empty)
    def addScores(__vs: _root_.scala.Float *): Hits = addAllScores(__vs)
    def addAllScores(__vs: Iterable[_root_.scala.Float]): Hits = copy(scores = scores ++ __vs)
    def withScores(__v: _root_.scala.Seq[_root_.scala.Float]): Hits = copy(scores = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => iDs
        case 2 => rowData
        case 3 => scores
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(iDs.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(rowData.iterator.map(_root_.scalapb.descriptors.PByteString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(scores.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.Hits.type = io.milvus.grpc.milvus.Hits
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.Hits])
}

object Hits extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.Hits] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.Hits] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.Hits = {
    val __iDs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __rowData: _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString] = new _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString]
    val __scores: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __iDs += _input__.readInt64()
        case 10 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __iDs += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 18 =>
          __rowData += _input__.readBytes()
        case 29 =>
          __scores += _input__.readFloat()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __scores += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.Hits(
        iDs = __iDs.result(),
        rowData = __rowData.result(),
        scores = __scores.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.Hits] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.Hits(
        iDs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        rowData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty),
        scores = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(56)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(56)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.Hits(
    iDs = _root_.scala.Seq.empty,
    rowData = _root_.scala.Seq.empty,
    scores = _root_.scala.Seq.empty
  )
  implicit class HitsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.Hits]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.Hits](_l) {
    def iDs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.iDs)((c_, f_) => c_.copy(iDs = f_))
    def rowData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.rowData)((c_, f_) => c_.copy(rowData = f_))
    def scores: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.scores)((c_, f_) => c_.copy(scores = f_))
  }
  final val IDS_FIELD_NUMBER = 1
  final val ROW_DATA_FIELD_NUMBER = 2
  final val SCORES_FIELD_NUMBER = 3
  def of(
    iDs: _root_.scala.Seq[_root_.scala.Long],
    rowData: _root_.scala.Seq[_root_.com.google.protobuf.ByteString],
    scores: _root_.scala.Seq[_root_.scala.Float]
  ): _root_.io.milvus.grpc.milvus.Hits = _root_.io.milvus.grpc.milvus.Hits(
    iDs,
    rowData,
    scores
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.Hits])
}
