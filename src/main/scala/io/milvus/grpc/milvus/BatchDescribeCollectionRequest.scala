// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param collectionName
  *   The collection name you want to describe, you can pass collection_name or collectionID
  * @param collectionID
  *   The collection ID you want to describe
  */
@SerialVersionUID(0L)
final case class BatchDescribeCollectionRequest(
    dbName: _root_.scala.Predef.String = "",
    collectionName: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    collectionID: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BatchDescribeCollectionRequest] {
    private[this] def collectionIDSerializedSize = {
      if (__collectionIDSerializedSizeField == 0) __collectionIDSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        collectionID.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __collectionIDSerializedSizeField
    }
    @transient private[this] var __collectionIDSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = dbName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      collectionName.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      if (collectionID.nonEmpty) {
        val __localsize = collectionIDSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = dbName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      collectionName.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      if (collectionID.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(collectionIDSerializedSize)
        collectionID.foreach(_output__.writeInt64NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withDbName(__v: _root_.scala.Predef.String): BatchDescribeCollectionRequest = copy(dbName = __v)
    def clearCollectionName = copy(collectionName = _root_.scala.Seq.empty)
    def addCollectionName(__vs: _root_.scala.Predef.String *): BatchDescribeCollectionRequest = addAllCollectionName(__vs)
    def addAllCollectionName(__vs: Iterable[_root_.scala.Predef.String]): BatchDescribeCollectionRequest = copy(collectionName = collectionName ++ __vs)
    def withCollectionName(__v: _root_.scala.Seq[_root_.scala.Predef.String]): BatchDescribeCollectionRequest = copy(collectionName = __v)
    def clearCollectionID = copy(collectionID = _root_.scala.Seq.empty)
    def addCollectionID(__vs: _root_.scala.Long *): BatchDescribeCollectionRequest = addAllCollectionID(__vs)
    def addAllCollectionID(__vs: Iterable[_root_.scala.Long]): BatchDescribeCollectionRequest = copy(collectionID = collectionID ++ __vs)
    def withCollectionID(__v: _root_.scala.Seq[_root_.scala.Long]): BatchDescribeCollectionRequest = copy(collectionID = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = dbName
          if (__t != "") __t else null
        }
        case 2 => collectionName
        case 3 => collectionID
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(dbName)
        case 2 => _root_.scalapb.descriptors.PRepeated(collectionName.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(collectionID.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.BatchDescribeCollectionRequest.type = io.milvus.grpc.milvus.BatchDescribeCollectionRequest
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.BatchDescribeCollectionRequest])
}

object BatchDescribeCollectionRequest extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.BatchDescribeCollectionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.BatchDescribeCollectionRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.BatchDescribeCollectionRequest = {
    var __dbName: _root_.scala.Predef.String = ""
    val __collectionName: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __collectionID: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __dbName = _input__.readStringRequireUtf8()
        case 18 =>
          __collectionName += _input__.readStringRequireUtf8()
        case 24 =>
          __collectionID += _input__.readInt64()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __collectionID += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.BatchDescribeCollectionRequest(
        dbName = __dbName,
        collectionName = __collectionName.result(),
        collectionID = __collectionID.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.BatchDescribeCollectionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.BatchDescribeCollectionRequest(
        dbName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        collectionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        collectionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.BatchDescribeCollectionRequest(
    dbName = "",
    collectionName = _root_.scala.Seq.empty,
    collectionID = _root_.scala.Seq.empty
  )
  implicit class BatchDescribeCollectionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.BatchDescribeCollectionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.BatchDescribeCollectionRequest](_l) {
    def dbName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dbName)((c_, f_) => c_.copy(dbName = f_))
    def collectionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.collectionName)((c_, f_) => c_.copy(collectionName = f_))
    def collectionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.collectionID)((c_, f_) => c_.copy(collectionID = f_))
  }
  final val DB_NAME_FIELD_NUMBER = 1
  final val COLLECTION_NAME_FIELD_NUMBER = 2
  final val COLLECTIONID_FIELD_NUMBER = 3
  def of(
    dbName: _root_.scala.Predef.String,
    collectionName: _root_.scala.Seq[_root_.scala.Predef.String],
    collectionID: _root_.scala.Seq[_root_.scala.Long]
  ): _root_.io.milvus.grpc.milvus.BatchDescribeCollectionRequest = _root_.io.milvus.grpc.milvus.BatchDescribeCollectionRequest(
    dbName,
    collectionName,
    collectionID
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.BatchDescribeCollectionRequest])
}
