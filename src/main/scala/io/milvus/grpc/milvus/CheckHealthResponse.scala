// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

@SerialVersionUID(0L)
final case class CheckHealthResponse(
    status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None,
    isHealthy: _root_.scala.Boolean = false,
    reasons: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    quotaStates: _root_.scala.Seq[io.milvus.grpc.milvus.QuotaState] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CheckHealthResponse] {
    private[this] def quotaStatesSerializedSize = {
      if (__quotaStatesSerializedSizeField == 0) __quotaStatesSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        quotaStates.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __quotaStatesSerializedSizeField
    }
    @transient private[this] var __quotaStatesSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = isHealthy
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      reasons.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      if (quotaStates.nonEmpty) {
        val __localsize = quotaStatesSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = isHealthy
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      reasons.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      if (quotaStates.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(quotaStatesSerializedSize)
        quotaStates.foreach((_output__.writeEnumNoTag _).compose((_: io.milvus.grpc.milvus.QuotaState).value))
      };
      unknownFields.writeTo(_output__)
    }
    def getStatus: io.milvus.grpc.common.Status = status.getOrElse(io.milvus.grpc.common.Status.defaultInstance)
    def clearStatus: CheckHealthResponse = copy(status = _root_.scala.None)
    def withStatus(__v: io.milvus.grpc.common.Status): CheckHealthResponse = copy(status = Option(__v))
    def withIsHealthy(__v: _root_.scala.Boolean): CheckHealthResponse = copy(isHealthy = __v)
    def clearReasons = copy(reasons = _root_.scala.Seq.empty)
    def addReasons(__vs: _root_.scala.Predef.String *): CheckHealthResponse = addAllReasons(__vs)
    def addAllReasons(__vs: Iterable[_root_.scala.Predef.String]): CheckHealthResponse = copy(reasons = reasons ++ __vs)
    def withReasons(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CheckHealthResponse = copy(reasons = __v)
    def clearQuotaStates = copy(quotaStates = _root_.scala.Seq.empty)
    def addQuotaStates(__vs: io.milvus.grpc.milvus.QuotaState *): CheckHealthResponse = addAllQuotaStates(__vs)
    def addAllQuotaStates(__vs: Iterable[io.milvus.grpc.milvus.QuotaState]): CheckHealthResponse = copy(quotaStates = quotaStates ++ __vs)
    def withQuotaStates(__v: _root_.scala.Seq[io.milvus.grpc.milvus.QuotaState]): CheckHealthResponse = copy(quotaStates = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => status.orNull
        case 2 => {
          val __t = isHealthy
          if (__t != false) __t else null
        }
        case 3 => reasons
        case 4 => quotaStates.iterator.map(_.javaValueDescriptor).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PBoolean(isHealthy)
        case 3 => _root_.scalapb.descriptors.PRepeated(reasons.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(quotaStates.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.CheckHealthResponse.type = io.milvus.grpc.milvus.CheckHealthResponse
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.CheckHealthResponse])
}

object CheckHealthResponse extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.CheckHealthResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.CheckHealthResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.CheckHealthResponse = {
    var __status: _root_.scala.Option[io.milvus.grpc.common.Status] = _root_.scala.None
    var __isHealthy: _root_.scala.Boolean = false
    val __reasons: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __quotaStates: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.QuotaState] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.milvus.QuotaState]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __status = _root_.scala.Option(__status.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __isHealthy = _input__.readBool()
        case 26 =>
          __reasons += _input__.readStringRequireUtf8()
        case 32 =>
          __quotaStates += io.milvus.grpc.milvus.QuotaState.fromValue(_input__.readEnum())
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __quotaStates += io.milvus.grpc.milvus.QuotaState.fromValue(_input__.readEnum())
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.CheckHealthResponse(
        status = __status,
        isHealthy = __isHealthy,
        reasons = __reasons.result(),
        quotaStates = __quotaStates.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.CheckHealthResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.CheckHealthResponse(
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.Status]]),
        isHealthy = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        reasons = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        quotaStates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => io.milvus.grpc.milvus.QuotaState.fromValue(__e.number)).toSeq
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(151)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(151)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.milvus.grpc.common.Status
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => io.milvus.grpc.milvus.QuotaState
    }
  }
  lazy val defaultInstance = io.milvus.grpc.milvus.CheckHealthResponse(
    status = _root_.scala.None,
    isHealthy = false,
    reasons = _root_.scala.Seq.empty,
    quotaStates = _root_.scala.Seq.empty
  )
  implicit class CheckHealthResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.CheckHealthResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.CheckHealthResponse](_l) {
    def status: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = _root_.scala.Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def isHealthy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isHealthy)((c_, f_) => c_.copy(isHealthy = f_))
    def reasons: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.reasons)((c_, f_) => c_.copy(reasons = f_))
    def quotaStates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.milvus.QuotaState]] = field(_.quotaStates)((c_, f_) => c_.copy(quotaStates = f_))
  }
  final val STATUS_FIELD_NUMBER = 1
  final val ISHEALTHY_FIELD_NUMBER = 2
  final val REASONS_FIELD_NUMBER = 3
  final val QUOTA_STATES_FIELD_NUMBER = 4
  def of(
    status: _root_.scala.Option[io.milvus.grpc.common.Status],
    isHealthy: _root_.scala.Boolean,
    reasons: _root_.scala.Seq[_root_.scala.Predef.String],
    quotaStates: _root_.scala.Seq[io.milvus.grpc.milvus.QuotaState]
  ): _root_.io.milvus.grpc.milvus.CheckHealthResponse = _root_.io.milvus.grpc.milvus.CheckHealthResponse(
    status,
    isHealthy,
    reasons,
    quotaStates
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.CheckHealthResponse])
}
