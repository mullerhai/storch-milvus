// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.milvus

/** @param numLoadedReplica
  *   collection name -&gt; loaded replica num
  * @param numOutgoingNode
  *   collection name -&gt; accessed other rg's node num
  * @param numIncomingNode
  *   collection name -&gt; be accessed node num by other rg
  * @param config
  *   resource group configuration.
  * @param nodes
  *   query node belong to this resource group now.
  */
@SerialVersionUID(0L)
final case class ResourceGroup(
    name: _root_.scala.Predef.String = "",
    capacity: _root_.scala.Int = 0,
    numAvailableNode: _root_.scala.Int = 0,
    numLoadedReplica: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    numOutgoingNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    numIncomingNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    config: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupConfig] = _root_.scala.None,
    nodes: _root_.scala.Seq[io.milvus.grpc.common.NodeInfo] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ResourceGroup] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = capacity
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = numAvailableNode
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      numLoadedReplica.foreach { __item =>
        val __value = io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      numOutgoingNode.foreach { __item =>
        val __value = io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      numIncomingNode.foreach { __item =>
        val __value = io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (config.isDefined) {
        val __value = config.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      nodes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = capacity
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = numAvailableNode
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      numLoadedReplica.foreach { __v =>
        val __m = io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      numOutgoingNode.foreach { __v =>
        val __m = io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toBase(__v)
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      numIncomingNode.foreach { __v =>
        val __m = io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      nodes.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): ResourceGroup = copy(name = __v)
    def withCapacity(__v: _root_.scala.Int): ResourceGroup = copy(capacity = __v)
    def withNumAvailableNode(__v: _root_.scala.Int): ResourceGroup = copy(numAvailableNode = __v)
    def clearNumLoadedReplica = copy(numLoadedReplica = _root_.scala.collection.immutable.Map.empty)
    def addNumLoadedReplica(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): ResourceGroup = addAllNumLoadedReplica(__vs)
    def addAllNumLoadedReplica(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): ResourceGroup = copy(numLoadedReplica = numLoadedReplica ++ __vs)
    def withNumLoadedReplica(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): ResourceGroup = copy(numLoadedReplica = __v)
    def clearNumOutgoingNode = copy(numOutgoingNode = _root_.scala.collection.immutable.Map.empty)
    def addNumOutgoingNode(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): ResourceGroup = addAllNumOutgoingNode(__vs)
    def addAllNumOutgoingNode(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): ResourceGroup = copy(numOutgoingNode = numOutgoingNode ++ __vs)
    def withNumOutgoingNode(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): ResourceGroup = copy(numOutgoingNode = __v)
    def clearNumIncomingNode = copy(numIncomingNode = _root_.scala.collection.immutable.Map.empty)
    def addNumIncomingNode(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): ResourceGroup = addAllNumIncomingNode(__vs)
    def addAllNumIncomingNode(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): ResourceGroup = copy(numIncomingNode = numIncomingNode ++ __vs)
    def withNumIncomingNode(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): ResourceGroup = copy(numIncomingNode = __v)
    def getConfig: io.milvus.grpc.rg.ResourceGroupConfig = config.getOrElse(io.milvus.grpc.rg.ResourceGroupConfig.defaultInstance)
    def clearConfig: ResourceGroup = copy(config = _root_.scala.None)
    def withConfig(__v: io.milvus.grpc.rg.ResourceGroupConfig): ResourceGroup = copy(config = Option(__v))
    def clearNodes = copy(nodes = _root_.scala.Seq.empty)
    def addNodes(__vs: io.milvus.grpc.common.NodeInfo *): ResourceGroup = addAllNodes(__vs)
    def addAllNodes(__vs: Iterable[io.milvus.grpc.common.NodeInfo]): ResourceGroup = copy(nodes = nodes ++ __vs)
    def withNodes(__v: _root_.scala.Seq[io.milvus.grpc.common.NodeInfo]): ResourceGroup = copy(nodes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = capacity
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = numAvailableNode
          if (__t != 0) __t else null
        }
        case 4 => numLoadedReplica.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toBase(_)).toSeq
        case 5 => numOutgoingNode.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toBase(_)).toSeq
        case 6 => numIncomingNode.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toBase(_)).toSeq
        case 7 => config.orNull
        case 8 => nodes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PInt(capacity)
        case 3 => _root_.scalapb.descriptors.PInt(numAvailableNode)
        case 4 => _root_.scalapb.descriptors.PRepeated(numLoadedReplica.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toBase(_).toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(numOutgoingNode.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toBase(_).toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(numIncomingNode.iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toBase(_).toPMessage).toVector)
        case 7 => config.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PRepeated(nodes.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.milvus.ResourceGroup.type = io.milvus.grpc.milvus.ResourceGroup
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ResourceGroup])
}

object ResourceGroup extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ResourceGroup = {
    var __name: _root_.scala.Predef.String = ""
    var __capacity: _root_.scala.Int = 0
    var __numAvailableNode: _root_.scala.Int = 0
    val __numLoadedReplica: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    val __numOutgoingNode: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    val __numIncomingNode: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    var __config: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupConfig] = _root_.scala.None
    val __nodes: _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.NodeInfo] = new _root_.scala.collection.immutable.VectorBuilder[io.milvus.grpc.common.NodeInfo]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 16 =>
          __capacity = _input__.readInt32()
        case 24 =>
          __numAvailableNode = _input__.readInt32()
        case 34 =>
          __numLoadedReplica += io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry](_input__))
        case 42 =>
          __numOutgoingNode += io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry](_input__))
        case 50 =>
          __numIncomingNode += io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry](_input__))
        case 58 =>
          __config = _root_.scala.Option(__config.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.rg.ResourceGroupConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __nodes += _root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.NodeInfo](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.milvus.ResourceGroup(
        name = __name,
        capacity = __capacity,
        numAvailableNode = __numAvailableNode,
        numLoadedReplica = __numLoadedReplica.result(),
        numOutgoingNode = __numOutgoingNode.result(),
        numIncomingNode = __numIncomingNode.result(),
        config = __config,
        nodes = __nodes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ResourceGroup] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.milvus.ResourceGroup(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        capacity = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        numAvailableNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        numLoadedReplica = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numLoadedReplica.toCustom(_)).toMap,
        numOutgoingNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numOutgoingNode.toCustom(_)).toMap,
        numIncomingNode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.milvus.ResourceGroup._typemapper_numIncomingNode.toCustom(_)).toMap,
        config = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.rg.ResourceGroupConfig]]),
        nodes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.NodeInfo]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.javaDescriptor.getMessageTypes().get(161)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.MilvusProto.scalaDescriptor.messages(161)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry
      case 5 => __out = io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry
      case 6 => __out = io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry
      case 7 => __out = io.milvus.grpc.rg.ResourceGroupConfig
      case 8 => __out = io.milvus.grpc.common.NodeInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry,
      _root_.io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry,
      _root_.io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.milvus.ResourceGroup(
    name = "",
    capacity = 0,
    numAvailableNode = 0,
    numLoadedReplica = _root_.scala.collection.immutable.Map.empty,
    numOutgoingNode = _root_.scala.collection.immutable.Map.empty,
    numIncomingNode = _root_.scala.collection.immutable.Map.empty,
    config = _root_.scala.None,
    nodes = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class NumLoadedReplicaEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NumLoadedReplicaEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): NumLoadedReplicaEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): NumLoadedReplicaEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry.type = io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ResourceGroup.NumLoadedReplicaEntry])
  }
  
  object NumLoadedReplicaEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry(
      key = "",
      value = 0
    )
    implicit class NumLoadedReplicaEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry = _root_.io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ResourceGroup.NumLoadedReplicaEntry])
  }
  
  @SerialVersionUID(0L)
  final case class NumOutgoingNodeEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NumOutgoingNodeEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): NumOutgoingNodeEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): NumOutgoingNodeEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry.type = io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ResourceGroup.NumOutgoingNodeEntry])
  }
  
  object NumOutgoingNodeEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry(
      key = "",
      value = 0
    )
    implicit class NumOutgoingNodeEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry = _root_.io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ResourceGroup.NumOutgoingNodeEntry])
  }
  
  @SerialVersionUID(0L)
  final case class NumIncomingNodeEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NumIncomingNodeEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): NumIncomingNodeEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): NumIncomingNodeEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry.type = io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.milvus.ResourceGroup.NumIncomingNodeEntry])
  }
  
  object NumIncomingNodeEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.milvus.ResourceGroup.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry(
      key = "",
      value = 0
    )
    implicit class NumIncomingNodeEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry = _root_.io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ResourceGroup.NumIncomingNodeEntry])
  }
  
  implicit class ResourceGroupLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.milvus.ResourceGroup]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.milvus.ResourceGroup](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def capacity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.capacity)((c_, f_) => c_.copy(capacity = f_))
    def numAvailableNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.numAvailableNode)((c_, f_) => c_.copy(numAvailableNode = f_))
    def numLoadedReplica: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.numLoadedReplica)((c_, f_) => c_.copy(numLoadedReplica = f_))
    def numOutgoingNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.numOutgoingNode)((c_, f_) => c_.copy(numOutgoingNode = f_))
    def numIncomingNode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.numIncomingNode)((c_, f_) => c_.copy(numIncomingNode = f_))
    def config: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.rg.ResourceGroupConfig] = field(_.getConfig)((c_, f_) => c_.copy(config = _root_.scala.Option(f_)))
    def optionalConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupConfig]] = field(_.config)((c_, f_) => c_.copy(config = f_))
    def nodes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.milvus.grpc.common.NodeInfo]] = field(_.nodes)((c_, f_) => c_.copy(nodes = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val CAPACITY_FIELD_NUMBER = 2
  final val NUM_AVAILABLE_NODE_FIELD_NUMBER = 3
  final val NUM_LOADED_REPLICA_FIELD_NUMBER = 4
  final val NUM_OUTGOING_NODE_FIELD_NUMBER = 5
  final val NUM_INCOMING_NODE_FIELD_NUMBER = 6
  final val CONFIG_FIELD_NUMBER = 7
  final val NODES_FIELD_NUMBER = 8
  @transient
  private[milvus] val _typemapper_numLoadedReplica: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumLoadedReplicaEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  @transient
  private[milvus] val _typemapper_numOutgoingNode: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumOutgoingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  @transient
  private[milvus] val _typemapper_numIncomingNode: _root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.milvus.ResourceGroup.NumIncomingNodeEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  def of(
    name: _root_.scala.Predef.String,
    capacity: _root_.scala.Int,
    numAvailableNode: _root_.scala.Int,
    numLoadedReplica: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int],
    numOutgoingNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int],
    numIncomingNode: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int],
    config: _root_.scala.Option[io.milvus.grpc.rg.ResourceGroupConfig],
    nodes: _root_.scala.Seq[io.milvus.grpc.common.NodeInfo]
  ): _root_.io.milvus.grpc.milvus.ResourceGroup = _root_.io.milvus.grpc.milvus.ResourceGroup(
    name,
    capacity,
    numAvailableNode,
    numLoadedReplica,
    numOutgoingNode,
    numIncomingNode,
    config,
    nodes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.milvus.ResourceGroup])
}
