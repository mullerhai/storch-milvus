// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.common

/** @param sdkType
  *   sdk_type can be `python`, `golang`, `nodejs` and etc. It's not proper to make `sdk_type` an
  *   enumerate type, since we cannot always update the enum value everytime when newly sdk is supported.
  * @param reserved
  *   reserved for newly-added feature if necessary.
  */
@SerialVersionUID(0L)
final case class ClientInfo(
    sdkType: _root_.scala.Predef.String = "",
    sdkVersion: _root_.scala.Predef.String = "",
    localTime: _root_.scala.Predef.String = "",
    user: _root_.scala.Predef.String = "",
    host: _root_.scala.Predef.String = "",
    reserved: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ClientInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sdkType
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = sdkVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = localTime
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = user
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = host
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      reserved.foreach { __item =>
        val __value = io.milvus.grpc.common.ClientInfo._typemapper_reserved.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sdkType
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = sdkVersion
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = localTime
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = user
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = host
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      reserved.foreach { __v =>
        val __m = io.milvus.grpc.common.ClientInfo._typemapper_reserved.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withSdkType(__v: _root_.scala.Predef.String): ClientInfo = copy(sdkType = __v)
    def withSdkVersion(__v: _root_.scala.Predef.String): ClientInfo = copy(sdkVersion = __v)
    def withLocalTime(__v: _root_.scala.Predef.String): ClientInfo = copy(localTime = __v)
    def withUser(__v: _root_.scala.Predef.String): ClientInfo = copy(user = __v)
    def withHost(__v: _root_.scala.Predef.String): ClientInfo = copy(host = __v)
    def clearReserved = copy(reserved = _root_.scala.collection.immutable.Map.empty)
    def addReserved(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): ClientInfo = addAllReserved(__vs)
    def addAllReserved(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): ClientInfo = copy(reserved = reserved ++ __vs)
    def withReserved(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): ClientInfo = copy(reserved = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sdkType
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = sdkVersion
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = localTime
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = user
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = host
          if (__t != "") __t else null
        }
        case 6 => reserved.iterator.map(io.milvus.grpc.common.ClientInfo._typemapper_reserved.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sdkType)
        case 2 => _root_.scalapb.descriptors.PString(sdkVersion)
        case 3 => _root_.scalapb.descriptors.PString(localTime)
        case 4 => _root_.scalapb.descriptors.PString(user)
        case 5 => _root_.scalapb.descriptors.PString(host)
        case 6 => _root_.scalapb.descriptors.PRepeated(reserved.iterator.map(io.milvus.grpc.common.ClientInfo._typemapper_reserved.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.common.ClientInfo.type = io.milvus.grpc.common.ClientInfo
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.common.ClientInfo])
}

object ClientInfo extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.ClientInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.ClientInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.common.ClientInfo = {
    var __sdkType: _root_.scala.Predef.String = ""
    var __sdkVersion: _root_.scala.Predef.String = ""
    var __localTime: _root_.scala.Predef.String = ""
    var __user: _root_.scala.Predef.String = ""
    var __host: _root_.scala.Predef.String = ""
    val __reserved: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sdkType = _input__.readStringRequireUtf8()
        case 18 =>
          __sdkVersion = _input__.readStringRequireUtf8()
        case 26 =>
          __localTime = _input__.readStringRequireUtf8()
        case 34 =>
          __user = _input__.readStringRequireUtf8()
        case 42 =>
          __host = _input__.readStringRequireUtf8()
        case 50 =>
          __reserved += io.milvus.grpc.common.ClientInfo._typemapper_reserved.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.ClientInfo.ReservedEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.common.ClientInfo(
        sdkType = __sdkType,
        sdkVersion = __sdkVersion,
        localTime = __localTime,
        user = __user,
        host = __host,
        reserved = __reserved.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.common.ClientInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.common.ClientInfo(
        sdkType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        sdkVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        localTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        user = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        host = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        reserved = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.ClientInfo.ReservedEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.common.ClientInfo._typemapper_reserved.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.common.CommonProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.common.CommonProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = io.milvus.grpc.common.ClientInfo.ReservedEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.common.ClientInfo.ReservedEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.common.ClientInfo(
    sdkType = "",
    sdkVersion = "",
    localTime = "",
    user = "",
    host = "",
    reserved = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class ReservedEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ReservedEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): ReservedEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): ReservedEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.common.ClientInfo.ReservedEntry.type = io.milvus.grpc.common.ClientInfo.ReservedEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.common.ClientInfo.ReservedEntry])
  }
  
  object ReservedEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.ClientInfo.ReservedEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.ClientInfo.ReservedEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.common.ClientInfo.ReservedEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.common.ClientInfo.ReservedEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.common.ClientInfo.ReservedEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.common.ClientInfo.ReservedEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.common.ClientInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.common.ClientInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.common.ClientInfo.ReservedEntry(
      key = "",
      value = ""
    )
    implicit class ReservedEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.ClientInfo.ReservedEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.common.ClientInfo.ReservedEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.common.ClientInfo.ReservedEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.common.ClientInfo.ReservedEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.common.ClientInfo.ReservedEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.io.milvus.grpc.common.ClientInfo.ReservedEntry = _root_.io.milvus.grpc.common.ClientInfo.ReservedEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.common.ClientInfo.ReservedEntry])
  }
  
  implicit class ClientInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.ClientInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.common.ClientInfo](_l) {
    def sdkType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sdkType)((c_, f_) => c_.copy(sdkType = f_))
    def sdkVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sdkVersion)((c_, f_) => c_.copy(sdkVersion = f_))
    def localTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.localTime)((c_, f_) => c_.copy(localTime = f_))
    def user: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.user)((c_, f_) => c_.copy(user = f_))
    def host: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.host)((c_, f_) => c_.copy(host = f_))
    def reserved: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.reserved)((c_, f_) => c_.copy(reserved = f_))
  }
  final val SDK_TYPE_FIELD_NUMBER = 1
  final val SDK_VERSION_FIELD_NUMBER = 2
  final val LOCAL_TIME_FIELD_NUMBER = 3
  final val USER_FIELD_NUMBER = 4
  final val HOST_FIELD_NUMBER = 5
  final val RESERVED_FIELD_NUMBER = 6
  @transient
  private[common] val _typemapper_reserved: _root_.scalapb.TypeMapper[io.milvus.grpc.common.ClientInfo.ReservedEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.common.ClientInfo.ReservedEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    sdkType: _root_.scala.Predef.String,
    sdkVersion: _root_.scala.Predef.String,
    localTime: _root_.scala.Predef.String,
    user: _root_.scala.Predef.String,
    host: _root_.scala.Predef.String,
    reserved: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]
  ): _root_.io.milvus.grpc.common.ClientInfo = _root_.io.milvus.grpc.common.ClientInfo(
    sdkType,
    sdkVersion,
    localTime,
    user,
    host,
    reserved
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.common.ClientInfo])
}
