// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.common

@scala.deprecated(message="Marked as deprecated in proto file", "")
/** Deprecated
  */
@scala.deprecated(message="Marked as deprecated in proto file", "")
sealed abstract class ErrorCode(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = io.milvus.grpc.common.ErrorCode
  type RecognizedType = io.milvus.grpc.common.ErrorCode.Recognized
  def isSuccess: _root_.scala.Boolean = false
  def isUnexpectedError: _root_.scala.Boolean = false
  def isConnectFailed: _root_.scala.Boolean = false
  def isPermissionDenied: _root_.scala.Boolean = false
  def isCollectionNotExists: _root_.scala.Boolean = false
  def isIllegalArgument: _root_.scala.Boolean = false
  def isIllegalDimension: _root_.scala.Boolean = false
  def isIllegalIndexType: _root_.scala.Boolean = false
  def isIllegalCollectionName: _root_.scala.Boolean = false
  def isIllegalTopk: _root_.scala.Boolean = false
  def isIllegalRowRecord: _root_.scala.Boolean = false
  def isIllegalVectorId: _root_.scala.Boolean = false
  def isIllegalSearchResult: _root_.scala.Boolean = false
  def isFileNotFound: _root_.scala.Boolean = false
  def isMetaFailed: _root_.scala.Boolean = false
  def isCacheFailed: _root_.scala.Boolean = false
  def isCannotCreateFolder: _root_.scala.Boolean = false
  def isCannotCreateFile: _root_.scala.Boolean = false
  def isCannotDeleteFolder: _root_.scala.Boolean = false
  def isCannotDeleteFile: _root_.scala.Boolean = false
  def isBuildIndexError: _root_.scala.Boolean = false
  def isIllegalNlist: _root_.scala.Boolean = false
  def isIllegalMetricType: _root_.scala.Boolean = false
  def isOutOfMemory: _root_.scala.Boolean = false
  def isIndexNotExist: _root_.scala.Boolean = false
  def isEmptyCollection: _root_.scala.Boolean = false
  def isUpdateImportTaskFailure: _root_.scala.Boolean = false
  def isCollectionNameNotFound: _root_.scala.Boolean = false
  def isCreateCredentialFailure: _root_.scala.Boolean = false
  def isUpdateCredentialFailure: _root_.scala.Boolean = false
  def isDeleteCredentialFailure: _root_.scala.Boolean = false
  def isGetCredentialFailure: _root_.scala.Boolean = false
  def isListCredUsersFailure: _root_.scala.Boolean = false
  def isGetUserFailure: _root_.scala.Boolean = false
  def isCreateRoleFailure: _root_.scala.Boolean = false
  def isDropRoleFailure: _root_.scala.Boolean = false
  def isOperateUserRoleFailure: _root_.scala.Boolean = false
  def isSelectRoleFailure: _root_.scala.Boolean = false
  def isSelectUserFailure: _root_.scala.Boolean = false
  def isSelectResourceFailure: _root_.scala.Boolean = false
  def isOperatePrivilegeFailure: _root_.scala.Boolean = false
  def isSelectGrantFailure: _root_.scala.Boolean = false
  def isRefreshPolicyInfoCacheFailure: _root_.scala.Boolean = false
  def isListPolicyFailure: _root_.scala.Boolean = false
  def isNotShardLeader: _root_.scala.Boolean = false
  def isNoReplicaAvailable: _root_.scala.Boolean = false
  def isSegmentNotFound: _root_.scala.Boolean = false
  def isForceDeny: _root_.scala.Boolean = false
  def isRateLimit: _root_.scala.Boolean = false
  def isNodeIdnotMatch: _root_.scala.Boolean = false
  def isUpsertAutoIdtrue: _root_.scala.Boolean = false
  def isInsufficientMemoryToLoad: _root_.scala.Boolean = false
  def isMemoryQuotaExhausted: _root_.scala.Boolean = false
  def isDiskQuotaExhausted: _root_.scala.Boolean = false
  def isTimeTickLongDelay: _root_.scala.Boolean = false
  def isNotReadyServe: _root_.scala.Boolean = false
  def isNotReadyCoordActivating: _root_.scala.Boolean = false
  def isCreatePrivilegeGroupFailure: _root_.scala.Boolean = false
  def isDropPrivilegeGroupFailure: _root_.scala.Boolean = false
  def isListPrivilegeGroupsFailure: _root_.scala.Boolean = false
  def isOperatePrivilegeGroupFailure: _root_.scala.Boolean = false
  def isSchemaMismatch: _root_.scala.Boolean = false
  def isDataCoordNa: _root_.scala.Boolean = false
  def isDdrequestRace: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[ErrorCode] = io.milvus.grpc.common.ErrorCode
  final def asRecognized: _root_.scala.Option[io.milvus.grpc.common.ErrorCode.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.milvus.grpc.common.ErrorCode.Recognized])
}

@scala.deprecated(message="Marked as deprecated in proto file", "")
object ErrorCode extends _root_.scalapb.GeneratedEnumCompanion[ErrorCode] {
  @scala.deprecated(message="Marked as deprecated in proto file", "")
  sealed trait Recognized extends ErrorCode
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ErrorCode] = this
  
  @SerialVersionUID(0L)
  case object Success extends ErrorCode(0) with ErrorCode.Recognized {
    val index = 0
    val name = "Success"
    override def isSuccess: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UnexpectedError extends ErrorCode(1) with ErrorCode.Recognized {
    val index = 1
    val name = "UnexpectedError"
    override def isUnexpectedError: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ConnectFailed extends ErrorCode(2) with ErrorCode.Recognized {
    val index = 2
    val name = "ConnectFailed"
    override def isConnectFailed: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PermissionDenied extends ErrorCode(3) with ErrorCode.Recognized {
    val index = 3
    val name = "PermissionDenied"
    override def isPermissionDenied: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CollectionNotExists extends ErrorCode(4) with ErrorCode.Recognized {
    val index = 4
    val name = "CollectionNotExists"
    override def isCollectionNotExists: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalArgument extends ErrorCode(5) with ErrorCode.Recognized {
    val index = 5
    val name = "IllegalArgument"
    override def isIllegalArgument: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalDimension extends ErrorCode(7) with ErrorCode.Recognized {
    val index = 6
    val name = "IllegalDimension"
    override def isIllegalDimension: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalIndexType extends ErrorCode(8) with ErrorCode.Recognized {
    val index = 7
    val name = "IllegalIndexType"
    override def isIllegalIndexType: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalCollectionName extends ErrorCode(9) with ErrorCode.Recognized {
    val index = 8
    val name = "IllegalCollectionName"
    override def isIllegalCollectionName: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalTOPK extends ErrorCode(10) with ErrorCode.Recognized {
    val index = 9
    val name = "IllegalTOPK"
    override def isIllegalTopk: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalRowRecord extends ErrorCode(11) with ErrorCode.Recognized {
    val index = 10
    val name = "IllegalRowRecord"
    override def isIllegalRowRecord: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalVectorID extends ErrorCode(12) with ErrorCode.Recognized {
    val index = 11
    val name = "IllegalVectorID"
    override def isIllegalVectorId: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalSearchResult extends ErrorCode(13) with ErrorCode.Recognized {
    val index = 12
    val name = "IllegalSearchResult"
    override def isIllegalSearchResult: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FileNotFound extends ErrorCode(14) with ErrorCode.Recognized {
    val index = 13
    val name = "FileNotFound"
    override def isFileNotFound: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MetaFailed extends ErrorCode(15) with ErrorCode.Recognized {
    val index = 14
    val name = "MetaFailed"
    override def isMetaFailed: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CacheFailed extends ErrorCode(16) with ErrorCode.Recognized {
    val index = 15
    val name = "CacheFailed"
    override def isCacheFailed: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CannotCreateFolder extends ErrorCode(17) with ErrorCode.Recognized {
    val index = 16
    val name = "CannotCreateFolder"
    override def isCannotCreateFolder: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CannotCreateFile extends ErrorCode(18) with ErrorCode.Recognized {
    val index = 17
    val name = "CannotCreateFile"
    override def isCannotCreateFile: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CannotDeleteFolder extends ErrorCode(19) with ErrorCode.Recognized {
    val index = 18
    val name = "CannotDeleteFolder"
    override def isCannotDeleteFolder: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CannotDeleteFile extends ErrorCode(20) with ErrorCode.Recognized {
    val index = 19
    val name = "CannotDeleteFile"
    override def isCannotDeleteFile: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BuildIndexError extends ErrorCode(21) with ErrorCode.Recognized {
    val index = 20
    val name = "BuildIndexError"
    override def isBuildIndexError: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalNLIST extends ErrorCode(22) with ErrorCode.Recognized {
    val index = 21
    val name = "IllegalNLIST"
    override def isIllegalNlist: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IllegalMetricType extends ErrorCode(23) with ErrorCode.Recognized {
    val index = 22
    val name = "IllegalMetricType"
    override def isIllegalMetricType: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OutOfMemory extends ErrorCode(24) with ErrorCode.Recognized {
    val index = 23
    val name = "OutOfMemory"
    override def isOutOfMemory: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IndexNotExist extends ErrorCode(25) with ErrorCode.Recognized {
    val index = 24
    val name = "IndexNotExist"
    override def isIndexNotExist: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object EmptyCollection extends ErrorCode(26) with ErrorCode.Recognized {
    val index = 25
    val name = "EmptyCollection"
    override def isEmptyCollection: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UpdateImportTaskFailure extends ErrorCode(27) with ErrorCode.Recognized {
    val index = 26
    val name = "UpdateImportTaskFailure"
    override def isUpdateImportTaskFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CollectionNameNotFound extends ErrorCode(28) with ErrorCode.Recognized {
    val index = 27
    val name = "CollectionNameNotFound"
    override def isCollectionNameNotFound: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CreateCredentialFailure extends ErrorCode(29) with ErrorCode.Recognized {
    val index = 28
    val name = "CreateCredentialFailure"
    override def isCreateCredentialFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UpdateCredentialFailure extends ErrorCode(30) with ErrorCode.Recognized {
    val index = 29
    val name = "UpdateCredentialFailure"
    override def isUpdateCredentialFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DeleteCredentialFailure extends ErrorCode(31) with ErrorCode.Recognized {
    val index = 30
    val name = "DeleteCredentialFailure"
    override def isDeleteCredentialFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object GetCredentialFailure extends ErrorCode(32) with ErrorCode.Recognized {
    val index = 31
    val name = "GetCredentialFailure"
    override def isGetCredentialFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ListCredUsersFailure extends ErrorCode(33) with ErrorCode.Recognized {
    val index = 32
    val name = "ListCredUsersFailure"
    override def isListCredUsersFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object GetUserFailure extends ErrorCode(34) with ErrorCode.Recognized {
    val index = 33
    val name = "GetUserFailure"
    override def isGetUserFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CreateRoleFailure extends ErrorCode(35) with ErrorCode.Recognized {
    val index = 34
    val name = "CreateRoleFailure"
    override def isCreateRoleFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DropRoleFailure extends ErrorCode(36) with ErrorCode.Recognized {
    val index = 35
    val name = "DropRoleFailure"
    override def isDropRoleFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OperateUserRoleFailure extends ErrorCode(37) with ErrorCode.Recognized {
    val index = 36
    val name = "OperateUserRoleFailure"
    override def isOperateUserRoleFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SelectRoleFailure extends ErrorCode(38) with ErrorCode.Recognized {
    val index = 37
    val name = "SelectRoleFailure"
    override def isSelectRoleFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SelectUserFailure extends ErrorCode(39) with ErrorCode.Recognized {
    val index = 38
    val name = "SelectUserFailure"
    override def isSelectUserFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SelectResourceFailure extends ErrorCode(40) with ErrorCode.Recognized {
    val index = 39
    val name = "SelectResourceFailure"
    override def isSelectResourceFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OperatePrivilegeFailure extends ErrorCode(41) with ErrorCode.Recognized {
    val index = 40
    val name = "OperatePrivilegeFailure"
    override def isOperatePrivilegeFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SelectGrantFailure extends ErrorCode(42) with ErrorCode.Recognized {
    val index = 41
    val name = "SelectGrantFailure"
    override def isSelectGrantFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RefreshPolicyInfoCacheFailure extends ErrorCode(43) with ErrorCode.Recognized {
    val index = 42
    val name = "RefreshPolicyInfoCacheFailure"
    override def isRefreshPolicyInfoCacheFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ListPolicyFailure extends ErrorCode(44) with ErrorCode.Recognized {
    val index = 43
    val name = "ListPolicyFailure"
    override def isListPolicyFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NotShardLeader extends ErrorCode(45) with ErrorCode.Recognized {
    val index = 44
    val name = "NotShardLeader"
    override def isNotShardLeader: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NoReplicaAvailable extends ErrorCode(46) with ErrorCode.Recognized {
    val index = 45
    val name = "NoReplicaAvailable"
    override def isNoReplicaAvailable: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SegmentNotFound extends ErrorCode(47) with ErrorCode.Recognized {
    val index = 46
    val name = "SegmentNotFound"
    override def isSegmentNotFound: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ForceDeny extends ErrorCode(48) with ErrorCode.Recognized {
    val index = 47
    val name = "ForceDeny"
    override def isForceDeny: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RateLimit extends ErrorCode(49) with ErrorCode.Recognized {
    val index = 48
    val name = "RateLimit"
    override def isRateLimit: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NodeIDNotMatch extends ErrorCode(50) with ErrorCode.Recognized {
    val index = 49
    val name = "NodeIDNotMatch"
    override def isNodeIdnotMatch: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UpsertAutoIDTrue extends ErrorCode(51) with ErrorCode.Recognized {
    val index = 50
    val name = "UpsertAutoIDTrue"
    override def isUpsertAutoIdtrue: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object InsufficientMemoryToLoad extends ErrorCode(52) with ErrorCode.Recognized {
    val index = 51
    val name = "InsufficientMemoryToLoad"
    override def isInsufficientMemoryToLoad: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MemoryQuotaExhausted extends ErrorCode(53) with ErrorCode.Recognized {
    val index = 52
    val name = "MemoryQuotaExhausted"
    override def isMemoryQuotaExhausted: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DiskQuotaExhausted extends ErrorCode(54) with ErrorCode.Recognized {
    val index = 53
    val name = "DiskQuotaExhausted"
    override def isDiskQuotaExhausted: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TimeTickLongDelay extends ErrorCode(55) with ErrorCode.Recognized {
    val index = 54
    val name = "TimeTickLongDelay"
    override def isTimeTickLongDelay: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NotReadyServe extends ErrorCode(56) with ErrorCode.Recognized {
    val index = 55
    val name = "NotReadyServe"
    override def isNotReadyServe: _root_.scala.Boolean = true
  }
  
  /** Coord is switching from standby mode to active mode
    */
  @SerialVersionUID(0L)
  case object NotReadyCoordActivating extends ErrorCode(57) with ErrorCode.Recognized {
    val index = 56
    val name = "NotReadyCoordActivating"
    override def isNotReadyCoordActivating: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CreatePrivilegeGroupFailure extends ErrorCode(58) with ErrorCode.Recognized {
    val index = 57
    val name = "CreatePrivilegeGroupFailure"
    override def isCreatePrivilegeGroupFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DropPrivilegeGroupFailure extends ErrorCode(59) with ErrorCode.Recognized {
    val index = 58
    val name = "DropPrivilegeGroupFailure"
    override def isDropPrivilegeGroupFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ListPrivilegeGroupsFailure extends ErrorCode(60) with ErrorCode.Recognized {
    val index = 59
    val name = "ListPrivilegeGroupsFailure"
    override def isListPrivilegeGroupsFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OperatePrivilegeGroupFailure extends ErrorCode(61) with ErrorCode.Recognized {
    val index = 60
    val name = "OperatePrivilegeGroupFailure"
    override def isOperatePrivilegeGroupFailure: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SchemaMismatch extends ErrorCode(62) with ErrorCode.Recognized {
    val index = 61
    val name = "SchemaMismatch"
    override def isSchemaMismatch: _root_.scala.Boolean = true
  }
  
  /** Service availability.
    * NA: Not Available.
    */
  @SerialVersionUID(0L)
  case object DataCoordNA extends ErrorCode(100) with ErrorCode.Recognized {
    val index = 62
    val name = "DataCoordNA"
    override def isDataCoordNa: _root_.scala.Boolean = true
  }
  
  /** internal error code.
    */
  @SerialVersionUID(0L)
  case object DDRequestRace extends ErrorCode(1000) with ErrorCode.Recognized {
    val index = 63
    val name = "DDRequestRace"
    override def isDdrequestRace: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  @scala.deprecated(message="Marked as deprecated in proto file", "")
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends ErrorCode(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(Success, UnexpectedError, ConnectFailed, PermissionDenied, CollectionNotExists, IllegalArgument, IllegalDimension, IllegalIndexType, IllegalCollectionName, IllegalTOPK, IllegalRowRecord, IllegalVectorID, IllegalSearchResult, FileNotFound, MetaFailed, CacheFailed, CannotCreateFolder, CannotCreateFile, CannotDeleteFolder, CannotDeleteFile, BuildIndexError, IllegalNLIST, IllegalMetricType, OutOfMemory, IndexNotExist, EmptyCollection, UpdateImportTaskFailure, CollectionNameNotFound, CreateCredentialFailure, UpdateCredentialFailure, DeleteCredentialFailure, GetCredentialFailure, ListCredUsersFailure, GetUserFailure, CreateRoleFailure, DropRoleFailure, OperateUserRoleFailure, SelectRoleFailure, SelectUserFailure, SelectResourceFailure, OperatePrivilegeFailure, SelectGrantFailure, RefreshPolicyInfoCacheFailure, ListPolicyFailure, NotShardLeader, NoReplicaAvailable, SegmentNotFound, ForceDeny, RateLimit, NodeIDNotMatch, UpsertAutoIDTrue, InsufficientMemoryToLoad, MemoryQuotaExhausted, DiskQuotaExhausted, TimeTickLongDelay, NotReadyServe, NotReadyCoordActivating, CreatePrivilegeGroupFailure, DropPrivilegeGroupFailure, ListPrivilegeGroupsFailure, OperatePrivilegeGroupFailure, SchemaMismatch, DataCoordNA, DDRequestRace)
  def fromValue(__value: _root_.scala.Int): ErrorCode = __value match {
    case 0 => Success
    case 1 => UnexpectedError
    case 2 => ConnectFailed
    case 3 => PermissionDenied
    case 4 => CollectionNotExists
    case 5 => IllegalArgument
    case 7 => IllegalDimension
    case 8 => IllegalIndexType
    case 9 => IllegalCollectionName
    case 10 => IllegalTOPK
    case 11 => IllegalRowRecord
    case 12 => IllegalVectorID
    case 13 => IllegalSearchResult
    case 14 => FileNotFound
    case 15 => MetaFailed
    case 16 => CacheFailed
    case 17 => CannotCreateFolder
    case 18 => CannotCreateFile
    case 19 => CannotDeleteFolder
    case 20 => CannotDeleteFile
    case 21 => BuildIndexError
    case 22 => IllegalNLIST
    case 23 => IllegalMetricType
    case 24 => OutOfMemory
    case 25 => IndexNotExist
    case 26 => EmptyCollection
    case 27 => UpdateImportTaskFailure
    case 28 => CollectionNameNotFound
    case 29 => CreateCredentialFailure
    case 30 => UpdateCredentialFailure
    case 31 => DeleteCredentialFailure
    case 32 => GetCredentialFailure
    case 33 => ListCredUsersFailure
    case 34 => GetUserFailure
    case 35 => CreateRoleFailure
    case 36 => DropRoleFailure
    case 37 => OperateUserRoleFailure
    case 38 => SelectRoleFailure
    case 39 => SelectUserFailure
    case 40 => SelectResourceFailure
    case 41 => OperatePrivilegeFailure
    case 42 => SelectGrantFailure
    case 43 => RefreshPolicyInfoCacheFailure
    case 44 => ListPolicyFailure
    case 45 => NotShardLeader
    case 46 => NoReplicaAvailable
    case 47 => SegmentNotFound
    case 48 => ForceDeny
    case 49 => RateLimit
    case 50 => NodeIDNotMatch
    case 51 => UpsertAutoIDTrue
    case 52 => InsufficientMemoryToLoad
    case 53 => MemoryQuotaExhausted
    case 54 => DiskQuotaExhausted
    case 55 => TimeTickLongDelay
    case 56 => NotReadyServe
    case 57 => NotReadyCoordActivating
    case 58 => CreatePrivilegeGroupFailure
    case 59 => DropPrivilegeGroupFailure
    case 60 => ListPrivilegeGroupsFailure
    case 61 => OperatePrivilegeGroupFailure
    case 62 => SchemaMismatch
    case 100 => DataCoordNA
    case 1000 => DDRequestRace
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.milvus.grpc.common.CommonProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.milvus.grpc.common.CommonProto.scalaDescriptor.enums(0)
}