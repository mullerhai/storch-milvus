// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.common

@SerialVersionUID(0L)
final case class MsgBase(
    msgType: io.milvus.grpc.common.MsgType = io.milvus.grpc.common.MsgType.Undefined,
    msgID: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Long = 0L,
    sourceID: _root_.scala.Long = 0L,
    targetID: _root_.scala.Long = 0L,
    properties: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = _root_.scala.collection.immutable.Map.empty,
    replicateInfo: _root_.scala.Option[io.milvus.grpc.common.ReplicateInfo] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgBase] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = msgType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = msgID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = timestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = sourceID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = targetID
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      properties.foreach { __item =>
        val __value = io.milvus.grpc.common.MsgBase._typemapper_properties.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (replicateInfo.isDefined) {
        val __value = replicateInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = msgType.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = msgID
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = sourceID
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = targetID
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      properties.foreach { __v =>
        val __m = io.milvus.grpc.common.MsgBase._typemapper_properties.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      replicateInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withMsgType(__v: io.milvus.grpc.common.MsgType): MsgBase = copy(msgType = __v)
    def withMsgID(__v: _root_.scala.Long): MsgBase = copy(msgID = __v)
    def withTimestamp(__v: _root_.scala.Long): MsgBase = copy(timestamp = __v)
    def withSourceID(__v: _root_.scala.Long): MsgBase = copy(sourceID = __v)
    def withTargetID(__v: _root_.scala.Long): MsgBase = copy(targetID = __v)
    def clearProperties = copy(properties = _root_.scala.collection.immutable.Map.empty)
    def addProperties(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String) *): MsgBase = addAllProperties(__vs)
    def addAllProperties(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): MsgBase = copy(properties = properties ++ __vs)
    def withProperties(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): MsgBase = copy(properties = __v)
    def getReplicateInfo: io.milvus.grpc.common.ReplicateInfo = replicateInfo.getOrElse(io.milvus.grpc.common.ReplicateInfo.defaultInstance)
    def clearReplicateInfo: MsgBase = copy(replicateInfo = _root_.scala.None)
    def withReplicateInfo(__v: io.milvus.grpc.common.ReplicateInfo): MsgBase = copy(replicateInfo = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = msgType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = msgID
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = sourceID
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = targetID
          if (__t != 0L) __t else null
        }
        case 6 => properties.iterator.map(io.milvus.grpc.common.MsgBase._typemapper_properties.toBase(_)).toSeq
        case 7 => replicateInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(msgType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PLong(msgID)
        case 3 => _root_.scalapb.descriptors.PLong(timestamp)
        case 4 => _root_.scalapb.descriptors.PLong(sourceID)
        case 5 => _root_.scalapb.descriptors.PLong(targetID)
        case 6 => _root_.scalapb.descriptors.PRepeated(properties.iterator.map(io.milvus.grpc.common.MsgBase._typemapper_properties.toBase(_).toPMessage).toVector)
        case 7 => replicateInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.common.MsgBase.type = io.milvus.grpc.common.MsgBase
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.common.MsgBase])
}

object MsgBase extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.MsgBase] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.MsgBase] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.common.MsgBase = {
    var __msgType: io.milvus.grpc.common.MsgType = io.milvus.grpc.common.MsgType.Undefined
    var __msgID: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Long = 0L
    var __sourceID: _root_.scala.Long = 0L
    var __targetID: _root_.scala.Long = 0L
    val __properties: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Predef.String), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String]
    var __replicateInfo: _root_.scala.Option[io.milvus.grpc.common.ReplicateInfo] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __msgType = io.milvus.grpc.common.MsgType.fromValue(_input__.readEnum())
        case 16 =>
          __msgID = _input__.readInt64()
        case 24 =>
          __timestamp = _input__.readUInt64()
        case 32 =>
          __sourceID = _input__.readInt64()
        case 40 =>
          __targetID = _input__.readInt64()
        case 50 =>
          __properties += io.milvus.grpc.common.MsgBase._typemapper_properties.toCustom(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.MsgBase.PropertiesEntry](_input__))
        case 58 =>
          __replicateInfo = _root_.scala.Option(__replicateInfo.fold(_root_.scalapb.LiteParser.readMessage[io.milvus.grpc.common.ReplicateInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.common.MsgBase(
        msgType = __msgType,
        msgID = __msgID,
        timestamp = __timestamp,
        sourceID = __sourceID,
        targetID = __targetID,
        properties = __properties.result(),
        replicateInfo = __replicateInfo,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.common.MsgBase] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.common.MsgBase(
        msgType = io.milvus.grpc.common.MsgType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.milvus.grpc.common.MsgType.Undefined.scalaValueDescriptor).number),
        msgID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        sourceID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        targetID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        properties = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.milvus.grpc.common.MsgBase.PropertiesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(io.milvus.grpc.common.MsgBase._typemapper_properties.toCustom(_)).toMap,
        replicateInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.milvus.grpc.common.ReplicateInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.common.CommonProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.common.CommonProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = io.milvus.grpc.common.MsgBase.PropertiesEntry
      case 7 => __out = io.milvus.grpc.common.ReplicateInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.milvus.grpc.common.MsgBase.PropertiesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => io.milvus.grpc.common.MsgType
    }
  }
  lazy val defaultInstance = io.milvus.grpc.common.MsgBase(
    msgType = io.milvus.grpc.common.MsgType.Undefined,
    msgID = 0L,
    timestamp = 0L,
    sourceID = 0L,
    targetID = 0L,
    properties = _root_.scala.collection.immutable.Map.empty,
    replicateInfo = _root_.scala.None
  )
  @SerialVersionUID(0L)
  final case class PropertiesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PropertiesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): PropertiesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): PropertiesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.milvus.grpc.common.MsgBase.PropertiesEntry.type = io.milvus.grpc.common.MsgBase.PropertiesEntry
      // @@protoc_insertion_point(GeneratedMessage[milvus.proto.common.MsgBase.PropertiesEntry])
  }
  
  object PropertiesEntry extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.MsgBase.PropertiesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.MsgBase.PropertiesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.common.MsgBase.PropertiesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.milvus.grpc.common.MsgBase.PropertiesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.common.MsgBase.PropertiesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.milvus.grpc.common.MsgBase.PropertiesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.common.MsgBase.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.common.MsgBase.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.milvus.grpc.common.MsgBase.PropertiesEntry(
      key = "",
      value = ""
    )
    implicit class PropertiesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase.PropertiesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.common.MsgBase.PropertiesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[io.milvus.grpc.common.MsgBase.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[io.milvus.grpc.common.MsgBase.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => io.milvus.grpc.common.MsgBase.PropertiesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Predef.String
    ): _root_.io.milvus.grpc.common.MsgBase.PropertiesEntry = _root_.io.milvus.grpc.common.MsgBase.PropertiesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.common.MsgBase.PropertiesEntry])
  }
  
  implicit class MsgBaseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgBase]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.common.MsgBase](_l) {
    def msgType: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.MsgType] = field(_.msgType)((c_, f_) => c_.copy(msgType = f_))
    def msgID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.msgID)((c_, f_) => c_.copy(msgID = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def sourceID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sourceID)((c_, f_) => c_.copy(sourceID = f_))
    def targetID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.targetID)((c_, f_) => c_.copy(targetID = f_))
    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
    def replicateInfo: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.ReplicateInfo] = field(_.getReplicateInfo)((c_, f_) => c_.copy(replicateInfo = _root_.scala.Option(f_)))
    def optionalReplicateInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.milvus.grpc.common.ReplicateInfo]] = field(_.replicateInfo)((c_, f_) => c_.copy(replicateInfo = f_))
  }
  final val MSG_TYPE_FIELD_NUMBER = 1
  final val MSGID_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  final val SOURCEID_FIELD_NUMBER = 4
  final val TARGETID_FIELD_NUMBER = 5
  final val PROPERTIES_FIELD_NUMBER = 6
  final val REPLICATEINFO_FIELD_NUMBER = 7
  @transient
  private[common] val _typemapper_properties: _root_.scalapb.TypeMapper[io.milvus.grpc.common.MsgBase.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[io.milvus.grpc.common.MsgBase.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
  def of(
    msgType: io.milvus.grpc.common.MsgType,
    msgID: _root_.scala.Long,
    timestamp: _root_.scala.Long,
    sourceID: _root_.scala.Long,
    targetID: _root_.scala.Long,
    properties: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String],
    replicateInfo: _root_.scala.Option[io.milvus.grpc.common.ReplicateInfo]
  ): _root_.io.milvus.grpc.common.MsgBase = _root_.io.milvus.grpc.common.MsgBase(
    msgType,
    msgID,
    timestamp,
    sourceID,
    targetID,
    properties,
    replicateInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.common.MsgBase])
}
