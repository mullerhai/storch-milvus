// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.common

sealed abstract class SegmentState(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = io.milvus.grpc.common.SegmentState
  type RecognizedType = io.milvus.grpc.common.SegmentState.Recognized
  def isSegmentStateNone: _root_.scala.Boolean = false
  def isNotExist: _root_.scala.Boolean = false
  def isGrowing: _root_.scala.Boolean = false
  def isSealed: _root_.scala.Boolean = false
  def isFlushed: _root_.scala.Boolean = false
  def isFlushing: _root_.scala.Boolean = false
  def isDropped: _root_.scala.Boolean = false
  def isImporting: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[SegmentState] = io.milvus.grpc.common.SegmentState
  final def asRecognized: _root_.scala.Option[io.milvus.grpc.common.SegmentState.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.milvus.grpc.common.SegmentState.Recognized])
}

object SegmentState extends _root_.scalapb.GeneratedEnumCompanion[SegmentState] {
  sealed trait Recognized extends SegmentState
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SegmentState] = this
  
  @SerialVersionUID(0L)
  case object SegmentStateNone extends SegmentState(0) with SegmentState.Recognized {
    val index = 0
    val name = "SegmentStateNone"
    override def isSegmentStateNone: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NotExist extends SegmentState(1) with SegmentState.Recognized {
    val index = 1
    val name = "NotExist"
    override def isNotExist: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Growing extends SegmentState(2) with SegmentState.Recognized {
    val index = 2
    val name = "Growing"
    override def isGrowing: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Sealed extends SegmentState(3) with SegmentState.Recognized {
    val index = 3
    val name = "Sealed"
    override def isSealed: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Flushed extends SegmentState(4) with SegmentState.Recognized {
    val index = 4
    val name = "Flushed"
    override def isFlushed: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Flushing extends SegmentState(5) with SegmentState.Recognized {
    val index = 5
    val name = "Flushing"
    override def isFlushing: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Dropped extends SegmentState(6) with SegmentState.Recognized {
    val index = 6
    val name = "Dropped"
    override def isDropped: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object Importing extends SegmentState(7) with SegmentState.Recognized {
    val index = 7
    val name = "Importing"
    override def isImporting: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SegmentState(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(SegmentStateNone, NotExist, Growing, Sealed, Flushed, Flushing, Dropped, Importing)
  def fromValue(__value: _root_.scala.Int): SegmentState = __value match {
    case 0 => SegmentStateNone
    case 1 => NotExist
    case 2 => Growing
    case 3 => Sealed
    case 4 => Flushed
    case 5 => Flushing
    case 6 => Dropped
    case 7 => Importing
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.milvus.grpc.common.CommonProto.javaDescriptor.getEnumTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.milvus.grpc.common.CommonProto.scalaDescriptor.enums(2)
}