// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.milvus.grpc.common

/** NodeInfo is used to describe the node information.
  */
@SerialVersionUID(0L)
final case class NodeInfo(
    nodeId: _root_.scala.Long = 0L,
    address: _root_.scala.Predef.String = "",
    hostname: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NodeInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = nodeId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = address
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = hostname
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = nodeId
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = address
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = hostname
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withNodeId(__v: _root_.scala.Long): NodeInfo = copy(nodeId = __v)
    def withAddress(__v: _root_.scala.Predef.String): NodeInfo = copy(address = __v)
    def withHostname(__v: _root_.scala.Predef.String): NodeInfo = copy(hostname = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = nodeId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = address
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = hostname
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(nodeId)
        case 2 => _root_.scalapb.descriptors.PString(address)
        case 3 => _root_.scalapb.descriptors.PString(hostname)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.milvus.grpc.common.NodeInfo.type = io.milvus.grpc.common.NodeInfo
    // @@protoc_insertion_point(GeneratedMessage[milvus.proto.common.NodeInfo])
}

object NodeInfo extends scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.NodeInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.milvus.grpc.common.NodeInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.milvus.grpc.common.NodeInfo = {
    var __nodeId: _root_.scala.Long = 0L
    var __address: _root_.scala.Predef.String = ""
    var __hostname: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __nodeId = _input__.readInt64()
        case 18 =>
          __address = _input__.readStringRequireUtf8()
        case 26 =>
          __hostname = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.milvus.grpc.common.NodeInfo(
        nodeId = __nodeId,
        address = __address,
        hostname = __hostname,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.milvus.grpc.common.NodeInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.milvus.grpc.common.NodeInfo(
        nodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hostname = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.milvus.grpc.common.CommonProto.javaDescriptor.getMessageTypes().get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.milvus.grpc.common.CommonProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.milvus.grpc.common.NodeInfo(
    nodeId = 0L,
    address = "",
    hostname = ""
  )
  implicit class NodeInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.milvus.grpc.common.NodeInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.milvus.grpc.common.NodeInfo](_l) {
    def nodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.nodeId)((c_, f_) => c_.copy(nodeId = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def hostname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
  }
  final val NODE_ID_FIELD_NUMBER = 1
  final val ADDRESS_FIELD_NUMBER = 2
  final val HOSTNAME_FIELD_NUMBER = 3
  def of(
    nodeId: _root_.scala.Long,
    address: _root_.scala.Predef.String,
    hostname: _root_.scala.Predef.String
  ): _root_.io.milvus.grpc.common.NodeInfo = _root_.io.milvus.grpc.common.NodeInfo(
    nodeId,
    address,
    hostname
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[milvus.proto.common.NodeInfo])
}
